<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>柯摩的BLOG</title>
  
  <subtitle>Forget before get.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://kemo.xyz/"/>
  <updated>2020-09-02T09:17:32.469Z</updated>
  <id>https://kemo.xyz/</id>
  
  <author>
    <name>柯摩</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>在本地VMware的Ubuntu，腾讯云CVM以及阿里云的ECS中搭建IPFS私有网络</title>
    <link href="https://kemo.xyz/%E5%9C%A8%E6%9C%AC%E5%9C%B0VMware%E7%9A%84Ubuntu%EF%BC%8C%E8%85%BE%E8%AE%AF%E4%BA%91CVM%E4%BB%A5%E5%8F%8A%E9%98%BF%E9%87%8C%E4%BA%91%E7%9A%84ECS%E4%B8%AD%E6%90%AD%E5%BB%BAIPFS%E7%A7%81%E6%9C%89%E7%BD%91%E7%BB%9C.html"/>
    <id>https://kemo.xyz/在本地VMware的Ubuntu，腾讯云CVM以及阿里云的ECS中搭建IPFS私有网络.html</id>
    <published>2020-09-02T09:02:29.000Z</published>
    <updated>2020-09-02T09:17:32.469Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>IPFS三部曲，之三。<br><a id="more"></a></p><h1 id="0️⃣-前言"><a href="#0️⃣-前言" class="headerlink" title="0️⃣ 前言"></a>0️⃣ 前言</h1><ul><li><p>连接<strong>腾讯云CVM</strong>，以及<strong>阿里云ECS</strong>可以用<strong>FinalShell</strong>或者<strong>Xshell</strong>，用<strong>Xshell</strong>的教程在这里<a href="https://blog.csdn.net/ExcaliburUlimited/article/details/107718611" target="_blank" rel="noopener">保姆级教程——Xshell连接虚拟机中的Ubuntu并通过Xftp传输文件</a>，连接本地Ubuntu和云端服务器步骤是一样的，只是ip输入的是公网ip。</p></li><li><p>在连接完毕后就可以进行后面的操作。</p></li><li><p>查看三个节点机器的IP地址：</p><ol><li><p>VMware中Ubuntu18.04的IP，即运行</p> <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig</span><br></pre></td></tr></tbody></table></figure><p> 得到</p><p> <img src="https://img-blog.csdnimg.cn/20200806175530875.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0V4Y2FsaWJ1clVsaW1pdGVk,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p> 这里的<code>192.168.3.105</code>便是。</p></li><li><p>腾讯云CVM</p><p> <img src="https://img-blog.csdnimg.cn/20200806175640292.png" alt="在这里插入图片描述"></p><p> 需要用到的就是这里的公网ip：<code>129.211.103.82</code>。</p></li><li><p>阿里云ECS</p><p> <img src="https://img-blog.csdnimg.cn/20200806175729830.png" alt="在这里插入图片描述"></p><p> 需要用到的就是这里的公网ip：<code>47.96.189.80</code>。</p></li></ol></li></ul><h1 id="1️⃣-安装IPFS"><a href="#1️⃣-安装IPFS" class="headerlink" title="1️⃣ 安装IPFS"></a>1️⃣ 安装<code>IPFS</code></h1><p>具体请看这篇文章：<a href="https://blog.csdn.net/ExcaliburUlimited/article/details/107717905" target="_blank" rel="noopener">一文完全解决——Ubuntu20.04下源码构建安装IPFS环境</a><br>在最后运行：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ipfs init</span><br></pre></td></tr></tbody></table></figure><p>注意一下输出信息：<br><img src="https://img-blog.csdnimg.cn/20200806174837562.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0V4Y2FsaWJ1clVsaW1pdGVk,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>也就是这里生成的<code>.ipfs</code>文件在什么位置，不记得可以再运行一遍<code>ipfs init</code>即可，这个位置后面要用到。</p><h1 id="2️⃣-生成共享Key"><a href="#2️⃣-生成共享Key" class="headerlink" title="2️⃣ 生成共享Key"></a>2️⃣ 生成共享Key</h1><ul><li>因为我们要组建的是私有网络，所有节点需要使用相同的<strong>私有key</strong>来加入网络中，我们使用<code>go-ipfs-swarm-key-gen</code>工具来生成共享key。我准备把本地的VMware的Ubuntu作为主运行节点，所以在这台Ubuntu上运行如下命令：</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#编译工具</span></span><br><span class="line">go get github.com/Kubuxu/go-ipfs-swarm-key-gen/ipfs-swarm-key-gen</span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$GOPATH</span></span><br><span class="line"><span class="built_in">cd</span> src/github.com/Kubuxu/go-ipfs-swarm-key-gen/ipfs-swarm-key-gen/</span><br><span class="line">go build</span><br><span class="line"><span class="comment"># 生成key</span></span><br><span class="line">./ipfs-swarm-key-gen > /home/excalibur/.ipfs/swarm.key</span><br></pre></td></tr></tbody></table></figure><p>然后分别运行：</p><ul><li><p>对腾讯云服务器：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将本地生成的key拷贝到腾讯云服务器上的相同目录下</span></span><br><span class="line">scp /home/excalibur/.ipfs/swarm.key 192.168.3.105:/home/ubuntu/.ipfs/</span><br></pre></td></tr></tbody></table></figure></li><li><p>对阿里云服务器：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将本地生成的key拷贝到阿里云服务器上的相同目录下</span></span><br><span class="line">scp /home/excalibur/.ipfs/swarm.key 47.96.189.80:/root/.ipfs/</span><br></pre></td></tr></tbody></table></figure></li><li><p>这里有三点需要注意：</p><ol><li><code>/home/excalibur/.ipfs/swarm.key</code>这里面的<code>/home/excalibur/.ipfs/</code>是我的<code>ipfs</code>配置文件夹，你应该根据自己的位置修改，也就是之前提到的那个目录。</li><li><code>47.96.189.80:/root/.ipfs/</code>，这里面前面的<code>ip</code>地址要根据你服务器的修改，并且后面的<code>/root/.ipfs/</code>也要根据你服务器上的<code>ipfs</code>文件夹修改，可以运行<code>ipfs init</code>进行查看。</li><li>如果遇到密码输入正确，然而出现<code>Permissioned denied</code>的情况，就输入<code>su</code>进入管理员模式，重新运行上面两个<code>scp</code>命令。</li></ol></li></ul><h1 id="3️⃣-移除默认的boostrap节点"><a href="#3️⃣-移除默认的boostrap节点" class="headerlink" title="3️⃣ 移除默认的boostrap节点"></a>3️⃣ 移除默认的<code>boostrap</code>节点</h1><ul><li>因为要运行在私有网络上，不进入公网，必须删除其他启动节点信息。在三个节点上分别运行如下命令：</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ipfs bootstrap rm --all</span><br></pre></td></tr></tbody></table></figure><h1 id="4️⃣-添加启动boostrap节点信息"><a href="#4️⃣-添加启动boostrap节点信息" class="headerlink" title="4️⃣ 添加启动boostrap节点信息"></a>4️⃣ 添加启动<code>boostrap</code>节点信息</h1><ul><li>这里以本地Ubuntu为启动节点，首先在本地节点运行如下命令：</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ipfs id</span><br></pre></td></tr></tbody></table></figure><p>得到：</p><p><img src="https://img-blog.csdnimg.cn/20200806192317965.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0V4Y2FsaWJ1clVsaW1pdGVk,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>我们需要这里的<code>hash</code>值：<code>QmTADgGT4MaCd3aTpD4vweGLQdWhr8oH8sue43DDioWBXA</code>，然后再加上之前的本地节点的ip地址：<code>192.168.3.105</code>，就得到了所有需要的<code>bootstrap</code>信息，然后分别在两台云服务器上运行如下命令：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ipfs bootstrap add /ip4/192.168.3.105/tcp/4001/ipfs/QmTADgGT4MaCd3aTpD4vweGLQdWhr8oH8sue43DDioWBXA</span><br></pre></td></tr></tbody></table></figure><p>即可将本地节点作为它们的启动节点，自动加入<code>ipfs</code>网络。</p><h1 id="5️⃣-查看启动状态"><a href="#5️⃣-查看启动状态" class="headerlink" title="5️⃣ 查看启动状态"></a>5️⃣ 查看启动状态</h1><ul><li>分别在三个节点上运行：</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ipfs daemon</span><br></pre></td></tr></tbody></table></figure><ul><li>然后在任意节点上运行：</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ipfs swarm peers</span><br></pre></td></tr></tbody></table></figure><p>将看到其他网络内节点的运行信息，我这里是在本地Ubuntu上运行的命令，可以看到腾讯云服务器的节点信息，但是阿里云不在😅。<br>原因在于ECS的安全组设置：打开阿里云服务器设置，首先<code>网络与安全组</code>，然后<code>安全组配置</code>，然后<code>配置规则</code>，<code>手动添加</code>三个端口，分别是4001,5001，以及8080，最后ip地址可以是本地Ubuntu地址，或者直接设置成<code>0.0.0.0/0</code>。<br><img src="https://img-blog.csdnimg.cn/20200806212017943.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0V4Y2FsaWJ1clVsaW1pdGVk,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20200806192835742.png" alt="在这里插入图片描述"></p><ul><li>也可以运行：</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ipfs stats bitswap</span><br></pre></td></tr></tbody></table></figure><p>可以看到<br><img src="https://img-blog.csdnimg.cn/20200806193239567.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0V4Y2FsaWJ1clVsaW1pdGVk,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这里的<code>partners</code>字段为1，说明当前网络有2个节点。</p><h1 id="6️⃣-上传下载测试"><a href="#6️⃣-上传下载测试" class="headerlink" title="6️⃣ 上传下载测试"></a>6️⃣ 上传下载测试</h1><ul><li>在本地节点上传一个文件：</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> helloworld > hello.txt</span><br><span class="line">ipfs add hello.txt</span><br></pre></td></tr></tbody></table></figure><p>得到：</p><p><img src="https://img-blog.csdnimg.cn/20200806193616983.png" alt="在这里插入图片描述"></p><ul><li>可以在云服务器节点查看下载这个文件：</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ipfs cat QmUU2HcUBVSXkfWPUc3WUSeCMrWWeEJTuAgR9uyWBhh9Nf</span><br><span class="line">ipfs get QmUU2HcUBVSXkfWPUc3WUSeCMrWWeEJTuAgR9uyWBhh9Nf</span><br></pre></td></tr></tbody></table></figure><p><img src="https://img-blog.csdnimg.cn/20200806193752298.png" alt="在这里插入图片描述"></p><p>可见，就很纳爱斯！😁😁😁</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;IPFS三部曲，之三。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Ubuntu" scheme="https://kemo.xyz/categories/Ubuntu/"/>
    
    
      <category term="Ubuntu" scheme="https://kemo.xyz/tags/Ubuntu/"/>
    
      <category term="Linux" scheme="https://kemo.xyz/tags/Linux/"/>
    
      <category term="Xshell" scheme="https://kemo.xyz/tags/Xshell/"/>
    
      <category term="虚拟机" scheme="https://kemo.xyz/tags/%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
      <category term="IPFS" scheme="https://kemo.xyz/tags/IPFS/"/>
    
      <category term="CVM" scheme="https://kemo.xyz/tags/CVM/"/>
    
      <category term="ECS" scheme="https://kemo.xyz/tags/ECS/"/>
    
      <category term="私有网络" scheme="https://kemo.xyz/tags/%E7%A7%81%E6%9C%89%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>一文完全解决Ubuntu20.04下源码构建安装IPFS环境</title>
    <link href="https://kemo.xyz/%E4%B8%80%E6%96%87%E5%AE%8C%E5%85%A8%E8%A7%A3%E5%86%B3Ubuntu20-04%E4%B8%8B%E6%BA%90%E7%A0%81%E6%9E%84%E5%BB%BA%E5%AE%89%E8%A3%85IPFS%E7%8E%AF%E5%A2%83.html"/>
    <id>https://kemo.xyz/一文完全解决Ubuntu20-04下源码构建安装IPFS环境.html</id>
    <published>2020-09-02T08:56:57.000Z</published>
    <updated>2020-09-02T09:01:53.766Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>IPFS三部曲，之二。<br><a id="more"></a></p><h1 id="zero-前言"><a href="#zero-前言" class="headerlink" title=":zero: 前言"></a><span class="github-emoji" style="display:inline;vertical-align:middle;color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/0030-20e3.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/0030-20e3.png?v8">0⃣</span> 前言</h1><p>如果是新装的Ubuntu系统，运行<code>sudo</code>命令输入密码，可能会不成功，所以需要先运行：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo passwd</span><br></pre></td></tr></tbody></table></figure><p>重置密码，即可。</p><h1 id="one-安装配置Go语言"><a href="#one-安装配置Go语言" class="headerlink" title=":one:  安装配置Go语言"></a><span class="github-emoji" style="display:inline;vertical-align:middle;color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/0031-20e3.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/0031-20e3.png?v8">1⃣</span>  安装配置<code>Go</code>语言</h1><h2 id="one-one-下载Go"><a href="#one-one-下载Go" class="headerlink" title=":one:.:one: 下载Go"></a><span class="github-emoji" style="display:inline;vertical-align:middle;color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/0031-20e3.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/0031-20e3.png?v8">1⃣</span>.<span class="github-emoji" style="display:inline;vertical-align:middle;color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/0031-20e3.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/0031-20e3.png?v8">1⃣</span> 下载<code>Go</code></h2><p><code>IPFS</code>是基于<code>Go</code>语言的项目，环境要求go version 1.14+。在<code>Go</code>的官方网站下载最新的版本即可<a href="https://golang.org/dl/" target="_blank" rel="noopener">https://golang.org/dl/</a>。<br>可以用以下命令：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://golang.org/dl/go1.14.6.linux-amd64.tar.gz</span><br><span class="line">tar -C /usr/<span class="built_in">local</span> -xzf go1.14.6.linux-amd64.tar.gz</span><br></pre></td></tr></tbody></table></figure><p><strong>Tips</strong>:</p><ul><li>如果<code>wget</code>失败可以到官网<a href="https://golang.org/dl/go1.14.6.linux-amd64.tar.gz" target="_blank" rel="noopener">https://golang.org/dl/go1.14.6.linux-amd64.tar.gz</a>下载镜像，然后在那个目录下打开终端执行上面的命令的第二句。</li><li>如果虚拟机下载失败，可以在主机中下载完成后，用<code>Xftp</code>连接虚拟机，将文件拖过去，至于如何连接，请看这篇文章<a href="https://blog.csdn.net/ExcaliburUlimited/article/details/107718611" target="_blank" rel="noopener">保姆级教程——Xshell连接虚拟机中的Ubuntu并通过Xftp传输文件</a>，<code>Xshell</code>和<code>Xftp</code>连接过程相同。<h2 id="one-two-配置Go环境"><a href="#one-two-配置Go环境" class="headerlink" title=":one:.:two: 配置Go环境"></a><span class="github-emoji" style="display:inline;vertical-align:middle;color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/0031-20e3.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/0031-20e3.png?v8">1⃣</span>.<span class="github-emoji" style="display:inline;vertical-align:middle;color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/0032-20e3.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/0032-20e3.png?v8">2⃣</span> 配置<code>Go</code>环境</h2></li><li>在进入用户主目录，并新建名为<code>go</code>的文件夹，在<code>go</code>的文件夹中建立三个子目录(名字必须为<code>src</code>、<code>pkg</code>和<code>bin</code>)。创建目录过程如下:</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">mkdir go</span><br><span class="line"><span class="built_in">cd</span> go</span><br><span class="line">sudo mkdir src</span><br><span class="line">sudo mkdir pkg</span><br><span class="line">sudo mkdir bin</span><br><span class="line">sudo chmod 777 src</span><br><span class="line">sudo chmod 777 pkg</span><br><span class="line">sudo chmod 777 bin</span><br><span class="line">ls -l</span><br></pre></td></tr></tbody></table></figure><ul><li>配置环境变量，首先输入：</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi ~/.profile</span><br></pre></td></tr></tbody></table></figure><ul><li>打开用户的环境变量，在最后添加如下内容：</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/usr/<span class="built_in">local</span>/go/bin </span><br><span class="line"><span class="built_in">export</span> GOROOT=/usr/<span class="built_in">local</span>/go </span><br><span class="line"><span class="built_in">export</span> GOPATH=<span class="variable">$HOME</span>/go </span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$HOME</span>/go/bin</span><br></pre></td></tr></tbody></table></figure><p>然后按<code>Esc</code>退出，接着输入<code>:wq</code>，然后输入回车就可以保存退出。</p><ul><li>激活配置文件，即输入如下命令：</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.profile</span><br></pre></td></tr></tbody></table></figure><ul><li>最后验证一下是否成功，输入如下命令查看结果：</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">go version</span><br><span class="line">go env</span><br></pre></td></tr></tbody></table></figure><ul><li>但是这样关掉终端，配置就会失效，所以在<code>~/.bashrc</code>中也设置一下：</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gedit ~/.bashrc</span><br></pre></td></tr></tbody></table></figure><p>然后在最后面添加：<br></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/usr/<span class="built_in">local</span>/go/bin </span><br><span class="line"><span class="built_in">export</span> GOROOT=/usr/<span class="built_in">local</span>/go </span><br><span class="line"><span class="built_in">export</span> GOPATH=<span class="variable">$HOME</span>/go </span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$HOME</span>/go/bin</span><br></pre></td></tr></tbody></table></figure><p></p><p>最后再：<br></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></tbody></table></figure><p></p><h1 id="two-安装配置IPFS环境"><a href="#two-安装配置IPFS环境" class="headerlink" title=":two:  安装配置IPFS环境"></a><span class="github-emoji" style="display:inline;vertical-align:middle;color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/0032-20e3.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/0032-20e3.png?v8">2⃣</span>  安装配置IPFS环境</h1><h2 id="two-one-更新apt-get-并安装-git"><a href="#two-one-更新apt-get-并安装-git" class="headerlink" title=":two:.:one: 更新apt-get 并安装 git"></a><span class="github-emoji" style="display:inline;vertical-align:middle;color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/0032-20e3.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/0032-20e3.png?v8">2⃣</span>.<span class="github-emoji" style="display:inline;vertical-align:middle;color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/0031-20e3.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/0031-20e3.png?v8">1⃣</span> 更新<code>apt-get</code> 并安装 <code>git</code></h2><ul><li>在<code>terminal</code>执行以下语句:</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install git</span><br></pre></td></tr></tbody></table></figure><h2 id="two-two-下载go-ipfs源码"><a href="#two-two-下载go-ipfs源码" class="headerlink" title=":two:.:two: 下载go-ipfs源码"></a><span class="github-emoji" style="display:inline;vertical-align:middle;color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/0032-20e3.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/0032-20e3.png?v8">2⃣</span>.<span class="github-emoji" style="display:inline;vertical-align:middle;color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/0032-20e3.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/0032-20e3.png?v8">2⃣</span> 下载<code>go-ipfs</code>源码</h2><blockquote><p>因为<code>go get</code>国内基本上下载不了，加上镜像的话例如：<br></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">go env -w GO111MODULE=on</span><br><span class="line">go env -w GOPROXY=https://goproxy.cn,direct</span><br><span class="line">go get -u github.com/ipfs/go-ipfs</span><br></pre></td></tr></tbody></table></figure><p></p><p>虽然可以很快地下载，但却下载到了<code>/go/pkg/mod/</code>的目录下，感觉很难受，所以不推荐这种下载方法。</p></blockquote><ul><li>可以采取直接<code>git clone</code>的方法，但是如果直接<code>clone</code>的是<code>github</code>上的源码还是很慢，所以我采取的方法是，先将源码<code>fork</code>到自己的仓库，然后再导入到码云，然后再从码云上<code>clone</code>下来，速度简直快的飞起，可以直接用我的码云上的源码库，版本为<code>ipfs 0.6.0</code>，操作如下：</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line"><span class="built_in">cd</span> go/src</span><br><span class="line">mkdir github.com</span><br><span class="line"><span class="built_in">cd</span> github.com</span><br><span class="line">mkdir ipfs</span><br><span class="line"><span class="built_in">cd</span> ipfs</span><br><span class="line">git <span class="built_in">clone</span> https://gitee.com/ExcaliburAias/go-ipfs.git</span><br></pre></td></tr></tbody></table></figure><p>当然，也不用非得<code>clone</code>到<code>go/src/github.com/ipfs/go-ipfs</code>下面，直接<code>clone</code>到桌面也可以。</p><h2 id="two-three-编译go-ipfs源码"><a href="#two-three-编译go-ipfs源码" class="headerlink" title=":two:.:three: 编译go-ipfs源码"></a><span class="github-emoji" style="display:inline;vertical-align:middle;color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/0032-20e3.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/0032-20e3.png?v8">2⃣</span>.<span class="github-emoji" style="display:inline;vertical-align:middle;color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/0033-20e3.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/0033-20e3.png?v8">3⃣</span> 编译<code>go-ipfs</code>源码</h2><p>· 首先安装<code>make</code>工具，然后安装<code>gcc</code>，最后授予文件权限以及更改<code>go get</code>的源，操作如下：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line"><span class="built_in">cd</span> go/src/github.com/ipfs/go-ipfs</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install make</span><br><span class="line">sudo apt install build-essential</span><br><span class="line">sudo chmod 777 /usr/<span class="built_in">local</span>/go/bin</span><br><span class="line">sudo chmod 777 /plugin/loader/preload.go</span><br><span class="line">go env -w GO111MODULE=on</span><br><span class="line">go env -w GOPROXY=https://goproxy.cn,direct</span><br><span class="line">make install</span><br></pre></td></tr></tbody></table></figure><p>· 测试：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ipfs version</span><br></pre></td></tr></tbody></table></figure><p><img src="https://img-blog.csdnimg.cn/20200801024030398.png" alt="在这里插入图片描述"></p><p>最后建议设置回去，也就是：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go env -w GO111MODULE=off</span><br></pre></td></tr></tbody></table></figure><ul><li>最后，除此之外，也可以不用<code>install</code>，直接<code>build</code>，即生成的<code>ipfs.exe</code>不加入系统环境，而是生成在<code>go/src/github.com/ipfs/go-ipfs/cmd/ipfs/ipfs.exe</code>这里。实现方法就是将最后的：</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make install</span><br></pre></td></tr></tbody></table></figure><p>改为<br></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make build</span><br></pre></td></tr></tbody></table></figure><p></p><h1 id="three-IPFS的初始化和连接"><a href="#three-IPFS的初始化和连接" class="headerlink" title=":three:  IPFS的初始化和连接"></a><span class="github-emoji" style="display:inline;vertical-align:middle;color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/0033-20e3.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/0033-20e3.png?v8">3⃣</span>  <code>IPFS</code>的初始化和连接</h1><ul><li>初始化<code>IPFS</code>节点：</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ipfs init</span><br></pre></td></tr></tbody></table></figure><p><img src="https://img-blog.csdnimg.cn/20200801024117206.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0V4Y2FsaWJ1clVsaW1pdGVk,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>按提示输入 </li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ipfs cat /ipfs/QmQPeNsJPyVWPFDVHb77w8G42Fvo15z4bG2X8D2GhfbSXc/readme</span><br></pre></td></tr></tbody></table></figure><p>查看已经存储的readme文件<br><img src="https://img-blog.csdnimg.cn/20200801024238719.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0V4Y2FsaWJ1clVsaW1pdGVk,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>启动守护进程并连接到IPFS网络：<code>ipfs daemon</code><br><img src="https://img-blog.csdnimg.cn/20200801024258894.png" alt="在这里插入图片描述"><br>可以在浏览器中输入：<a href="http://127.0.0.1:5001/webui" target="_blank" rel="noopener">http://127.0.0.1:5001/webui</a> 打开webui界面<br><img src="https://img-blog.csdnimg.cn/202008010245479.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0V4Y2FsaWJ1clVsaW1pdGVk,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;IPFS三部曲，之二。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Ubuntu" scheme="https://kemo.xyz/categories/Ubuntu/"/>
    
    
      <category term="Ubuntu" scheme="https://kemo.xyz/tags/Ubuntu/"/>
    
      <category term="Linux" scheme="https://kemo.xyz/tags/Linux/"/>
    
      <category term="Xshell" scheme="https://kemo.xyz/tags/Xshell/"/>
    
      <category term="虚拟机" scheme="https://kemo.xyz/tags/%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
      <category term="IPFS" scheme="https://kemo.xyz/tags/IPFS/"/>
    
      <category term="Go" scheme="https://kemo.xyz/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>保姆级教程Xshell连接虚拟机中的Ubuntu并通过Xftp传输文件</title>
    <link href="https://kemo.xyz/%E4%BF%9D%E5%A7%86%E7%BA%A7%E6%95%99%E7%A8%8BXshell%E8%BF%9E%E6%8E%A5%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%AD%E7%9A%84Ubuntu%E5%B9%B6%E9%80%9A%E8%BF%87Xftp%E4%BC%A0%E8%BE%93%E6%96%87%E4%BB%B6.html"/>
    <id>https://kemo.xyz/保姆级教程Xshell连接虚拟机中的Ubuntu并通过Xftp传输文件.html</id>
    <published>2020-09-02T08:49:16.000Z</published>
    <updated>2020-09-02T08:55:59.492Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>IPFS三部曲，之一。<br><a id="more"></a></p><h1 id="one-虚拟机设置"><a href="#one-虚拟机设置" class="headerlink" title=":one: 虚拟机设置"></a><span class="github-emoji" style="display:inline;vertical-align:middle;color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/0031-20e3.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/0031-20e3.png?v8">1⃣</span> 虚拟机设置</h1><p>虚拟机——> 设置 ——>网络适配器——> 桥接模式<br><img src="https://img-blog.csdnimg.cn/20200731175055796.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0V4Y2FsaWJ1clVsaW1pdGVk,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="two-查看ip地址"><a href="#two-查看ip地址" class="headerlink" title=":two: 查看ip地址"></a><span class="github-emoji" style="display:inline;vertical-align:middle;color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/0032-20e3.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/0032-20e3.png?v8">2⃣</span> 查看ip地址</h1><p>首先安装<code>net-tools</code>(如已安装忽略)，然后用<code>ifconfig</code>查看ip地址。命令如下：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install net-tools</span><br><span class="line">ifconfig</span><br></pre></td></tr></tbody></table></figure><p>下图红框中就是我们后面需要的ip地址：<br><img src="https://img-blog.csdnimg.cn/20200731175901492.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0V4Y2FsaWJ1clVsaW1pdGVk,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="three-查看ssh状态"><a href="#three-查看ssh状态" class="headerlink" title=":three: 查看ssh状态"></a><span class="github-emoji" style="display:inline;vertical-align:middle;color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/0033-20e3.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/0033-20e3.png?v8">3⃣</span> 查看<code>ssh</code>状态</h1><p>首先检测<code>ssh</code>的状态：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -e | grep ssh</span><br></pre></td></tr></tbody></table></figure><p>没有看到<code>sshd</code>就说明未启动，选择下面的一种方式手动启动就好了:</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo service sshd start</span><br><span class="line">sudo /etc/init.d/ssh start</span><br></pre></td></tr></tbody></table></figure><p>如果没安装，就直接安装，安装完毕会自动启动：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install openssh-server</span><br></pre></td></tr></tbody></table></figure><h1 id="four-启动Xshell进行连接"><a href="#four-启动Xshell进行连接" class="headerlink" title=":four: 启动Xshell进行连接"></a><span class="github-emoji" style="display:inline;vertical-align:middle;color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/0034-20e3.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/0034-20e3.png?v8">4⃣</span> 启动<code>Xshell</code>进行连接</h1><ul><li>首先输入名称和前文的<code>inet</code>后面的<code>ip</code>地址：<br><img src="https://img-blog.csdnimg.cn/20200731180421630.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0V4Y2FsaWJ1clVsaW1pdGVk,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>然后在用户身份验证中，输入用户名和密码，用户名的获取方法是：</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">who</span><br></pre></td></tr></tbody></table></figure><p><img src="https://img-blog.csdnimg.cn/20200731180949407.png" alt="在这里插入图片描述"><br>我这里，就是：<code>excalibur</code>，密码就是<code>sudo</code>的密码。<br><img src="https://img-blog.csdnimg.cn/20200731180838106.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0V4Y2FsaWJ1clVsaW1pdGVk,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>设置完成后，直接连接即可。<h1 id="five-大功告成"><a href="#five-大功告成" class="headerlink" title=":five: 大功告成"></a><span class="github-emoji" style="display:inline;vertical-align:middle;color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/0035-20e3.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/0035-20e3.png?v8">5⃣</span> 大功告成</h1><img src="https://img-blog.csdnimg.cn/20200731181130563.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0V4Y2FsaWJ1clVsaW1pdGVk,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>右键连接，用<code>Xftp</code>打开，可以通过<code>Xftp</code>进行文件传输：<br><img src="https://img-blog.csdnimg.cn/202007311813318.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0V4Y2FsaWJ1clVsaW1pdGVk,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>直接把左面的主机的文件往虚拟机里面拖就行了。</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;IPFS三部曲，之一。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Ubuntu" scheme="https://kemo.xyz/categories/Ubuntu/"/>
    
    
      <category term="Ubuntu" scheme="https://kemo.xyz/tags/Ubuntu/"/>
    
      <category term="Linux" scheme="https://kemo.xyz/tags/Linux/"/>
    
      <category term="Xshell" scheme="https://kemo.xyz/tags/Xshell/"/>
    
      <category term="Xftp" scheme="https://kemo.xyz/tags/Xftp/"/>
    
      <category term="虚拟机" scheme="https://kemo.xyz/tags/%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
      <category term="SSH" scheme="https://kemo.xyz/tags/SSH/"/>
    
  </entry>
  
  <entry>
    <title>地铁大小交路优化模型的遗传算法求解</title>
    <link href="https://kemo.xyz/%E5%9C%B0%E9%93%81%E5%A4%A7%E5%B0%8F%E4%BA%A4%E8%B7%AF%E4%BC%98%E5%8C%96%E6%A8%A1%E5%9E%8B%E7%9A%84%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95%E6%B1%82%E8%A7%A3.html"/>
    <id>https://kemo.xyz/地铁大小交路优化模型的遗传算法求解.html</id>
    <published>2020-05-12T19:02:10.000Z</published>
    <updated>2020-09-08T02:37:00.844Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>学妹的请求，小试牛刀，一种尝试。<br><a id="more"></a></p><h1 id="1️⃣-问题陈述"><a href="#1️⃣-问题陈述" class="headerlink" title="1️⃣ 问题陈述"></a>1️⃣ 问题陈述</h1><h2 id="1️⃣-1️⃣-需要解决的问题"><a href="#1️⃣-1️⃣-需要解决的问题" class="headerlink" title="1️⃣.1️⃣ 需要解决的问题"></a>1️⃣.1️⃣ 需要解决的问题</h2><p>  目前地铁一般采用如下的<strong>单一交路</strong>：<br><img src="https://img-blog.csdnimg.cn/2020051300111441.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0V4Y2FsaWJ1clVsaW1pdGVk,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述">目前，我国绝大多数城市都采用这种交路形式，但是当断面客流量分布不均匀时容易造成线路运能浪费，客流拥挤。</p><p>替代方案就是用<strong>大小交路</strong>：<br><img src="https://img-blog.csdnimg.cn/20200513001301994.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0V4Y2FsaWJ1clVsaW1pdGVk,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200513001308221.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0V4Y2FsaWJ1clVsaW1pdGVk,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>使用遗传算法程序就是在既定的OD矩阵下找到最优的大小交路的往返站$S_a,S_b$以及相应的大小交路的发车频率$f_1,f_2$，也就是在遗传算法每次运行中，根据不同的大小交路折返站的设置，划分预定的OD出行矩阵，然后计算目标函数，判断是否达到最优。</p><h2 id="1️⃣-2️⃣-变量定义"><a href="#1️⃣-2️⃣-变量定义" class="headerlink" title="1️⃣.2️⃣ 变量定义"></a>1️⃣.2️⃣ 变量定义</h2><ul><li>$Q_1$——出行$O$点或$D$点位于小交路覆盖区段外出行以及$OD$均位于小交路覆盖区段外的客流量，人；</li><li>$Q_2$——出行$OD$位于小交路覆盖区段的客流量，人；</li><li>$t_{1d}、t_{2d}$——$Q_1、Q_2$对应乘客的平均候车时间，$s$;</li><li>$q_{od}$——在车站$o$上车，在车站$d$下车的客流量，人；</li><li>$i$——列车交路的集合，$i=\{1,2\}$，$1$代表大交路，$2$代表小交路；</li><li>$f_i$——大小交路运行方式下的交路i的发车频率，对/小时；</li><li>$f$——单一交路运行方式下的发车频率，对/小时；</li><li>$f_{min}$——最小发车频率，设置为$12$对/小时；</li><li>$T_{1周}、T_{2周}$——大小交路列车周转时间，$s$;</li><li>$t_{运,j}$——列车在区间$j$的纯运行时间，$s$；</li><li>$t_{停,j}$——列车在车站$h$的停站时间，$s$，设置为$30s$；</li><li>$t_{折}$——列车在终点站、中间站的最小折返间隔时间，$s$，设置为$120s$;</li><li>$C_z$——列车定员，即标准载客人数，人，设置为$1460$；</li><li>$\alpha$——列车满载率上限，设置为100%；</li><li>$I_o$——列车最小追踪间隔，$s$，设置为$120s$;<h2 id="1️⃣-3️⃣-目标函数"><a href="#1️⃣-3️⃣-目标函数" class="headerlink" title="1️⃣.3️⃣ 目标函数"></a>1️⃣.3️⃣ 目标函数</h2><script type="math/tex; mode=display">\min _{Z}=Q_{1} \cdot t_{1 d}+Q_{2} \cdot t_{2 d}</script>其中<script type="math/tex; mode=display">Q_{1}=\sum_{d=1}^{n} \sum_{o=1}^{n} q_{o d}-Q_{2}\\Q_{2=} \sum_{d=o+1}^{b} \sum_{o=a}^{b-1} q_{o, d}+\sum_{d=a}^{o-1} \sum_{o=a+1}^{b} q_{o, d}</script><script type="math/tex; mode=display">t_{2 d}=\frac{1}{2} \cdot \frac{60}{f_{1}+f_{2}}\\ \\t_{1 d}=\frac{1}{2} \cdot \frac{60}{f}</script></li></ul><h2 id="1️⃣-4️⃣-约束条件"><a href="#1️⃣-4️⃣-约束条件" class="headerlink" title="1️⃣.4️⃣ 约束条件"></a>1️⃣.4️⃣ 约束条件</h2><ul><li><p>列车数量</p><script type="math/tex; mode=display">\left[\frac{T_{\text {周1}}}{60} \cdot f_{1}\right]+\left[\frac{T_{\text {周} 2}}{60} \cdot f_{2}\right] \leq\left[\frac{T_{\text {周} 1}}{60} \cdot f\right]</script><p>其中</p><script type="math/tex; mode=display">T_{\text {周} 1}=2 \cdot\left(\sum_{j=1}^{n-1} t_{\text {运}},_{j}+\sum_{h=1}^{n} t_{\text {停, } h}+\sum t_{\text {折}}\right)\\T_{\text {周} 2}=2 \cdot\left(\sum_{j=a}^{b-1} t_{\text {运}},_{j}+\sum_{h=a}^{b} t_{\text {停, } h}+\sum t^{'}_{\text {折}}\right)</script></li><li><p>满载率约束</p><script type="math/tex; mode=display">\max _{j}\left(\sum_{d=j+1}^{n} \sum_{o=1}^{j} q_{o d} / \sum_{i=1}^{2} f_{i} \cdot \sum_{d=1}^{j} \sum_{o=j+1}^{n} q_{o d} / \sum_{i=1}^{2} f_{i}\right) \leq \alpha \cdot C_z</script></li><li><p>满足最小追踪间隔</p><script type="math/tex; mode=display">f_{1}+f_{2} \leq \frac{3600}{I_{0}}</script></li><li><p>折返站折返能力</p><script type="math/tex; mode=display">f_1\le\frac{3600}{t_{折}}\\f_2\le\frac{3600}{t_折}</script></li><li><p>满足最小发车频率</p><script type="math/tex; mode=display">f_1>=f_{min}</script></li><li><p>其他约束</p><script type="math/tex; mode=display">f_i\in N\\ 1\le a<b\le n</script></li></ul><h1 id="2️⃣-MATLAB程序"><a href="#2️⃣-MATLAB程序" class="headerlink" title="2️⃣ MATLAB程序"></a>2️⃣ <code>MATLAB</code>程序</h1><p>所有的程序以及数据，OD出行矩阵以及区间运行时间在：<a href="https://github.com/ExcaliburEX/Graduation-Design-and-MATLAB-Code-/tree/master/%E5%88%97%E8%BD%A6%E4%BA%A4%E8%B7%AF%E6%96%B9%E6%A1%88%E4%BC%98%E5%8C%96%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95%E7%A8%8B%E5%BA%8F" target="_blank" rel="noopener">列车交路方案优化遗传算法程序</a></p><h2 id="2️⃣-1️⃣-myself-m——主脚本"><a href="#2️⃣-1️⃣-myself-m——主脚本" class="headerlink" title="2️⃣.1️⃣ myself.m——主脚本"></a>2️⃣.1️⃣ <code>myself.m</code>——主脚本</h2><p>主脚本，<code>OD</code>矩阵可以使用<code>od.m</code>脚本随机生成。<br></p><figure class="highlight matlab"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">clear;clc;close all;</span><br><span class="line"></span><br><span class="line"><span class="comment">%% 生成随机OD矩阵</span></span><br><span class="line"><span class="comment">%od()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%%遗传参数设置</span></span><br><span class="line">NUMPOP=<span class="number">200</span>;<span class="comment">%初始种群大小</span></span><br><span class="line">irange_l=<span class="number">1</span>; <span class="comment">%问题解区间</span></span><br><span class="line">irange_r=<span class="number">35</span>; </span><br><span class="line">LENGTH=<span class="number">24</span>; <span class="comment">%二进制编码长度</span></span><br><span class="line">ITERATION = <span class="number">10000</span>;<span class="comment">%迭代次数</span></span><br><span class="line">CROSSOVERRATE = <span class="number">0.8</span>;<span class="comment">%杂交率</span></span><br><span class="line">SELECTRATE = <span class="number">0.4</span>;<span class="comment">%选择率</span></span><br><span class="line">VARIATIONRATE = <span class="number">0.2</span>;<span class="comment">%变异率</span></span><br><span class="line">OD = xlsread(<span class="string">'OD.xlsx'</span>);<span class="comment">% 苏州地铁2号线调查问卷OD出行矩阵</span></span><br><span class="line">h = xlsread(<span class="string">'区间运行时间.xlsx'</span>); <span class="comment">% 苏州地铁2号线区间长度及运行时分</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%初始化种群</span></span><br><span class="line">pop=m_InitPop(NUMPOP,irange_l,irange_r);</span><br><span class="line">pop_save=pop;</span><br><span class="line">fitness_concat = [];</span><br><span class="line">best_solution = [];</span><br><span class="line"><span class="comment">%开始迭代</span></span><br><span class="line"><span class="keyword">for</span> time=<span class="number">1</span>:ITERATION</span><br><span class="line">    <span class="comment">%计算初始种群的适应度</span></span><br><span class="line">    fitness=m_Fitness(pop, OD, h);</span><br><span class="line">    fitness_concat = [fitness_concat;<span class="built_in">max</span>(fitness)];</span><br><span class="line">    pop_T = pop';</span><br><span class="line">    [m,index] = <span class="built_in">max</span>(m_Fitness(pop, OD, h));</span><br><span class="line">   best_solution = [best_solution;pop(:,index)'];</span><br><span class="line">    <span class="comment">%选择</span></span><br><span class="line">    pop=m_Select(fitness,pop,SELECTRATE);</span><br><span class="line">    <span class="comment">%编码</span></span><br><span class="line">    binpop=m_Coding(pop,LENGTH,irange_l);</span><br><span class="line">    <span class="comment">%交叉</span></span><br><span class="line">    kidsPop = crossover(binpop,NUMPOP,CROSSOVERRATE);</span><br><span class="line">    <span class="comment">%变异</span></span><br><span class="line">    kidsPop = Variation(kidsPop,VARIATIONRATE);</span><br><span class="line">    <span class="comment">%解码</span></span><br><span class="line">    kidsPop=m_Incoding(kidsPop,irange_l);</span><br><span class="line">    <span class="comment">%更新种群</span></span><br><span class="line">    pop=[pop kidsPop];</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">disp</span>([<span class="string">'最优解：'</span> num2str(<span class="built_in">min</span>(m_Fx(pop,OD))) <span class="string">'分钟'</span>]);</span><br><span class="line"><span class="built_in">disp</span>([<span class="string">'最优解对应的各参数：'</span> num2str(pop(<span class="number">1</span>,<span class="number">1</span>)) <span class="string">','</span> num2str(pop(<span class="number">2</span>,<span class="number">1</span>)) <span class="string">','</span> num2str(pop(<span class="number">3</span>,<span class="number">1</span>)) <span class="string">','</span> num2str(pop(<span class="number">4</span>,<span class="number">1</span>)) ]);</span><br><span class="line"><span class="built_in">disp</span>([<span class="string">'最大适应度：'</span> num2str(<span class="built_in">max</span>(m_Fitness(pop, OD, h)))]);   </span><br><span class="line">    </span><br><span class="line"><span class="built_in">figure</span></span><br><span class="line"><span class="comment">% set(gca,'looseInset',[0 0 0 0]);</span></span><br><span class="line">set(gcf,<span class="string">'outerposition'</span>,get(<span class="number">0</span>,<span class="string">'screensize'</span>));</span><br><span class="line">loglog(<span class="number">1</span>:ITERATION, fitness_concat, <span class="string">'Blue*-'</span>,<span class="string">'linewidth'</span>,<span class="number">2</span>)</span><br><span class="line"><span class="built_in">legend</span>(<span class="string">'{\bf最优适应度值}'</span>);</span><br><span class="line">xlabel(<span class="string">'{\bf进化代数}'</span>,<span class="string">'fontsize'</span>,<span class="number">30</span>);</span><br><span class="line">ylabel(<span class="string">'{\bf最优适应度}'</span>,<span class="string">'fontsize'</span>,<span class="number">30</span>);</span><br><span class="line">set(gca,<span class="string">'FontSize'</span>,<span class="number">20</span>,<span class="string">'Fontname'</span>, <span class="string">'Times New Roman'</span>);</span><br><span class="line">set(get(gca,<span class="string">'XLabel'</span>),<span class="string">'Fontsize'</span>,<span class="number">20</span>,<span class="string">'Fontname'</span>, <span class="string">'宋体'</span>);</span><br><span class="line">set(get(gca,<span class="string">'YLabel'</span>),<span class="string">'Fontsize'</span>,<span class="number">20</span>,<span class="string">'Fontname'</span>, <span class="string">'宋体'</span>);</span><br><span class="line">set(get(gca,<span class="string">'legend'</span>),<span class="string">'Fontsize'</span>,<span class="number">20</span>,<span class="string">'Fontname'</span>, <span class="string">'宋体'</span>);</span><br><span class="line">set(get(gca,<span class="string">'title'</span>),<span class="string">'Fontsize'</span>,<span class="number">20</span>,<span class="string">'Fontname'</span>, <span class="string">'宋体'</span>);</span><br><span class="line">set(gca,<span class="string">'linewidth'</span>,<span class="number">2</span>); </span><br><span class="line">print(gcf,<span class="string">'-dpng'</span>,<span class="string">'-r300'</span>,<span class="string">'最优适应度值-进化代数'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">figure</span></span><br><span class="line"><span class="comment">% set(gca,'looseInset',[0 0 0 0]);</span></span><br><span class="line">set(gcf,<span class="string">'outerposition'</span>,get(<span class="number">0</span>,<span class="string">'screensize'</span>));</span><br><span class="line">semilogx(<span class="number">1</span> : ITERATION, best_solution,<span class="string">'linewidth'</span>,<span class="number">4</span>)</span><br><span class="line"><span class="built_in">legend</span>(<span class="string">'{\bf大小交路折返站a}'</span>,<span class="string">'{\bf大小交路折返站b}'</span>,<span class="string">'{\bf大交路发车频率f_1}'</span>,<span class="string">'{\bf小交路发车频率f_2}'</span>);</span><br><span class="line"><span class="comment">% text(6, 0.3, '$\leftarrow  y= 2^{-x}$', 'HorizontalAlignment', 'left', 'Interpreter', 'latex', 'FontSize', 15);</span></span><br><span class="line">xlabel(<span class="string">'{\bf进化代数}'</span>,<span class="string">'fontsize'</span>,<span class="number">15</span>);</span><br><span class="line">ylabel(<span class="string">'{\bf参数各代最优值}'</span>,<span class="string">'fontsize'</span>,<span class="number">15</span>);</span><br><span class="line">set(gca,<span class="string">'FontSize'</span>,<span class="number">20</span>,<span class="string">'Fontname'</span>, <span class="string">'Times New Roman'</span>);</span><br><span class="line">set(get(gca,<span class="string">'XLabel'</span>),<span class="string">'Fontsize'</span>,<span class="number">20</span>,<span class="string">'Fontname'</span>, <span class="string">'宋体'</span>);</span><br><span class="line">set(get(gca,<span class="string">'YLabel'</span>),<span class="string">'Fontsize'</span>,<span class="number">20</span>,<span class="string">'Fontname'</span>, <span class="string">'宋体'</span>);</span><br><span class="line">set(get(gca,<span class="string">'legend'</span>),<span class="string">'Fontsize'</span>,<span class="number">20</span>,<span class="string">'Fontname'</span>, <span class="string">'宋体'</span>);</span><br><span class="line">set(get(gca,<span class="string">'title'</span>),<span class="string">'Fontsize'</span>,<span class="number">20</span>,<span class="string">'Fontname'</span>, <span class="string">'宋体'</span>);</span><br><span class="line">set(gca,<span class="string">'linewidth'</span>,<span class="number">2</span>); </span><br><span class="line">print(gcf,<span class="string">'-dpng'</span>,<span class="string">'-r300'</span>,<span class="string">'参数各代最优值-进化代数'</span>);</span><br></pre></td></tr></tbody></table></figure><p></p><h2 id="2️⃣-2️⃣-od-m——生成随机出行OD矩阵"><a href="#2️⃣-2️⃣-od-m——生成随机出行OD矩阵" class="headerlink" title="2️⃣.2️⃣ od.m——生成随机出行OD矩阵"></a>2️⃣.2️⃣ <code>od.m</code>——生成随机出行<code>OD</code>矩阵</h2><p>用来生成随机出行<code>OD</code>矩阵。</p><figure class="highlight matlab"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Mu = <span class="number">26</span>;</span><br><span class="line">sigma = <span class="number">10</span>;</span><br><span class="line">N = <span class="built_in">round</span>(normrnd(Mu, sigma, [<span class="number">35</span> <span class="number">35</span>]));</span><br><span class="line">N = N + <span class="built_in">abs</span>(<span class="built_in">min</span>(N));</span><br><span class="line">sum(sum(N))</span><br><span class="line"><span class="keyword">if</span> sum(sum(N)) > <span class="number">35000</span> ;</span><br><span class="line">    <span class="keyword">if</span> sum(sum(N)) < <span class="number">40000</span>;</span><br><span class="line">        xlswrite(<span class="string">'test.xlsx'</span>,N,<span class="string">'Sheet1'</span>)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></tbody></table></figure><h2 id="2️⃣-3️⃣-m-InitPop-m——初始化种群"><a href="#2️⃣-3️⃣-m-InitPop-m——初始化种群" class="headerlink" title="2️⃣.3️⃣ m_InitPop.m——初始化种群"></a>2️⃣.3️⃣ <code>m_InitPop.m</code>——初始化种群</h2><figure class="highlight matlab"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pop</span>=<span class="title">m_InitPop</span><span class="params">(numpop,irange_l,irange_r)</span></span></span><br><span class="line"><span class="comment">%% 初始化种群</span></span><br><span class="line"><span class="comment">%  输入：numpop--种群大小；</span></span><br><span class="line"><span class="comment">%       [irange_l,irange_r]--初始种群所在的区间</span></span><br><span class="line">pop=[];</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">j</span> = <span class="number">1</span>:numpop</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:<span class="number">4</span></span><br><span class="line">        <span class="comment">% 因为a,b,f1,f2要求整数，所以生成随机整数</span></span><br><span class="line">        pop(<span class="built_in">i</span>,<span class="built_in">j</span>)= <span class="built_in">round</span>(irange_l+(irange_r-irange_l)*<span class="built_in">rand</span>);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></tbody></table></figure><h2 id="2️⃣-4️⃣-m-Select-m——选择"><a href="#2️⃣-4️⃣-m-Select-m——选择" class="headerlink" title="2️⃣.4️⃣ m_Select.m——选择"></a>2️⃣.4️⃣ <code>m_Select.m</code>——选择</h2><figure class="highlight matlab"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parentPop</span>=<span class="title">m_Select</span><span class="params">(matrixFitness,pop,SELECTRATE)</span></span></span><br><span class="line"><span class="comment">%% 选择</span></span><br><span class="line"><span class="comment">% 输入：matrixFitness--适应度矩阵</span></span><br><span class="line"><span class="comment">%      pop--初始种群</span></span><br><span class="line"><span class="comment">%      SELECTRATE--选择率</span></span><br><span class="line"></span><br><span class="line">sumFitness=sum(matrixFitness(:));<span class="comment">%计算所有种群的适应度</span></span><br><span class="line"></span><br><span class="line">accP=cumsum(matrixFitness/sumFitness);<span class="comment">%累积概率</span></span><br><span class="line"><span class="comment">%轮盘赌选择算法</span></span><br><span class="line"><span class="keyword">for</span> n=<span class="number">1</span>:<span class="built_in">round</span>(SELECTRATE*<span class="built_in">size</span>(pop,<span class="number">2</span>))</span><br><span class="line">    matrix=<span class="built_in">find</span>(accP><span class="built_in">rand</span>); <span class="comment">%找到比随机数大的累积概率</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isempty</span>(matrix)</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    parentPop(:,n)=pop(:,matrix(<span class="number">1</span>));<span class="comment">%将首个比随机数大的累积概率的位置的个体遗传下去</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></tbody></table></figure><h2 id="2️⃣-5️⃣-Crossover-m——交叉"><a href="#2️⃣-5️⃣-Crossover-m——交叉" class="headerlink" title="2️⃣.5️⃣ Crossover.m——交叉"></a>2️⃣.5️⃣ <code>Crossover.m</code>——交叉</h2><figure class="highlight matlab"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">%% 子函数</span></span><br><span class="line"><span class="comment">%</span></span><br><span class="line"><span class="comment">%题  目：Crossover</span></span><br><span class="line"><span class="comment">%</span></span><br><span class="line"><span class="comment">%%</span></span><br><span class="line"><span class="comment">%输   入：</span></span><br><span class="line"><span class="comment">%           parentsPop       上一代种群</span></span><br><span class="line"><span class="comment">%           NUMPOP           种群大小</span></span><br><span class="line"><span class="comment">%           CROSSOVERRATE    交叉率</span></span><br><span class="line"><span class="comment">%输   出：</span></span><br><span class="line"><span class="comment">%           kidsPop          下一代种群</span></span><br><span class="line"><span class="comment">%</span></span><br><span class="line"><span class="comment">%% </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">kidsPop</span> = <span class="title">Crossover</span><span class="params">(parentsPop,NUMPOP,CROSSOVERRATE)</span></span></span><br><span class="line">kidsPop = {[]};n = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> <span class="built_in">size</span>(kidsPop,<span class="number">2</span>)<NUMPOP-<span class="built_in">size</span>(parentsPop,<span class="number">2</span>)</span><br><span class="line">    <span class="comment">%选择出交叉的父代和母代</span></span><br><span class="line">    father = parentsPop{<span class="number">1</span>,<span class="built_in">ceil</span>((<span class="built_in">size</span>(parentsPop,<span class="number">2</span>)<span class="number">-1</span>)*<span class="built_in">rand</span>)+<span class="number">1</span>};</span><br><span class="line">    mother = parentsPop{<span class="number">1</span>,<span class="built_in">ceil</span>((<span class="built_in">size</span>(parentsPop,<span class="number">2</span>)<span class="number">-1</span>)*<span class="built_in">rand</span>)+<span class="number">1</span>};</span><br><span class="line">    <span class="comment">%随机产生交叉位置</span></span><br><span class="line">    crossLocation = <span class="built_in">ceil</span>((<span class="built_in">length</span>(father)<span class="number">-1</span>)*<span class="built_in">rand</span>)+<span class="number">1</span>;</span><br><span class="line">    <span class="comment">%如果随即数比交叉率低，就杂交</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">rand</span><CROSSOVERRATE</span><br><span class="line">        father(<span class="number">1</span>,crossLocation:<span class="keyword">end</span>) = mother(<span class="number">1</span>,crossLocation:<span class="keyword">end</span>);</span><br><span class="line">        kidsPop{n} = father;</span><br><span class="line">        n = n+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></tbody></table></figure><h2 id="2️⃣-6️⃣-Variation-m——变异"><a href="#2️⃣-6️⃣-Variation-m——变异" class="headerlink" title="2️⃣.6️⃣ Variation.m——变异"></a>2️⃣.6️⃣ <code>Variation.m</code>——变异</h2><figure class="highlight matlab"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">%% 子函数</span></span><br><span class="line"><span class="comment">%</span></span><br><span class="line"><span class="comment">%题  目：Variation</span></span><br><span class="line"><span class="comment">%</span></span><br><span class="line"><span class="comment">%</span></span><br><span class="line"><span class="comment">%输   入：</span></span><br><span class="line"><span class="comment">%           pop              种群</span></span><br><span class="line"><span class="comment">%           VARIATIONRATE    变异率</span></span><br><span class="line"><span class="comment">%输   出：</span></span><br><span class="line"><span class="comment">%           pop              变异后的种群</span></span><br><span class="line"><span class="comment">%% </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">kidsPop</span> = <span class="title">Variation</span><span class="params">(kidsPop,VARIATIONRATE)</span></span></span><br><span class="line"><span class="keyword">for</span> n=<span class="number">1</span>:<span class="built_in">size</span>(kidsPop,<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">rand</span><VARIATIONRATE</span><br><span class="line">        temp = kidsPop{n};</span><br><span class="line">        <span class="comment">%找到变异位置</span></span><br><span class="line">        location = <span class="built_in">ceil</span>(<span class="built_in">length</span>(temp)*<span class="built_in">rand</span>);</span><br><span class="line">        temp = [temp(<span class="number">1</span>:location<span class="number">-1</span>) num2str(~temp(location))...</span><br><span class="line">            temp(location+<span class="number">1</span>:<span class="keyword">end</span>)];</span><br><span class="line">       kidsPop{n} = temp;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></tbody></table></figure><h2 id="2️⃣-7️⃣-m-Coding-m——编码"><a href="#2️⃣-7️⃣-m-Coding-m——编码" class="headerlink" title="2️⃣.7️⃣ m_Coding.m——编码"></a>2️⃣.7️⃣ <code>m_Coding.m</code>——编码</h2><p>因为总共$35$座车站，$a,b,f_1,f_2$都不超过$35<2^6$，所以$4$个参数都设置为$6$位二进制，这样编码总长度为$24$。</p><figure class="highlight matlab"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">binPop</span>=<span class="title">m_Coding</span><span class="params">(pop,pop_length,irange_l)</span></span></span><br><span class="line"><span class="comment">%% 二进制编码（生成染色体）</span></span><br><span class="line"><span class="comment">% 输入：pop--种群</span></span><br><span class="line"><span class="comment">%      pop_length--编码长度</span></span><br><span class="line"><span class="keyword">for</span> n=<span class="number">1</span>:<span class="built_in">size</span>(pop,<span class="number">2</span>) <span class="comment">%列循环</span></span><br><span class="line">    binPop{n} = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">for</span> k=<span class="number">1</span>:<span class="built_in">size</span>(pop,<span class="number">1</span>) <span class="comment">%行循环</span></span><br><span class="line">        substr = dec2bin(pop(k,n));</span><br><span class="line">        lengthpop = <span class="built_in">length</span>(substr);</span><br><span class="line">        <span class="keyword">for</span> s = <span class="number">1</span>:<span class="number">6</span>-lengthpop</span><br><span class="line">            substr = [<span class="string">'0'</span> substr];</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        binPop{n} = [binPop{n} substr];</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></tbody></table></figure><h2 id="2️⃣-8️⃣-m-Incoding-m——解码"><a href="#2️⃣-8️⃣-m-Incoding-m——解码" class="headerlink" title="2️⃣.8️⃣ m_Incoding.m——解码"></a>2️⃣.8️⃣ <code>m_Incoding.m</code>——解码</h2><p>解码时编码长度为$24$，每隔$6$位转化成十进制。</p><figure class="highlight matlab"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pop</span>=<span class="title">m_Incoding</span><span class="params">(binPop,irange_l)</span></span></span><br><span class="line"><span class="comment">%% 解码</span></span><br><span class="line">popNum=<span class="number">1</span>;</span><br><span class="line">popNum = <span class="number">4</span>;<span class="comment">%染色体包含的参数数量</span></span><br><span class="line"><span class="keyword">for</span> n=<span class="number">1</span>:<span class="built_in">size</span>(binPop,<span class="number">2</span>)</span><br><span class="line">    <span class="comment">% 因为有35个车站，35<2^6 ，所以编码为6位</span></span><br><span class="line">    pop(<span class="number">1</span>,n) = bin2dec(binPop{<span class="number">1</span>,n}(<span class="number">1</span>:<span class="number">6</span>)); </span><br><span class="line">    pop(<span class="number">2</span>,n) = bin2dec(binPop{<span class="number">1</span>,n}(<span class="number">7</span>:<span class="number">12</span>));</span><br><span class="line">    pop(<span class="number">3</span>,n) = bin2dec(binPop{<span class="number">1</span>,n}(<span class="number">13</span>:<span class="number">18</span>));</span><br><span class="line">    pop(<span class="number">4</span>,n) = bin2dec(binPop{<span class="number">1</span>,n}(<span class="number">19</span>:<span class="number">24</span>));</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">% pop = pop./10^6+irange_l;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="2️⃣-9️⃣-m-Fitness-m——适应度函数-重要，实现约束条件"><a href="#2️⃣-9️⃣-m-Fitness-m——适应度函数-重要，实现约束条件" class="headerlink" title="2️⃣.9️⃣ m_Fitness.m——适应度函数(重要，实现约束条件)"></a>2️⃣.9️⃣ <code>m_Fitness.m</code>——适应度函数(重要，实现约束条件)</h2><p>在这里实现约束条件，思路就是不满足约束条件的种群的适应度设置为无穷小，那么在下一代的迭代中就会将适应度低的种群淘汰掉，实现约束的目的。</p><figure class="highlight matlab"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fitness</span>=<span class="title">m_Fitness</span><span class="params">(pop, OD, h)</span></span></span><br><span class="line"><span class="comment">%% Fitness Function</span></span><br><span class="line"><span class="keyword">for</span> n=<span class="number">1</span>:<span class="built_in">size</span>(pop,<span class="number">2</span>)</span><br><span class="line">    a = pop(<span class="number">1</span>,n);</span><br><span class="line">    b = pop(<span class="number">2</span>,n);</span><br><span class="line">    f1 = pop(<span class="number">3</span>,n);</span><br><span class="line">    f2 = pop(<span class="number">4</span>,n);</span><br><span class="line"><span class="comment">%% 约束条件，不满足约束则适应度值无穷小    </span></span><br><span class="line"> <span class="comment">%% 1) a,b,f1,f2 不能为0</span></span><br><span class="line">    <span class="keyword">if</span> a == <span class="number">0</span> || b == <span class="number">0</span> || f1 == <span class="number">0</span> || f2 == <span class="number">0</span></span><br><span class="line">        fitness(n) = <span class="number">1</span>/<span class="number">1000000000</span>;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"> <span class="comment">%% 2) a,b,f1,f2 不能超过35</span></span><br><span class="line">    <span class="keyword">if</span> a > <span class="number">35</span> || b > <span class="number">35</span> || f1 ><span class="number">35</span> || f2 ><span class="number">35</span> </span><br><span class="line">         fitness(n) = <span class="number">1</span>/<span class="number">1000000000</span>;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="comment">%% 3) 列车数量约束</span></span><br><span class="line">     <span class="keyword">if</span> (sum(h) * <span class="number">120</span> + <span class="number">1170</span>) *( f1 - <span class="number">16</span>) + (sum(h(a: b<span class="number">-1</span>)) + (b - a + <span class="number">1</span>) * <span class="number">30</span> + <span class="number">120</span>) * f2 > <span class="number">0</span></span><br><span class="line">        fitness(n) = <span class="number">1</span>/<span class="number">1000000000</span>;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">     <span class="keyword">end</span></span><br><span class="line"><span class="comment">%% 4) 满载率约束   </span></span><br><span class="line"><span class="comment">%     constraint2 = [];</span></span><br><span class="line"><span class="comment">%     for j = 2:33</span></span><br><span class="line"><span class="comment">%         constraint2(j) = (sum(sum(OD(1:j, j+1:35)))/(f1+f2)) * (sum(sum(OD(j+1:35,1:j)))/(f1+f2));</span></span><br><span class="line"><span class="comment">%     end</span></span><br><span class="line"><span class="comment">%     if max(constraint2) > 1 * 1460</span></span><br><span class="line"><span class="comment">%         fitness(n) = 1/1000000000;</span></span><br><span class="line"><span class="comment">%         continue;</span></span><br><span class="line"><span class="comment">%     end</span></span><br><span class="line"><span class="comment">%% 5) 最小追踪间隔     </span></span><br><span class="line">    <span class="keyword">if</span> f1 + f2 > <span class="number">30</span></span><br><span class="line">        fitness(n) = <span class="number">1</span>/<span class="number">1000000000</span>;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    <span class="keyword">end</span> </span><br><span class="line"><span class="comment">%% 5) 最小发车间隔   </span></span><br><span class="line">    <span class="keyword">if</span> f1 < <span class="number">12</span></span><br><span class="line">          fitness(n) = <span class="number">1</span>/<span class="number">1000000000</span>;</span><br><span class="line">           <span class="keyword">continue</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="comment">%% 主要适应度函数，设置为目标函数的倒数，即目标函数要求最小，那么越小，适应度就越大    </span></span><br><span class="line">    fitness(n)= <span class="number">1</span>/m_Fx(pop(:,n), OD);</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></tbody></table></figure><h2 id="2️⃣-🔟-m-Fx-m——目标函数-重要"><a href="#2️⃣-🔟-m-Fx-m——目标函数-重要" class="headerlink" title="2️⃣.🔟 m_Fx.m——目标函数(重要)"></a>2️⃣.🔟 <code>m_Fx.m</code>——目标函数(重要)</h2><figure class="highlight matlab"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">y</span>=<span class="title">m_Fx</span><span class="params">(x, OD)</span></span></span><br><span class="line"><span class="comment">%% 要求解的函数</span></span><br><span class="line"><span class="comment">%% Z = Q1 * t1d + Q2 * t2d</span></span><br><span class="line">    y = (sum(sum(OD)) - sum(sum(OD(x(<span class="number">1</span>):x(<span class="number">2</span>),x(<span class="number">1</span>):x(<span class="number">2</span>))))) * (<span class="number">30</span>/x(<span class="number">3</span>)) + sum(sum(OD(x(<span class="number">1</span>):x(<span class="number">2</span>),x(<span class="number">1</span>):x(<span class="number">2</span>)))) * (<span class="number">30</span>/(x(<span class="number">3</span>)+x(<span class="number">4</span>)));</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></tbody></table></figure><h1 id="3️⃣-运行结果"><a href="#3️⃣-运行结果" class="headerlink" title="3️⃣ 运行结果"></a>3️⃣ 运行结果</h1><figure class="highlight matlab"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">最优解：<span class="number">71335.4762</span>分钟</span><br><span class="line">最优解对应的各参数：<span class="number">4</span>,<span class="number">32</span>,<span class="number">14</span>,<span class="number">4</span></span><br><span class="line">最大适应度：<span class="number">1.4018e-05</span></span><br></pre></td></tr></tbody></table></figure><p>即设置第$4$和第$32$个站点为大小交路折返站，大交路发车频率为$14$列/小时，小交路发车频率为$4$列/小时，最低平均等待时间为$71335$分钟。</p><p>图像结果：<br><img src="https://img-blog.csdnimg.cn/20200513011016570.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0V4Y2FsaWJ1clVsaW1pdGVk,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200513011005955.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0V4Y2FsaWJ1clVsaW1pdGVk,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学妹的请求，小试牛刀，一种尝试。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="https://kemo.xyz/categories/Algorithm/"/>
    
    
      <category term="MATLAB" scheme="https://kemo.xyz/tags/MATLAB/"/>
    
      <category term="遗传算法" scheme="https://kemo.xyz/tags/%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95/"/>
    
      <category term="数学建模" scheme="https://kemo.xyz/tags/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/"/>
    
      <category term="地铁线路优化" scheme="https://kemo.xyz/tags/%E5%9C%B0%E9%93%81%E7%BA%BF%E8%B7%AF%E4%BC%98%E5%8C%96/"/>
    
      <category term="目标函数" scheme="https://kemo.xyz/tags/%E7%9B%AE%E6%A0%87%E5%87%BD%E6%95%B0/"/>
    
      <category term="约束条件" scheme="https://kemo.xyz/tags/%E7%BA%A6%E6%9D%9F%E6%9D%A1%E4%BB%B6/"/>
    
      <category term="二进制" scheme="https://kemo.xyz/tags/%E4%BA%8C%E8%BF%9B%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>简单地打造一个搜索工具--爬取所有网页并创造单词的反向索引</title>
    <link href="https://kemo.xyz/%E7%AE%80%E5%8D%95%E5%9C%B0%E6%89%93%E9%80%A0%E4%B8%80%E4%B8%AA%E6%90%9C%E7%B4%A2%E5%B7%A5%E5%85%B7-%E7%88%AC%E5%8F%96%E6%89%80%E6%9C%89%E7%BD%91%E9%A1%B5%E5%B9%B6%E5%88%9B%E9%80%A0%E5%8D%95%E8%AF%8D%E7%9A%84%E5%8F%8D%E5%90%91%E7%B4%A2%E5%BC%95.html"/>
    <id>https://kemo.xyz/简单地打造一个搜索工具-爬取所有网页并创造单词的反向索引.html</id>
    <published>2020-05-12T18:58:45.000Z</published>
    <updated>2020-05-12T19:26:48.398Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>接单，简单的爬虫。<br><a id="more"></a></p><h1 id="1️⃣-任务要求"><a href="#1️⃣-任务要求" class="headerlink" title="1️⃣ 任务要求"></a>1️⃣ 任务要求</h1><ul><li>爬取既定网站的所有网页，本次爬取的是<a href="http://example.webscraping.com/" target="_blank" rel="noopener">http://example.webscraping.com/</a>，该网站包含所有国家的相关信息；</li><li>为每次单词创造包含出现位置以及词频的反向索引；</li><li>为用户提供$print$，$find$等命令。</li></ul><h1 id="2️⃣-命令功能"><a href="#2️⃣-命令功能" class="headerlink" title="2️⃣ 命令功能"></a>2️⃣ 命令功能</h1><ul><li>$build$<ul><li>此命令指示搜索工具对网站进行爬取、生成反向索引并保存结果。索引存到文件系统中。为了简单起见，将整个索引保存在一个文件中。 </li></ul></li><li>$load$<ul><li>此命令从文件系统加载索引。显然，这个命令只有在，索引以前是使用$build$命令创建的。</li></ul></li><li>$print$<ul><li>此命令打印一个单词的反向索引信息，例如：</li><li>$print\quad Peso$</li></ul></li><li>$find$<ul><li>此命令用于在反向索引中查找某个查询短语，并返回所有查询短语的列表，包含此短语的页面，例如：</li><li>$find \quad Dinar$，返回所有包含<code>Dinar</code>的页面；</li><li>$find \quad Area \quad Afghanistan$，返回所有同时包含这两个单词的网页列表。<h1 id="3️⃣-具体程序"><a href="#3️⃣-具体程序" class="headerlink" title="3️⃣ 具体程序"></a>3️⃣ 具体程序</h1></li></ul></li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">from</span> alive_progress <span class="keyword">import</span> alive_bar</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url_index_prefix = <span class="string">"http://example.webscraping.com/places/default/index/"</span></span><br><span class="line">url_info_prefix = <span class="string">"http://example.webscraping.com"</span></span><br><span class="line">inverted_index_dict = {}</span><br><span class="line">length = <span class="number">252</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">header = {</span><br><span class="line">    <span class="string">'Accept'</span>: <span class="string">"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9"</span>, </span><br><span class="line">    <span class="string">'Accept-Encoding'</span>: <span class="string">"gzip, deflate"</span>, </span><br><span class="line">    <span class="string">'Accept-Language'</span>: <span class="string">"zh-CN,zh;q=0.9,en;q=0.8"</span>, </span><br><span class="line">    <span class="string">'Cache-Control'</span>: <span class="string">"max-age=0"</span>, </span><br><span class="line">    <span class="string">'Cookie'</span>: <span class="string">"session_id_places=True; session_data_places=\"586ad5c755d830e432c6e80f8b9a822a:xLrqTGkuTTFaRdOtQTpde-UcgSMy7nwOrXyEeyRafNjWT8t7J\</span></span><br><span class="line"><span class="string">    bHjZGf1cYO6bcnIVhwOHVNpJiMnr32rtSCF2_RSOUfBX4gRmU09KTNfMczD2vc4aaloPAvNE6gLStboj-EBBnFkWhVP3uCd8woSyXnTQwYi39HKoujz4iX1tJA5O4dr7z3VCn22mvev_\</span></span><br><span class="line"><span class="string">    MZaNSW4TT1jTJUZoF_3hyqtoN8rTL_Mjpu02ACJscaG6lRfQmIOBZ-BloR7aT4s-it19e0JYkbpynKb-an8f72IRhiN-thhyXeYbo6SCX0LzAra6Il1zM4Zpw9GkQFU2yha"</span>, </span><br><span class="line">    <span class="string">'Host'</span>: <span class="string">"example.webscraping.com"</span>, </span><br><span class="line">    <span class="string">'Proxy-Connection'</span>: <span class="string">"keep-alive"</span>, </span><br><span class="line">    <span class="string">'Referer'</span>: <span class="string">"http://example.webscraping.com/places/default/index/1"</span>, </span><br><span class="line">    <span class="string">'Upgrade-Insecure-Requests'</span>: <span class="string">"1"</span>, </span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36"</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">SplitList2Words</span><span class="params">(WordList)</span>:</span></span><br><span class="line">    words = []</span><br><span class="line">    <span class="keyword">for</span> phrase <span class="keyword">in</span> WordList:</span><br><span class="line">        phrase = str(phrase)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">" "</span> <span class="keyword">in</span> phrase:</span><br><span class="line">            <span class="keyword">for</span> word <span class="keyword">in</span> phrase.split(<span class="string">" "</span>):</span><br><span class="line">                <span class="keyword">if</span> word != <span class="string">'>'</span>:  <span class="comment"># del '>' from words</span></span><br><span class="line">                    words.append(word)</span><br><span class="line">        <span class="keyword">elif</span> <span class="string">"."</span> <span class="keyword">in</span> phrase:</span><br><span class="line">            words.append(phrase.split(<span class="string">"."</span>)[<span class="number">1</span>])  <span class="comment"># del '.' from words</span></span><br><span class="line">        <span class="keyword">elif</span> <span class="string">","</span> <span class="keyword">in</span> phrase:</span><br><span class="line">            <span class="keyword">for</span> word <span class="keyword">in</span> phrase.split(<span class="string">","</span>):  <span class="comment"># del ',' from words</span></span><br><span class="line">                words.append(word)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            words.append(phrase)</span><br><span class="line">    <span class="keyword">return</span> words</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">GenerateInvertedIndex</span><span class="params">(words, inverted_index_dict, url)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> w <span class="keyword">in</span> words:</span><br><span class="line">        <span class="keyword">if</span> w <span class="keyword">in</span> inverted_index_dict.keys():</span><br><span class="line">            <span class="keyword">if</span> url <span class="keyword">in</span> inverted_index_dict[w].keys(): </span><br><span class="line">                <span class="comment"># add to the number of occurences</span></span><br><span class="line">                inverted_index_dict[w][url] += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># add this page link to the word dict value</span></span><br><span class="line">                inverted_index_dict[w][url] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># did not encounter this word before</span></span><br><span class="line">            inverted_index_dict[w] = {url: <span class="number">1</span>}</span><br><span class="line">    js = json.dumps(inverted_index_dict)</span><br><span class="line">    file = open(<span class="string">'InvertedIndex.txt'</span>, <span class="string">'w'</span>)</span><br><span class="line">    file.write(js)</span><br><span class="line">    file.close()</span><br><span class="line">    <span class="keyword">return</span> inverted_index_dict</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build</span><span class="params">()</span>:</span></span><br><span class="line">    inverted_index_dict = {}</span><br><span class="line">    <span class="keyword">with</span> alive_bar(length) <span class="keyword">as</span> bar:</span><br><span class="line">        <span class="keyword">for</span> page <span class="keyword">in</span> range(<span class="number">26</span>):</span><br><span class="line">            header[<span class="string">'Referer'</span>] = url_index_prefix</span><br><span class="line">            <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    <span class="comment"># Set timeout to 10 seconds</span></span><br><span class="line">                    r = requests.get(url_index_prefix + str(page), headers=header, timeout=<span class="number">10</span>)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">except</span>:</span><br><span class="line">                    print(<span class="string">"TimeOut Error, reconnecting..."</span>)</span><br><span class="line">                    time.sleep(<span class="number">2</span>)</span><br><span class="line">            soup_main = BeautifulSoup(r.text, <span class="string">'lxml'</span>)</span><br><span class="line">            main_word_list = [str(w.text).strip() <span class="keyword">for</span> w <span class="keyword">in</span> soup_main.find_all(<span class="string">'a'</span>)]</span><br><span class="line">            main_word_list.append(str(soup_main.h1.text).strip())</span><br><span class="line">            words = SplitList2Words(main_word_list)</span><br><span class="line">            inverted_index_dict = GenerateInvertedIndex(</span><br><span class="line">                words, inverted_index_dict, url_index_prefix + str(page))</span><br><span class="line"></span><br><span class="line">            url_suffix = re.findall(<span class="string">r'/places/default/view/[A-Za-z]+\S+[A-Za-z]+[-]+[0-9]+'</span>, r.text)</span><br><span class="line">            print(<span class="string">"Start to crawl page %d !"</span> % (page))</span><br><span class="line">            time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> info_url <span class="keyword">in</span> url_suffix:</span><br><span class="line">                bar()</span><br><span class="line">                info_word_list = []</span><br><span class="line">                crawl_url = url_info_prefix + info_url</span><br><span class="line">                header[<span class="string">'Referer'</span>] = url_index_prefix + str(page)</span><br><span class="line">                <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                    <span class="keyword">try</span>:</span><br><span class="line">                        r_info = requests.get(crawl_url, headers=header, timeout=<span class="number">10</span>)</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                    <span class="keyword">except</span>:</span><br><span class="line">                        print(<span class="string">"TimeOut Error, reconnecting..."</span>)</span><br><span class="line">                        time.sleep(<span class="number">2</span>)</span><br><span class="line">                soup_info = BeautifulSoup(r_info.text, <span class="string">'lxml'</span>)</span><br><span class="line"></span><br><span class="line">                info_word_list = [str(w.text).strip() <span class="keyword">for</span> w <span class="keyword">in</span> soup_info.find_all(<span class="string">'a'</span>)]</span><br><span class="line">                info_word_list.append(str(soup_info.h1.text).strip())</span><br><span class="line">                title_info = SplitList2Words(info_word_list)</span><br><span class="line">                inverted_index_dict = GenerateInvertedIndex(</span><br><span class="line">                    title_info, inverted_index_dict, crawl_url)</span><br><span class="line"></span><br><span class="line">                country = pd.read_html(r_info.text)</span><br><span class="line">                country_title = [x.split(<span class="string">":"</span>)[<span class="number">0</span>] <span class="keyword">for</span> x <span class="keyword">in</span> country[<span class="number">0</span>][<span class="number">0</span>]]</span><br><span class="line">                country_info = [info <span class="keyword">for</span> info <span class="keyword">in</span> country[<span class="number">0</span>][<span class="number">1</span>]]</span><br><span class="line"></span><br><span class="line">                inverted_index_dict = GenerateInvertedIndex(</span><br><span class="line">                    country_title, inverted_index_dict, crawl_url)</span><br><span class="line">                country_info = SplitList2Words(country_info)</span><br><span class="line">                inverted_index_dict = GenerateInvertedIndex(</span><br><span class="line">                    country_info, inverted_index_dict, crawl_url)</span><br><span class="line"></span><br><span class="line">                print(<span class="string">"Country \"%s\" was crawled！"</span> % (country[<span class="number">0</span>][<span class="number">1</span>][<span class="number">4</span>]))</span><br><span class="line">                time.sleep(<span class="number">5</span>)</span><br><span class="line">            print(<span class="string">"Finished crawling page %d"</span> % (page))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load</span><span class="params">()</span>:</span></span><br><span class="line">    file = open(<span class="string">'InvertedIndex.txt'</span>, <span class="string">'r'</span>)</span><br><span class="line">    js = file.read()</span><br><span class="line">    dic = json.loads(js)</span><br><span class="line">    file.close()</span><br><span class="line">    <span class="keyword">return</span> dic</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        command = input()</span><br><span class="line">        <span class="keyword">if</span> command == <span class="string">'build'</span>:</span><br><span class="line">            build()</span><br><span class="line">        <span class="keyword">elif</span> command == <span class="string">'load'</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">'InvertedIndex.txt'</span>):</span><br><span class="line">                print(<span class="string">"Can not find the Inverted Index File, please 'build' first!"</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                inverted_index_dict = load()</span><br><span class="line">                print(<span class="string">"Load file 'InvertedIndex.txt' successfully!"</span>)</span><br><span class="line">        <span class="keyword">elif</span> command.split(<span class="string">" "</span>)[<span class="number">0</span>] == <span class="string">'print'</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                beautiful_format = json.dumps(inverted_index_dict[command.split(<span class="string">" "</span>)[<span class="number">1</span>]], indent=<span class="number">4</span>, ensure_ascii=<span class="literal">False</span>)</span><br><span class="line">                print(beautiful_format)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                print(<span class="string">"The index \'%s\' doesn't exist!"</span> % (command.split(<span class="string">" "</span>)[<span class="number">1</span>]))</span><br><span class="line">        <span class="keyword">elif</span> command.split(<span class="string">" "</span>)[<span class="number">0</span>] == <span class="string">'find'</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">if</span> len(command.split(<span class="string">" "</span>)) == <span class="number">2</span>:</span><br><span class="line">                    <span class="keyword">for</span> i <span class="keyword">in</span> list(inverted_index_dict[command.split(<span class="string">" "</span>)[<span class="number">1</span>]].keys()):</span><br><span class="line">                        print(i)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                print(<span class="string">"The index \'%s\' doesn't exist!"</span> % (command[<span class="number">5</span>:]))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    url_list = []</span><br><span class="line">                    <span class="keyword">for</span> word <span class="keyword">in</span> command.split(<span class="string">" "</span>)[<span class="number">1</span>:]:</span><br><span class="line">                        url_list.append(list(inverted_index_dict[word].keys()))</span><br><span class="line">                    <span class="keyword">for</span> i <span class="keyword">in</span> set(url_list[<span class="number">0</span>]).intersection(*url_list[<span class="number">1</span>:]):</span><br><span class="line">                        print(i)</span><br><span class="line">                <span class="keyword">except</span>:</span><br><span class="line">                    print(<span class="string">"The intersection of \'%s\' doesn't exist!"</span> % (command[<span class="number">5</span>:]))</span><br><span class="line">                        </span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"Please input the right command!"</span>)</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;接单，简单的爬虫。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Crawler" scheme="https://kemo.xyz/categories/Crawler/"/>
    
    
      <category term="python" scheme="https://kemo.xyz/tags/python/"/>
    
      <category term="pandas" scheme="https://kemo.xyz/tags/pandas/"/>
    
      <category term="requests" scheme="https://kemo.xyz/tags/requests/"/>
    
      <category term="反向索引" scheme="https://kemo.xyz/tags/%E5%8F%8D%E5%90%91%E7%B4%A2%E5%BC%95/"/>
    
      <category term="BeautifulSoup" scheme="https://kemo.xyz/tags/BeautifulSoup/"/>
    
      <category term="alive_progress" scheme="https://kemo.xyz/tags/alive-progress/"/>
    
      <category term="正则表达式" scheme="https://kemo.xyz/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>天池_二手车价格预测_Task4_建模调参</title>
    <link href="https://kemo.xyz/%E5%A4%A9%E6%B1%A0-%E4%BA%8C%E6%89%8B%E8%BD%A6%E4%BB%B7%E6%A0%BC%E9%A2%84%E6%B5%8B-Task4-%E5%BB%BA%E6%A8%A1%E8%B0%83%E5%8F%82.html"/>
    <id>https://kemo.xyz/天池-二手车价格预测-Task4-建模调参.html</id>
    <published>2020-05-12T18:53:38.000Z</published>
    <updated>2020-05-12T19:27:12.861Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>天池数据挖掘，组对学习系列，系统地各种算法的杂糅。<br><a id="more"></a></p><h1 id="0️⃣-前言"><a href="#0️⃣-前言" class="headerlink" title="0️⃣ 前言"></a>0️⃣ 前言</h1><p>  本章思维导图：</p><p><img src="https://img-blog.csdnimg.cn/20200505184801159.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0V4Y2FsaWJ1clVsaW1pdGVk,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="0️⃣-1️⃣-赛题重述"><a href="#0️⃣-1️⃣-赛题重述" class="headerlink" title="0️⃣.1️⃣ 赛题重述"></a>0️⃣.1️⃣ 赛题重述</h3><p>  这是一道来自于天池的新手练习题目，用<code>数据分析</code>、<code>机器学习</code>等手段进行 <a href="https://tianchi.aliyun.com/competition/entrance/231784/information" target="_blank" rel="noopener">二手车售卖价格预测</a> 的回归问题。赛题本身的思路清晰明了，即对给定的数据集进行分析探讨，然后设计模型运用数据进行训练，测试模型，最终给出选手的预测结果。前面我们已经进行过EDA分析在这里<a href="https://blog.csdn.net/ExcaliburUlimited/article/details/105021630" target="_blank" rel="noopener">天池_二手车价格预测_Task1-2_赛题理解与数据分析</a>以及<a href="https://editor.csdn.net/md/?articleId=105170015" target="_blank" rel="noopener">天池_二手车价格预测_Task3_特征工程</a></p><h3 id="0️⃣-2️⃣-数据集概述"><a href="#0️⃣-2️⃣-数据集概述" class="headerlink" title="0️⃣.2️⃣ 数据集概述"></a>0️⃣.2️⃣ 数据集概述</h3><p>  赛题官方给出了来自Ebay Kleinanzeigen的二手车交易记录，总数据量超过<strong>40w</strong>，包含<strong>31列</strong>变量信息，其中<strong>15列</strong>为匿名变量，即<code>v0</code>至<code>v15</code>。并从中抽取<strong>15万条</strong>作为训练集，<strong>5万</strong>条作为测试集A，<strong>5万</strong>条作为测试集B，同时对<code>name</code>、<code>model</code>、<code>brand</code>和<code>regionCode</code>等信息进行脱敏。具体的数据表如下图：</p><div class="table-wrapper" style="center"><table style="center"><thead><tr style="center"><th><strong>Field</strong></th><th><strong>Description</strong></th></tr></thead><tbody style="center"><tr style="center"><td>SaleID</td><td>交易ID，唯一编码</td></tr><tr><td>name</td><td>汽车交易名称，已脱敏</td></tr><tr><td>regDate</td><td>汽车注册日期，例如20160101，2016年01月01日</td></tr><tr><td>model</td><td>车型编码，已脱敏</td></tr><tr><td>brand</td><td>汽车品牌，已脱敏</td></tr><tr><td>bodyType</td><td>车身类型：豪华轿车：0，微型车：1，厢型车：2，大巴车：3，敞篷车：4，双门汽车：5，商务车：6，搅拌车：7</td></tr><tr><td>fuelType</td><td>燃油类型：汽油：0，柴油：1，液化石油气：2，天然气：3，混合动力：4，其他：5，电动：6</td></tr><tr><td>gearbox</td><td>变速箱：手动：0，自动：1</td></tr><tr><td>power</td><td>发动机功率：范围 [ 0,  600 ]</td></tr><tr><td>kilometer</td><td>汽车已行驶公里，单位万km</td></tr><tr><td>notRepairedDamage</td><td>汽车有尚未修复的损坏：是：0，否：1</td></tr><tr><td>regionCode</td><td>地区编码，已脱敏</td></tr><tr><td>seller</td><td>销售方：个体：0，非个体：1</td></tr><tr><td>offerType</td><td>报价类型：提供：0，请求：1</td></tr><tr><td>creatDate</td><td>汽车上线时间，即开始售卖时间</td></tr><tr><td>price</td><td>二手车交易价格（预测目标）</td></tr><tr><td>v系列特征</td><td>匿名特征，包含v0-14在内15个匿名特征</td></tr></tbody></table></div><h1 id="1️⃣-数据处理"><a href="#1️⃣-数据处理" class="headerlink" title="1️⃣ 数据处理"></a>1️⃣ 数据处理</h1><p>  为了后面处理数据提高性能，所以需要对其进行内存优化。</p><ul><li>导入相关的库</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line">warnings.filterwarnings(<span class="string">'ignore'</span>)</span><br></pre></td></tr></tbody></table></figure><ul><li>通过调整数据类型，帮助我们减少数据在内存中占用的空间</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reduce_mem_usage</span><span class="params">(df)</span>:</span></span><br><span class="line">    <span class="string">""" 迭代dataframe的所有列，修改数据类型来减少内存的占用        </span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    start_mem = df.memory_usage().sum() </span><br><span class="line">    print(<span class="string">'Memory usage of dataframe is {:.2f} MB'</span>.format(start_mem))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> col <span class="keyword">in</span> df.columns:</span><br><span class="line">        col_type = df[col].dtype</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> col_type != object:</span><br><span class="line">            c_min = df[col].min()</span><br><span class="line">            c_max = df[col].max()</span><br><span class="line">            <span class="keyword">if</span> str(col_type)[:<span class="number">3</span>] == <span class="string">'int'</span>: <span class="comment"># 判断可以用哪种整型就可以表示，就转换到那个整型去</span></span><br><span class="line">                <span class="keyword">if</span> c_min > np.iinfo(np.int8).min <span class="keyword">and</span> c_max < np.iinfo(np.int8).max:</span><br><span class="line">                    df[col] = df[col].astype(np.int8)</span><br><span class="line">                <span class="keyword">elif</span> c_min > np.iinfo(np.int16).min <span class="keyword">and</span> c_max < np.iinfo(np.int16).max:</span><br><span class="line">                    df[col] = df[col].astype(np.int16)</span><br><span class="line">                <span class="keyword">elif</span> c_min > np.iinfo(np.int32).min <span class="keyword">and</span> c_max < np.iinfo(np.int32).max:</span><br><span class="line">                    df[col] = df[col].astype(np.int32)</span><br><span class="line">                <span class="keyword">elif</span> c_min > np.iinfo(np.int64).min <span class="keyword">and</span> c_max < np.iinfo(np.int64).max:</span><br><span class="line">                    df[col] = df[col].astype(np.int64)  </span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> c_min > np.finfo(np.float16).min <span class="keyword">and</span> c_max < np.finfo(np.float16).max:</span><br><span class="line">                    df[col] = df[col].astype(np.float16)</span><br><span class="line">                <span class="keyword">elif</span> c_min > np.finfo(np.float32).min <span class="keyword">and</span> c_max < np.finfo(np.float32).max:</span><br><span class="line">                    df[col] = df[col].astype(np.float32)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    df[col] = df[col].astype(np.float64)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            df[col] = df[col].astype(<span class="string">'category'</span>)</span><br><span class="line"></span><br><span class="line">    end_mem = df.memory_usage().sum() </span><br><span class="line">    print(<span class="string">'Memory usage after optimization is: {:.2f} MB'</span>.format(end_mem))</span><br><span class="line">    print(<span class="string">'Decreased by {:.1f}%'</span>.format(<span class="number">100</span> * (start_mem - end_mem) / start_mem))</span><br><span class="line">    <span class="keyword">return</span> df</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sample_feature = reduce_mem_usage(pd.read_csv(<span class="string">'../excel/data_for_tree.csv'</span>))</span><br></pre></td></tr></tbody></table></figure><pre><code>Memory usage of dataframe is 35249888.00 MBMemory usage after optimization is: 8925652.00 MBDecreased by 74.7%</code></pre><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">continuous_feature_names = [x <span class="keyword">for</span> x <span class="keyword">in</span> sample_feature.columns <span class="keyword">if</span> x <span class="keyword">not</span> <span class="keyword">in</span> [<span class="string">'price'</span>,<span class="string">'brand'</span>,<span class="string">'model'</span>]]</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sample_feature.head()</span><br></pre></td></tr></tbody></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>SaleID</th>      <th>name</th>      <th>model</th>      <th>brand</th>      <th>bodyType</th>      <th>fuelType</th>      <th>gearbox</th>      <th>power</th>      <th>kilometer</th>      <th>notRepairedDamage</th>      <th>...</th>      <th>used_time</th>      <th>city</th>      <th>brand_amount</th>      <th>brand_price_max</th>      <th>brand_price_median</th>      <th>brand_price_min</th>      <th>brand_price_sum</th>      <th>brand_price_std</th>      <th>brand_price_average</th>      <th>power_bin</th>    </tr>  </thead>  <tbody>    <tr>      <td>0</td>      <td>1</td>      <td>2262</td>      <td>40.0</td>      <td>1</td>      <td>2.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0</td>      <td>15.0</td>      <td>-</td>      <td>...</td>      <td>4756.0</td>      <td>4.0</td>      <td>4940.0</td>      <td>9504.0</td>      <td>3000.0</td>      <td>149.0</td>      <td>17934852.0</td>      <td>2538.0</td>      <td>3630.0</td>      <td>NaN</td>    </tr>    <tr>      <td>1</td>      <td>5</td>      <td>137642</td>      <td>24.0</td>      <td>10</td>      <td>0.0</td>      <td>1.0</td>      <td>0.0</td>      <td>109</td>      <td>10.0</td>      <td>0.0</td>      <td>...</td>      <td>2482.0</td>      <td>3.0</td>      <td>3556.0</td>      <td>9504.0</td>      <td>2490.0</td>      <td>200.0</td>      <td>10936962.0</td>      <td>2180.0</td>      <td>3074.0</td>      <td>10.0</td>    </tr>    <tr>      <td>2</td>      <td>7</td>      <td>165346</td>      <td>26.0</td>      <td>14</td>      <td>1.0</td>      <td>0.0</td>      <td>0.0</td>      <td>101</td>      <td>15.0</td>      <td>0.0</td>      <td>...</td>      <td>6108.0</td>      <td>4.0</td>      <td>8784.0</td>      <td>9504.0</td>      <td>1350.0</td>      <td>13.0</td>      <td>17445064.0</td>      <td>1798.0</td>      <td>1986.0</td>      <td>10.0</td>    </tr>    <tr>      <td>3</td>      <td>10</td>      <td>18961</td>      <td>19.0</td>      <td>9</td>      <td>3.0</td>      <td>1.0</td>      <td>0.0</td>      <td>101</td>      <td>15.0</td>      <td>0.0</td>      <td>...</td>      <td>3874.0</td>      <td>1.0</td>      <td>4488.0</td>      <td>9504.0</td>      <td>1250.0</td>      <td>55.0</td>      <td>7867901.0</td>      <td>1557.0</td>      <td>1753.0</td>      <td>10.0</td>    </tr>    <tr>      <td>4</td>      <td>13</td>      <td>8129</td>      <td>65.0</td>      <td>1</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>150</td>      <td>15.0</td>      <td>1.0</td>      <td>...</td>      <td>4152.0</td>      <td>3.0</td>      <td>4940.0</td>      <td>9504.0</td>      <td>3000.0</td>      <td>149.0</td>      <td>17934852.0</td>      <td>2538.0</td>      <td>3630.0</td>      <td>14.0</td>    </tr>  </tbody></table><p>5 rows × 39 columns</p></div><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">continuous_feature_names</span><br></pre></td></tr></tbody></table></figure><pre><code>['SaleID', 'name', 'bodyType', 'fuelType', 'gearbox', 'power', 'kilometer', 'notRepairedDamage', 'seller', 'offerType', 'v_0', 'v_1', 'v_2', 'v_3', 'v_4', 'v_5', 'v_6', 'v_7', 'v_8', 'v_9', 'v_10', 'v_11', 'v_12', 'v_13', 'v_14', 'train', 'used_time', 'city', 'brand_amount', 'brand_price_max', 'brand_price_median', 'brand_price_min', 'brand_price_sum', 'brand_price_std', 'brand_price_average', 'power_bin']</code></pre><h1 id="2️⃣-线性回归"><a href="#2️⃣-线性回归" class="headerlink" title="2️⃣ 线性回归"></a>2️⃣ 线性回归</h1><h2 id="2️⃣-1️⃣-简单建模"><a href="#2️⃣-1️⃣-简单建模" class="headerlink" title="2️⃣.1️⃣ 简单建模"></a>2️⃣.1️⃣ 简单建模</h2><p>  设置训练集的自变量<code>train_X</code>与因变量<code>train_y</code></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sample_feature = sample_feature.dropna().replace(<span class="string">'-'</span>, <span class="number">0</span>).reset_index(drop=<span class="literal">True</span>)</span><br><span class="line">sample_feature[<span class="string">'notRepairedDamage'</span>] = sample_feature[<span class="string">'notRepairedDamage'</span>].astype(np.float32)</span><br><span class="line"></span><br><span class="line">train = sample_feature[continuous_feature_names + [<span class="string">'price'</span>]]</span><br><span class="line">train_X = train[continuous_feature_names]</span><br><span class="line">train_y = train[<span class="string">'price'</span>]</span><br></pre></td></tr></tbody></table></figure><ul><li>从<code>sklearn.linear_model</code>库调用线性回归函数</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression</span><br></pre></td></tr></tbody></table></figure><p>训练模型，<code>normalize</code>设置为<code>True</code>则输入的样本数据将<script type="math/tex">\frac{(X-X_{ave})}{||X||}</script></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">model = LinearRegression(normalize=<span class="literal">True</span>)</span><br><span class="line">model = model.fit(train_X, train_y)</span><br></pre></td></tr></tbody></table></figure><p>查看训练的线性回归模型的截距（intercept）与权重(coef)，其中<code>zip</code>先将特征与权重拼成元组，再用<code>dict.items()</code>将元组变成列表，<code>lambda</code>里面取元组的第2个元素，也就是按照权重排序。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'intercept:'</span>+ str(model.intercept_))</span><br><span class="line"></span><br><span class="line">sorted(dict(zip(continuous_feature_names, model.coef_)).items(), key=<span class="keyword">lambda</span> x:x[<span class="number">1</span>], reverse=<span class="literal">True</span>)</span><br></pre></td></tr></tbody></table></figure><pre><code>intercept:-74792.9734982533[('v_6', 1409712.605060366), ('v_8', 610234.5713666412), ('v_2', 14000.150601494915), ('v_10', 11566.15879987477), ('v_7', 4359.400479384727), ('v_3', 734.1594753553514), ('v_13', 429.31597053081543), ('v_14', 113.51097451363385), ('bodyType', 53.59225499923475), ('fuelType', 28.70033988480179), ('power', 14.063521207625223), ('city', 11.214497244626225), ('brand_price_std', 0.26064581249034796), ('brand_price_median', 0.2236946027016186), ('brand_price_min', 0.14223892840381142), ('brand_price_max', 0.06288317241689621), ('brand_amount', 0.031481415743174694), ('name', 2.866003063271253e-05), ('SaleID', 1.5357186544049832e-05), ('gearbox', 8.527422323822975e-07), ('train', -3.026798367500305e-08), ('offerType', -2.0873267203569412e-07), ('seller', -8.426140993833542e-07), ('brand_price_sum', -4.1644253886318015e-06), ('brand_price_average', -0.10601622599106471), ('used_time', -0.11019174518618283), ('power_bin', -64.74445582883024), ('kilometer', -122.96508938774225), ('v_0', -317.8572907738245), ('notRepairedDamage', -412.1984812088826), ('v_4', -1239.4804712396635), ('v_1', -2389.3641453624136), ('v_12', -12326.513672033445), ('v_11', -16921.982011390297), ('v_5', -25554.951071390704), ('v_9', -26077.95662717417)]</code></pre><h2 id="2️⃣-2️⃣-处理长尾分布"><a href="#2️⃣-2️⃣-处理长尾分布" class="headerlink" title="2️⃣.2️⃣ 处理长尾分布"></a>2️⃣.2️⃣ 处理长尾分布</h2><p>  长尾分布是尾巴很长的分布。那么尾巴很长很厚的分布有什么特殊的呢？有两方面：一方面，这种分布会使得你的采样不准，估值不准，因为尾部占了很大部分。另一方面，尾部的数据少，人们对它的了解就少，那么如果它是有害的，那么它的破坏力就非常大，因为人们对它的预防措施和经验比较少。实际上，在稳定分布家族中，除了正态分布，其他均为长尾分布。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93aWtpLm1iYWxpYi5jb20vdy9pbWFnZXMvNC80Yi8lRTklOTUlQkYlRTUlQjAlQkUlRTclOTAlODYlRTglQUUlQkEuZ2lm" alt></p><p>随机找个特征，用随机下标选取一定的数观测预测值与真实值之间的差别</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line">subsample_index = np.random.randint(low=<span class="number">0</span>, high=len(train_y), size=<span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">plt.scatter(train_X[<span class="string">'v_6'</span>][subsample_index], train_y[subsample_index], color=<span class="string">'black'</span>)</span><br><span class="line">plt.scatter(train_X[<span class="string">'v_6'</span>][subsample_index], model.predict(train_X.loc[subsample_index]), color=<span class="string">'red'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'v_6'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'price'</span>)</span><br><span class="line">plt.legend([<span class="string">'True Price'</span>,<span class="string">'Predicted Price'</span>],loc=<span class="string">'upper right'</span>)</span><br><span class="line">print(<span class="string">'真实价格与预测价格差距过大！'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><pre><code>真实价格与预测价格差距过大！<Figure size 640x480 with 1 Axes></code></pre><p>绘制特征<code>v_6</code>的值与标签的散点图，图片发现模型的预测结果（红色点）与真实标签（黑色点）的分布差异较大，且部分预测值出现了小于0的情况，说明我们的模型存在一些问题。<br>下面可以通过作图我们看看数据的标签（<code>price</code>）的分布情况</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line">plt.figure(figsize=(<span class="number">15</span>,<span class="number">5</span>))</span><br><span class="line">plt.subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>)</span><br><span class="line">sns.distplot(train_y)</span><br><span class="line">plt.subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line">sns.distplot(train_y[train_y < np.quantile(train_y, <span class="number">0.9</span>)])<span class="comment"># 去掉尾部10%的数再画一次，依然是呈现长尾分布</span></span><br></pre></td></tr></tbody></table></figure><pre><code><matplotlib.axes._subplots.AxesSubplot at 0x210469a20f0></code></pre><p><img src="https://img-blog.csdnimg.cn/20200505184904716.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0V4Y2FsaWJ1clVsaW1pdGVk,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>从这两个频率分布直方图来看，<code>price</code>呈现长尾分布，不利于我们的建模预测，原因是很多模型都假设数据误差项符合正态分布，而长尾分布的数据违背了这一假设。</p><p>在这里我们对<code>train_y</code>进行了$log(x+1)$变换，使标签贴近于正态分布</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">train_y_ln = np.log(train_y + <span class="number">1</span>)</span><br><span class="line">plt.figure(figsize=(<span class="number">15</span>,<span class="number">5</span>))</span><br><span class="line">plt.subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>)</span><br><span class="line">sns.distplot(train_y_ln)</span><br><span class="line">plt.subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line">sns.distplot(train_y_ln[train_y_ln < np.quantile(train_y_ln, <span class="number">0.9</span>)])</span><br></pre></td></tr></tbody></table></figure><pre><code><matplotlib.axes._subplots.AxesSubplot at 0x21046aa7588></code></pre><p><img src="https://img-blog.csdnimg.cn/20200505184913297.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0V4Y2FsaWJ1clVsaW1pdGVk,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>可以看出经过对数处理后，长尾分布的效果减弱了。再进行一次线性回归：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">model = model.fit(train_X, train_y_ln)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'intercept:'</span>+ str(model.intercept_))</span><br><span class="line">sorted(dict(zip(continuous_feature_names, model.coef_)).items(), key=<span class="keyword">lambda</span> x:x[<span class="number">1</span>], reverse=<span class="literal">True</span>)</span><br></pre></td></tr></tbody></table></figure><pre><code>intercept:22.237755141260187[('v_1', 5.669305855573455), ('v_5', 4.244663233260515), ('v_12', 1.2018270333465797), ('v_13', 1.1021805892566767), ('v_10', 0.9251453991435046), ('v_2', 0.8276319426702504), ('v_9', 0.6011701859510072), ('v_3', 0.4096252333799574), ('v_0', 0.08579322268709569), ('power_bin', 0.013581489882378468), ('bodyType', 0.007405158753814581), ('power', 0.0003639122482301998), ('brand_price_median', 0.0001295023112073966), ('brand_price_max', 5.681812615719255e-05), ('brand_price_std', 4.2637652140444604e-05), ('brand_price_sum', 2.215129563552113e-09), ('gearbox', 7.094911325111752e-10), ('seller', 2.715054847612919e-10), ('offerType', 1.0291500984749291e-10), ('train', -2.2282620193436742e-11), ('SaleID', -3.7349069125800904e-09), ('name', -6.100613320903764e-08), ('brand_amount', -1.63362003323235e-07), ('used_time', -2.9274637535648837e-05), ('brand_price_min', -2.97497751376125e-05), ('brand_price_average', -0.0001181124521449396), ('fuelType', -0.0018817210167693563), ('city', -0.003633315365347111), ('v_14', -0.02594698320698149), ('kilometer', -0.03327227857575015), ('notRepairedDamage', -0.27571086049472), ('v_4', -0.6724689959780609), ('v_7', -1.178076244244115), ('v_11', -1.3234586342526309), ('v_8', -83.08615946716786), ('v_6', -315.0380673447196)]</code></pre><p>再一次画出预测与真实值的散点对比图：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">plt.scatter(train_X[<span class="string">'v_6'</span>][subsample_index], train_y[subsample_index], color=<span class="string">'black'</span>)</span><br><span class="line">plt.scatter(train_X[<span class="string">'v_6'</span>][subsample_index], np.exp(model.predict(train_X.loc[subsample_index])), color=<span class="string">'blue'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'v_6'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'price'</span>)</span><br><span class="line">plt.legend([<span class="string">'True Price'</span>,<span class="string">'Predicted Price'</span>],loc=<span class="string">'upper right'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="https://img-blog.csdnimg.cn/20200505184922666.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0V4Y2FsaWJ1clVsaW1pdGVk,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>效果稍微好了一点，但毕竟是线性回归，拟合得还是不够好。</p><h1 id="3️⃣-五折交叉验证¶（cross-val-score）"><a href="#3️⃣-五折交叉验证¶（cross-val-score）" class="headerlink" title="3️⃣ 五折交叉验证¶（cross_val_score）"></a>3️⃣ 五折交叉验证¶（<code>cross_val_score</code>）</h1><p>  在使用训练集对参数进行训练的时候，经常会发现人们通常会将一整个训练集分为三个部分（比如mnist手写训练集）。一般分为：训练集（<code>train_set</code>），评估集（<code>valid_set</code>），测试集（<code>test_set</code>）这三个部分。这其实是为了保证训练效果而特意设置的。其中测试集很好理解，其实就是完全不参与训练的数据，仅仅用来观测测试效果的数据。而训练集和评估集则牵涉到下面的知识了。</p><p>  因为在实际的训练中，训练的结果对于训练集的拟合程度通常还是挺好的（初始条件敏感），但是对于训练集之外的数据的拟合程度通常就不那么令人满意了。因此我们通常并不会把所有的数据集都拿来训练，而是分出一部分来（这一部分不参加训练）对训练集生成的参数进行测试，相对客观的判断这些参数对训练集之外的数据的符合程度。这种思想就称为交叉验证（<code>Cross Validation</code>）。</p><p>  直观的类比就是训练集是上课，评估集是平时的作业，而测试集是最后的期末考试。😏</p><p><code>Cross Validation</code>：简言之，就是进行多次<code>train_test_split</code>划分；每次划分时，在不同的数据集上进行训练、测试评估，从而得出一个评价结果；如果是5折交叉验证，意思就是在原始数据集上，进行5次划分，每次划分进行一次训练、评估，最后得到5次划分后的评估结果，一般在这几次评估结果上取平均得到最后的评分。<code>k-fold cross-validation</code> ，其中，<code>k</code>一般取5或10。</p><p>一般情况将K折交叉验证用于模型调优，找到使得模型泛化性能最优的超参值。找到后，在全部训练集上重新训练模型，并使用独立测试集对模型性能做出最终评价。K折交叉验证使用了无重复抽样技术的好处：每次迭代过程中每个样本点只有一次被划入训练集或测试集的机会。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NjM3NzQyLWMzMzNmMWFkNDhhMDgxMWEucG5n?x-oss-process=image/format,png" alt><br><img src="https://img-blog.csdn.net/20180205102310918?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQ2hlblZhc3Q=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt><br><img src="https://img-blog.csdn.net/20180205102314995?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQ2hlblZhc3Q=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt></p><p>更多参考资料：<a href="https://www.cnblogs.com/ysugyl/p/8707887.html" target="_blank" rel="noopener">几种交叉验证（cross validation）方式的比较</a>、<a href="https://blog.csdn.net/tianguiyuyu/article/details/80697223" target="_blank" rel="noopener">k折交叉验证</a></p><ul><li>下面调用<code>sklearn.model_selection</code>的<code>cross_val_score</code>进行交叉验证</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> cross_val_score</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> mean_absolute_error,  make_scorer</span><br></pre></td></tr></tbody></table></figure><h2 id="3️⃣-1️⃣-cross-val-score相应函数的应用"><a href="#3️⃣-1️⃣-cross-val-score相应函数的应用" class="headerlink" title="3️⃣.1️⃣ cross_val_score相应函数的应用"></a>3️⃣.1️⃣ <code>cross_val_score</code>相应函数的应用</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log_transfer</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(y, yhat)</span>:</span></span><br><span class="line">        result = func(np.log(y), np.nan_to_num(np.log(yhat)))</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br></pre></td></tr></tbody></table></figure><ul><li>上面的<code>log_transfer</code>是提供装饰器功能，是为了将下面的<code>cross_val_score</code>的<code>make_scorer</code>的<code>mean_absolute_error</code>（它的公式在下面）的输入参数做对数处理，其中<code>np.nan_to_num</code>顺便将<code>nan</code>转变为0。<script type="math/tex; mode=display">MAE=\frac{\sum\limits_{i=1}^{n}\left|y_{i}-\hat{y}_{i}\right|}{n}</script></li><li><p><code>cross_val_score</code>是<code>sklearn</code>用于交叉验证评估分数的函数，前面几个参数很明朗，后面几个参数需要解释一下。</p><ul><li><code>verbose</code>：详细程度，也就是是否输出进度信息</li><li><code>cv</code>：交叉验证生成器或可迭代的次数</li><li><code>scoring</code>：调用用来评价的方法，是score越大约好，还是loss越小越好，默认是loss。这里调用了<code>mean_absolute_error</code>，只是在调用之前先进行了<code>log_transfer</code>的装饰，然后调用的<code>y</code>和<code>yhat</code>，会自动将<code>cross_val_score</code>得到的<code>X</code>和<code>y</code>代入。<ul><li><code>make_scorer</code>：构建一个完整的定制scorer函数，可选参数<code>greater_is_better</code>，默认为<code>False</code>，也就是loss越小越好</li></ul></li></ul></li><li><p>下面是对未进行对数处理的原特征数据进行五折交叉验证</p></li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scores = cross_val_score(model, X=train_X, y=train_y, verbose=<span class="number">1</span>, cv = <span class="number">5</span>, scoring=make_scorer(log_transfer(mean_absolute_error)))</span><br></pre></td></tr></tbody></table></figure><pre><code>[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.[Parallel(n_jobs=1)]: Done   5 out of   5 | elapsed:    0.2s finished</code></pre><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'AVG:'</span>, np.mean(scores))</span><br></pre></td></tr></tbody></table></figure><pre><code>AVG: 0.7533845471636889</code></pre><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">scores = pd.DataFrame(scores.reshape(<span class="number">1</span>,<span class="number">-1</span>)) <span class="comment"># 转化成一行，(-1,1)为一列</span></span><br><span class="line">scores.columns = [<span class="string">'cv'</span> + str(x) <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">6</span>)]</span><br><span class="line">scores.index = [<span class="string">'MAE'</span>]</span><br><span class="line">scores</span><br></pre></td></tr></tbody></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>cv1</th>      <th>cv2</th>      <th>cv3</th>      <th>cv4</th>      <th>cv5</th>    </tr>  </thead>  <tbody>    <tr>      <td>MAE</td>      <td>0.727867</td>      <td>0.759451</td>      <td>0.781238</td>      <td>0.750681</td>      <td>0.747686</td>    </tr>  </tbody></table></div><p>使用线性回归模型，对进行过对数处理的原特征数据进行五折交叉验证</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scores = cross_val_score(model, X=train_X, y=train_y_ln, verbose=<span class="number">1</span>, cv = <span class="number">5</span>, scoring=make_scorer(mean_absolute_error))</span><br></pre></td></tr></tbody></table></figure><pre><code>[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.[Parallel(n_jobs=1)]: Done   5 out of   5 | elapsed:    0.1s finished</code></pre><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'AVG:'</span>, np.mean(scores))</span><br></pre></td></tr></tbody></table></figure><pre><code>AVG: 0.2124134663602803</code></pre><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">scores = pd.DataFrame(scores.reshape(<span class="number">1</span>,<span class="number">-1</span>))</span><br><span class="line">scores.columns = [<span class="string">'cv'</span> + str(x) <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">6</span>)]</span><br><span class="line">scores.index = [<span class="string">'MAE'</span>]</span><br><span class="line">scores</span><br></pre></td></tr></tbody></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>cv1</th>      <th>cv2</th>      <th>cv3</th>      <th>cv4</th>      <th>cv5</th>    </tr>  </thead>  <tbody>    <tr>      <td>MAE</td>      <td>0.208238</td>      <td>0.212408</td>      <td>0.215933</td>      <td>0.210742</td>      <td>0.214747</td>    </tr>  </tbody></table></div><p>可以看出进行对数处理后，五折交叉验证的loss显著降低。</p><h2 id="3️⃣-2️⃣-考虑真实世界限制"><a href="#3️⃣-2️⃣-考虑真实世界限制" class="headerlink" title="3️⃣.2️⃣ 考虑真实世界限制"></a>3️⃣.2️⃣ 考虑真实世界限制</h2><p>  例如：通过2018年的二手车价格预测2017年的二手车价格，这显然是不合理的，因此我们还可以采用时间顺序对数据集进行分隔。在本例中，我们选用靠前时间的4/5样本当作训练集，靠后时间的1/5当作验证集，最终结果与五折交叉验证差距不大。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">sample_feature = sample_feature.reset_index(drop=<span class="literal">True</span>)</span><br><span class="line">split_point = len(sample_feature) // <span class="number">5</span> * <span class="number">4</span></span><br><span class="line"></span><br><span class="line">train = sample_feature.loc[:split_point].dropna()</span><br><span class="line">val = sample_feature.loc[split_point:].dropna()</span><br><span class="line"></span><br><span class="line">train_X = train[continuous_feature_names]</span><br><span class="line">train_y_ln = np.log(train[<span class="string">'price'</span>])</span><br><span class="line">val_X = val[continuous_feature_names]</span><br><span class="line">val_y_ln = np.log(val[<span class="string">'price'</span>])</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model = model.fit(train_X, train_y_ln)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mean_absolute_error(val_y_ln, model.predict(val_X))</span><br></pre></td></tr></tbody></table></figure><pre><code>0.21498301182417004</code></pre><h2 id="3️⃣-3️⃣-绘制学习率曲线与验证曲线¶"><a href="#3️⃣-3️⃣-绘制学习率曲线与验证曲线¶" class="headerlink" title="3️⃣.3️⃣ 绘制学习率曲线与验证曲线¶"></a>3️⃣.3️⃣ 绘制学习率曲线与验证曲线¶</h2><p>  学习曲线是一种用来判断训练模型的一种方法，它会自动把训练样本的数量按照预定的规则逐渐增加，然后画出不同训练样本数量时的模型准确度。</p><p>  我们可以把$J_{train}(\theta)$和$J_{test}(\theta)$作为纵坐标，画出与训练集数据集$m$的大小关系，这就是学习曲线。通过学习曲线，可以直观地观察到模型的准确性和训练数据大小的关系。 我们可以比较直观的了解到我们的模型处于一个什么样的状态，如：过拟合（overfitting）或欠拟合（underfitting）</p><p>  如果数据集的大小为$m$，则通过下面的流程即可画出学习曲线：</p><ul><li><p>1.把数据集分成训练数据集和交叉验证集（可以看作测试集）；</p></li><li><p>2.取训练数据集的20%作为训练样本，训练出模型参数；</p></li><li><p>3.使用交叉验证集来计算训练出来的模型的准确性；</p></li><li><p>4.以训练集的score和交叉验证集score为纵坐标(这里的score取决于你使用的<code>make_score</code>方法，例如MAE)，训练集的个数作为横坐标，在坐标轴上画出上述步骤计算出来的模型准确性；</p></li><li><p>5.训练数据集增加10%，调到步骤2，继续执行，知道训练数据集大小为100%。</p></li></ul><p><code>learning_curve()</code>：这个函数主要是用来判断（可视化）模型是否过拟合的。下面是一些参数的解释：</p><ul><li><code>X</code>：是一个m*n的矩阵，m:数据数量，n:特征数量；</li><li><code>y</code>：是一个m*1的矩阵，m:数据数量，相对于<code>X</code>的目标进行分类或回归；</li><li><code>groups</code>：将数据集拆分为训练/测试集时使用的样本的标签分组。<strong>[可选]</strong>；</li><li><code>train_sizes</code>：指定训练样品数量的变化规则。比如：np.linspace(0.1, 1.0, 5)表示把训练样品数量从0.1-1分成5等分，生成[0.1, 0.325,0.55,0.75,1]的序列，从序列中取出训练样品数量百分比，逐个计算在当前训练样本数量情况下训练出来的模型准确性。</li><li><code>cv</code>：<code>None</code>，要使用默认的三折交叉验证（v0.22版本中将改为五折）；</li><li><code>n_jobs</code>：要并行运行的作业数。None表示1。 -1表示使用所有处理器；</li><li><code>pre_dispatch</code>：并行执行的预调度作业数（默认为全部）。该选项可以减少分配的内存。该字符串可以是“ 2 * n_jobs”之类的表达式；</li><li><code>shuffle</code>：<code>bool</code>，是否在基于<code>train_sizes</code>为前缀之前对训练数据进行洗牌；</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> learning_curve, validation_curve</span><br></pre></td></tr></tbody></table></figure><p><code>plt.fill_between()</code>用来填充两条线间区域，其他好像没什么好解释的了。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_learning_curve</span><span class="params">(estimator, title, X, y, ylim=None, cv=None,n_jobs=<span class="number">1</span>, train_size=np.linspace<span class="params">(<span class="number">.1</span>, <span class="number">1.0</span>, <span class="number">5</span> )</span>)</span>:</span>  </span><br><span class="line">    plt.figure()  </span><br><span class="line">    plt.title(title)  </span><br><span class="line">    <span class="keyword">if</span> ylim <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:  </span><br><span class="line">        plt.ylim(*ylim)  </span><br><span class="line">    plt.xlabel(<span class="string">'Training example'</span>)  </span><br><span class="line">    plt.ylabel(<span class="string">'score'</span>)  </span><br><span class="line">    train_sizes, train_scores, test_scores = learning_curve(estimator, X, y, cv=cv, n_jobs=n_jobs, train_sizes=train_size, scoring = make_scorer(mean_absolute_error))  </span><br><span class="line">    train_scores_mean = np.mean(train_scores, axis=<span class="number">1</span>)  </span><br><span class="line">    train_scores_std = np.std(train_scores, axis=<span class="number">1</span>)  </span><br><span class="line">    test_scores_mean = np.mean(test_scores, axis=<span class="number">1</span>)  </span><br><span class="line">    test_scores_std = np.std(test_scores, axis=<span class="number">1</span>)  </span><br><span class="line">    plt.grid()<span class="comment">#区域  </span></span><br><span class="line">    plt.fill_between(train_sizes, train_scores_mean - train_scores_std,  </span><br><span class="line">                     train_scores_mean + train_scores_std, alpha=<span class="number">0.1</span>,  </span><br><span class="line">                     color=<span class="string">"r"</span>)  </span><br><span class="line">    plt.fill_between(train_sizes, test_scores_mean - test_scores_std,  </span><br><span class="line">                     test_scores_mean + test_scores_std, alpha=<span class="number">0.1</span>,  </span><br><span class="line">                     color=<span class="string">"g"</span>)  </span><br><span class="line">    plt.plot(train_sizes, train_scores_mean, <span class="string">'o-'</span>, color=<span class="string">'r'</span>,  </span><br><span class="line">             label=<span class="string">"Training score"</span>)  </span><br><span class="line">    plt.plot(train_sizes, test_scores_mean,<span class="string">'o-'</span>,color=<span class="string">"g"</span>,  </span><br><span class="line">             label=<span class="string">"Cross-validation score"</span>)  </span><br><span class="line">    plt.legend(loc=<span class="string">"best"</span>)  </span><br><span class="line">    <span class="keyword">return</span> plt</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plot_learning_curve(LinearRegression(), <span class="string">'Liner_model'</span>, train_X[:], train_y_ln[:], ylim=(<span class="number">0.0</span>, <span class="number">0.5</span>), cv=<span class="number">5</span>, n_jobs=<span class="number">-1</span>)</span><br></pre></td></tr></tbody></table></figure><pre><code><module 'matplotlib.pyplot' from 'D:\\Software\\Anaconda\\lib\\site-packages\\matplotlib\\pyplot.py'></code></pre><p><img src="https://img-blog.csdnimg.cn/20200505184932891.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0V4Y2FsaWJ1clVsaW1pdGVk,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>训练误差与验证误差逐渐一致，准确率也挺高（这里的score是MAE，所以是loss趋近于0.2，准确率趋近于0.8），但是训练误差几乎没变过，所以属于过拟合。这里给出一下高偏差欠拟合(bias)以及高方差过拟合(variance)的模样：</p><p><img src="https://img-blog.csdn.net/20180909113753737?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2NTIzODM5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9waWMyLnpoaW1nLmNvbS84MC9hZmEwMzRkNTI5NjI2ODFkYjA5YjRkYzEwNjBmODA3NV83MjB3LmpwZw?x-oss-process=image/format,png" alt></p><p>更形象一点：</p><p>Data：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9waWMyLnpoaW1nLmNvbS84MC9iZTBkNGQ0MzhjNGU0ODc1ZDUyYmEzZWFkZWFkNjhmM183MjB3LmpwZw?x-oss-process=image/format,png" alt></p><p>Normal fitting:</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9waWMzLnpoaW1nLmNvbS84MC9hMDkzNzEwZjk5MzY0MTg1NjYyYTRkZTFlZWFhMTU3M183MjB3LmpwZw?x-oss-process=image/format,png" alt></p><p>overfitting:</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9waWM0LnpoaW1nLmNvbS84MC9hNDY1YTk4NjE3ODczMmI1YjdlMTc0YjAxODM2Zjg0Yl83MjB3LmpwZw?x-oss-process=image/format,png" alt></p><p>serious overfitting:</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9waWM0LnpoaW1nLmNvbS84MC9mMmNiOWZkNzY4M2QzNWJmMjkwZDU3ZTJhZGMwMGYzMV83MjB3LmpwZw?x-oss-process=image/format,png" alt></p><h1 id="4️⃣-多种模型对比"><a href="#4️⃣-多种模型对比" class="headerlink" title="4️⃣ 多种模型对比"></a>4️⃣ 多种模型对比</h1><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">train = sample_feature[continuous_feature_names + [<span class="string">'price'</span>]].dropna()</span><br><span class="line"></span><br><span class="line">train_X = train[continuous_feature_names]</span><br><span class="line">train_y = train[<span class="string">'price'</span>]</span><br><span class="line">train_y_ln = np.log(train_y + <span class="number">1</span>)</span><br></pre></td></tr></tbody></table></figure><h2 id="4️⃣-1️⃣-线性模型-amp-嵌入式特征选择"><a href="#4️⃣-1️⃣-线性模型-amp-嵌入式特征选择" class="headerlink" title="4️⃣.1️⃣ 线性模型 & 嵌入式特征选择"></a>4️⃣.1️⃣ 线性模型 & 嵌入式特征选择</h2><p>  有一些前叙知识需要补全。其中关于正则化的知识：</p><ul><li>分别为L1正则化与L2正则化；</li><li>L1正则化的模型建叫做Lasso回归，使用L2正则化的模型叫做Ridge回归（岭回归）；</li><li>L1正则化是指权值向量w中各个元素的绝对值之和，通常表示为$\left | w \right | _{1} $；</li><li>L2正则化是指权值向量w中各个元素的平方和然后再求平方根（可以看到Ridge回归的L2正则化项有平方符号），通常表示为$\left | w \right | _{2} $</li><li>L1正则化可以产生稀疏权值矩阵，即产生一个稀疏模型，可以用于特征选择；</li><li>L2正则化可以防止模型过拟合（overfitting），一定程度上，L1也可以防止过拟合；</li></ul><p>更多其他知识可以看这篇文章：<a href="https://blog.csdn.net/jinping_shi/article/details/52433975" target="_blank" rel="noopener">机器学习中正则化项L1和L2的直观理解</a></p><p>  在过滤式和包裹式特征选择方法中，特征选择过程与学习器训练过程有明显的分别。而嵌入式特征选择在学习器训练过程中自动地进行特征选择。嵌入式选择最常用的是L1正则化与L2正则化。在对线性回归模型加入两种正则化方法后，他们分别变成了岭回归与Lasso回归。</p><h3 id="4️⃣-1️⃣-1️⃣-LinearRegression，Ridge，Lasso方法的运行"><a href="#4️⃣-1️⃣-1️⃣-LinearRegression，Ridge，Lasso方法的运行" class="headerlink" title="4️⃣.1️⃣.1️⃣ LinearRegression，Ridge，Lasso方法的运行"></a>4️⃣.1️⃣.1️⃣ <code>LinearRegression</code>，<code>Ridge</code>，<code>Lasso</code>方法的运行</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> Ridge</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> Lasso</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">models = [LinearRegression(),</span><br><span class="line">          Ridge(),</span><br><span class="line">          Lasso()]</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">result = dict()</span><br><span class="line"><span class="keyword">for</span> model <span class="keyword">in</span> models:</span><br><span class="line">    model_name = str(model).split(<span class="string">'('</span>)[<span class="number">0</span>]</span><br><span class="line">    scores = cross_val_score(model, X=train_X, y=train_y_ln, verbose=<span class="number">0</span>, cv = <span class="number">5</span>, scoring=make_scorer(mean_absolute_error))</span><br><span class="line">    result[model_name] = scores</span><br><span class="line">    print(model_name + <span class="string">' is finished'</span>)</span><br></pre></td></tr></tbody></table></figure><pre><code>LinearRegression is finishedRidge is finishedD:\Software\Anaconda\lib\site-packages\sklearn\linear_model\coordinate_descent.py:492: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Fitting data with very small alpha may cause precision problems.  ConvergenceWarning)D:\Software\Anaconda\lib\site-packages\sklearn\linear_model\coordinate_descent.py:492: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Fitting data with very small alpha may cause precision problems.  ConvergenceWarning)D:\Software\Anaconda\lib\site-packages\sklearn\linear_model\coordinate_descent.py:492: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Fitting data with very small alpha may cause precision problems.  ConvergenceWarning)D:\Software\Anaconda\lib\site-packages\sklearn\linear_model\coordinate_descent.py:492: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Fitting data with very small alpha may cause precision problems.  ConvergenceWarning)Lasso is finishedD:\Software\Anaconda\lib\site-packages\sklearn\linear_model\coordinate_descent.py:492: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Fitting data with very small alpha may cause precision problems.  ConvergenceWarning)</code></pre><h3 id="4️⃣-1️⃣-2️⃣-三种方法的对比"><a href="#4️⃣-1️⃣-2️⃣-三种方法的对比" class="headerlink" title="4️⃣.1️⃣.2️⃣ 三种方法的对比"></a>4️⃣.1️⃣.2️⃣ 三种方法的对比</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">result = pd.DataFrame(result)</span><br><span class="line">result.index = [<span class="string">'cv'</span> + str(x) <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">6</span>)]</span><br><span class="line">result</span><br></pre></td></tr></tbody></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>LinearRegression</th>      <th>Ridge</th>      <th>Lasso</th>    </tr>  </thead>  <tbody>    <tr>      <td>cv1</td>      <td>0.208238</td>      <td>0.213319</td>      <td>0.394868</td>    </tr>    <tr>      <td>cv2</td>      <td>0.212408</td>      <td>0.216857</td>      <td>0.387564</td>    </tr>    <tr>      <td>cv3</td>      <td>0.215933</td>      <td>0.220840</td>      <td>0.402278</td>    </tr>    <tr>      <td>cv4</td>      <td>0.210742</td>      <td>0.215001</td>      <td>0.396664</td>    </tr>    <tr>      <td>cv5</td>      <td>0.214747</td>      <td>0.220031</td>      <td>0.397400</td>    </tr>  </tbody></table></div><p>1.纯<code>LinearRegression</code>方法的情况：<code>.intercept_</code>是截距（与y轴的交点）即$\theta_0$，<code>.coef_</code>是模型的斜率即$\theta_1 - \theta_n$</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">model = LinearRegression().fit(train_X, train_y_ln)</span><br><span class="line">print(<span class="string">'intercept:'</span>+ str(model.intercept_)) <span class="comment"># 截距（与y轴的交点）</span></span><br><span class="line">sns.barplot(abs(model.coef_), continuous_feature_names)</span><br></pre></td></tr></tbody></table></figure><pre><code>intercept:22.23769348625359<matplotlib.axes._subplots.AxesSubplot at 0x210418e4d68></code></pre><p><img src="https://img-blog.csdnimg.cn/20200505184953854.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0V4Y2FsaWJ1clVsaW1pdGVk,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>纯<code>LinearRegression</code>回归可以发现，得到的参数列表是比较稀疏的。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model.coef_</span><br></pre></td></tr></tbody></table></figure><pre><code>array([-3.73489972e-09, -6.10060860e-08,  7.40515349e-03, -1.88182450e-03,       -1.24570527e-04,  3.63911807e-04, -3.32722751e-02, -2.75710825e-01,       -1.43048695e-03, -3.28514719e-03,  8.57926933e-02,  5.66930260e+00,        8.27635812e-01,  4.09620867e-01, -6.72467882e-01,  4.24497013e+00,       -3.15038152e+02, -1.17801777e+00, -8.30861129e+01,  6.01215351e-01,        9.25141289e-01, -1.32345773e+00,  1.20182089e+00,  1.10218030e+00,       -2.59470516e-02,  8.88178420e-13, -2.92746484e-05, -3.63331132e-03,       -1.63354329e-07,  5.68181101e-05,  1.29502381e-04, -2.97497182e-05,        2.21512681e-09,  4.26377388e-05, -1.18112552e-04,  1.35814944e-02])</code></pre><p>2.<code>Lasso</code>方法即L1正则化的情况：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">model = Lasso().fit(train_X, train_y_ln)</span><br><span class="line">print(<span class="string">'intercept:'</span>+ str(model.intercept_))</span><br><span class="line">sns.barplot(abs(model.coef_), continuous_feature_names)</span><br></pre></td></tr></tbody></table></figure><pre><code>intercept:7.946156528722565D:\Software\Anaconda\lib\site-packages\sklearn\linear_model\coordinate_descent.py:492: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Fitting data with very small alpha may cause precision problems.  ConvergenceWarning)<matplotlib.axes._subplots.AxesSubplot at 0x210405debe0></code></pre><p><img src="https://img-blog.csdnimg.cn/20200505185004284.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0V4Y2FsaWJ1clVsaW1pdGVk,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>L1正则化有助于生成一个稀疏权值矩阵，进而可以用于特征选择。如上图，我们发现power与userd_time特征非常重要。</p><p>3.<code>Ridge</code>方法即L2正则化的情况：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">model = Ridge().fit(train_X, train_y_ln)</span><br><span class="line">print(<span class="string">'intercept:'</span>+ str(model.intercept_))</span><br><span class="line">sns.barplot(abs(model.coef_), continuous_feature_names)</span><br></pre></td></tr></tbody></table></figure><pre><code>intercept:2.7820015512913994<matplotlib.axes._subplots.AxesSubplot at 0x2103fdd99b0></code></pre><p><img src="https://img-blog.csdnimg.cn/20200505185010853.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0V4Y2FsaWJ1clVsaW1pdGVk,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>从上图可以看到有很多参数离0较远，很多为0。</p><p>原因在于L2正则化在拟合过程中通常都倾向于让权值尽可能小，最后构造一个所有参数都比较小的模型。因为一般认为参数值小的模型比较简单，能适应不同的数据集，也在一定程度上避免了过拟合现象。</p><p>可以设想一下对于一个线性回归方程，若参数很大，那么只要数据偏移一点点，就会对结果造成很大的影响；但如果参数足够小，数据偏移得多一点也不会对结果造成什么影响，专业一点的说法是『抗扰动能力强』</p><p>除此之外，决策树通过信息熵或GINI指数选择分裂节点时，优先选择的分裂特征也更加重要，这同样是一种特征选择的方法。XGBoost与LightGBM模型中的model_importance指标正是基于此计算的</p><h2 id="4️⃣-2️⃣-非线性模型"><a href="#4️⃣-2️⃣-非线性模型" class="headerlink" title="4️⃣.2️⃣ 非线性模型"></a>4️⃣.2️⃣ 非线性模型</h2><p>  支持向量机，决策树，随机森林，梯度提升树(GBDT)，多层感知机(MLP)，XGBoost，LightGBM等</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression</span><br><span class="line"><span class="keyword">from</span> sklearn.svm <span class="keyword">import</span> SVC</span><br><span class="line"><span class="keyword">from</span> sklearn.tree <span class="keyword">import</span> DecisionTreeRegressor</span><br><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> RandomForestRegressor</span><br><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> GradientBoostingRegressor</span><br><span class="line"><span class="keyword">from</span> sklearn.neural_network <span class="keyword">import</span> MLPRegressor</span><br><span class="line"><span class="keyword">from</span> xgboost.sklearn <span class="keyword">import</span> XGBRegressor</span><br><span class="line"><span class="keyword">from</span> lightgbm.sklearn <span class="keyword">import</span> LGBMRegressor</span><br></pre></td></tr></tbody></table></figure><p>定义模型集合</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">models = [LinearRegression(),</span><br><span class="line">          DecisionTreeRegressor(),</span><br><span class="line">          RandomForestRegressor(),</span><br><span class="line">          GradientBoostingRegressor(),</span><br><span class="line">          MLPRegressor(solver=<span class="string">'lbfgs'</span>, max_iter=<span class="number">100</span>), </span><br><span class="line">          XGBRegressor(n_estimators = <span class="number">100</span>, objective=<span class="string">'reg:squarederror'</span>), </span><br><span class="line">          LGBMRegressor(n_estimators = <span class="number">100</span>)]</span><br></pre></td></tr></tbody></table></figure><p>用数据一一对模型进行训练</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">result = dict()</span><br><span class="line"><span class="keyword">for</span> model <span class="keyword">in</span> models:</span><br><span class="line">    model_name = str(model).split(<span class="string">'('</span>)[<span class="number">0</span>]</span><br><span class="line">    scores = cross_val_score(model, X=train_X, y=train_y_ln, verbose=<span class="number">0</span>, cv = <span class="number">5</span>, scoring=make_scorer(mean_absolute_error))</span><br><span class="line">    result[model_name] = scores</span><br><span class="line">    print(model_name + <span class="string">' is finished'</span>)</span><br></pre></td></tr></tbody></table></figure><pre><code>LinearRegression is finishedDecisionTreeRegressor is finishedRandomForestRegressor is finishedGradientBoostingRegressor is finishedMLPRegressor is finishedXGBRegressor is finishedLGBMRegressor is finished</code></pre><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">result = pd.DataFrame(result)</span><br><span class="line">result.index = [<span class="string">'cv'</span> + str(x) <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">6</span>)]</span><br><span class="line">result</span><br></pre></td></tr></tbody></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>LinearRegression</th>      <th>DecisionTreeRegressor</th>      <th>RandomForestRegressor</th>      <th>GradientBoostingRegressor</th>      <th>MLPRegressor</th>      <th>XGBRegressor</th>      <th>LGBMRegressor</th>    </tr>  </thead>  <tbody>    <tr>      <td>cv1</td>      <td>0.208238</td>      <td>0.224863</td>      <td>0.163196</td>      <td>0.179385</td>      <td>581.596878</td>      <td>0.155881</td>      <td>0.153942</td>    </tr>    <tr>      <td>cv2</td>      <td>0.212408</td>      <td>0.218795</td>      <td>0.164292</td>      <td>0.183759</td>      <td>182.180288</td>      <td>0.158566</td>      <td>0.160262</td>    </tr>    <tr>      <td>cv3</td>      <td>0.215933</td>      <td>0.216482</td>      <td>0.164849</td>      <td>0.185005</td>      <td>250.668763</td>      <td>0.158520</td>      <td>0.159943</td>    </tr>    <tr>      <td>cv4</td>      <td>0.210742</td>      <td>0.220903</td>      <td>0.160878</td>      <td>0.181660</td>      <td>139.101476</td>      <td>0.156608</td>      <td>0.157528</td>    </tr>    <tr>      <td>cv5</td>      <td>0.214747</td>      <td>0.226087</td>      <td>0.164713</td>      <td>0.183704</td>      <td>108.664261</td>      <td>0.173250</td>      <td>0.157149</td>    </tr>  </tbody></table></div><p>可以看到随机森林模型在每一个fold中均取得了更好的效果</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.mean(result[<span class="string">'RandomForestRegressor'</span>])</span><br></pre></td></tr></tbody></table></figure><pre><code>0.16358568277026037</code></pre><h2 id="4️⃣-3️⃣-模型调参"><a href="#4️⃣-3️⃣-模型调参" class="headerlink" title="4️⃣.3️⃣ 模型调参"></a>4️⃣.3️⃣ 模型调参</h2><p>  三种常用的调参方法如下：</p><p>贪心算法 <a href="https://www.jianshu.com/p/ab89df9759c8" target="_blank" rel="noopener">https://www.jianshu.com/p/ab89df9759c8</a><br><br>网格调参 <a href="https://blog.csdn.net/weixin_43172660/article/details/83032029" target="_blank" rel="noopener">https://blog.csdn.net/weixin_43172660/article/details/83032029</a><br><br>贝叶斯调参 <a href="https://blog.csdn.net/linxid/article/details/81189154" target="_blank" rel="noopener">https://blog.csdn.net/linxid/article/details/81189154</a><br></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## LGB的参数集合：</span></span><br><span class="line"></span><br><span class="line">objective = [<span class="string">'regression'</span>, <span class="string">'regression_l1'</span>, <span class="string">'mape'</span>, <span class="string">'huber'</span>, <span class="string">'fair'</span>]</span><br><span class="line"></span><br><span class="line">num_leaves = [<span class="number">3</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">15</span>,<span class="number">20</span>,<span class="number">40</span>, <span class="number">55</span>]</span><br><span class="line">max_depth = [<span class="number">3</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">15</span>,<span class="number">20</span>,<span class="number">40</span>, <span class="number">55</span>]</span><br><span class="line">bagging_fraction = []</span><br><span class="line">feature_fraction = []</span><br><span class="line">drop_rate = []</span><br></pre></td></tr></tbody></table></figure><h3 id="4️⃣-3️⃣-1️⃣-贪心调参"><a href="#4️⃣-3️⃣-1️⃣-贪心调参" class="headerlink" title="4️⃣.3️⃣.1️⃣ 贪心调参"></a>4️⃣.3️⃣.1️⃣ 贪心调参</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">best_obj = dict()</span><br><span class="line"><span class="keyword">for</span> obj <span class="keyword">in</span> objective:</span><br><span class="line">    model = LGBMRegressor(objective=obj)</span><br><span class="line">    score = np.mean(cross_val_score(model, X=train_X, y=train_y_ln, verbose=<span class="number">0</span>, cv = <span class="number">5</span>, scoring=make_scorer(mean_absolute_error)))</span><br><span class="line">    best_obj[obj] = score</span><br><span class="line">    </span><br><span class="line">best_leaves = dict()</span><br><span class="line"><span class="keyword">for</span> leaves <span class="keyword">in</span> num_leaves:</span><br><span class="line">    model = LGBMRegressor(objective=min(best_obj.items(), key=<span class="keyword">lambda</span> x:x[<span class="number">1</span>])[<span class="number">0</span>], num_leaves=leaves)</span><br><span class="line">    score = np.mean(cross_val_score(model, X=train_X, y=train_y_ln, verbose=<span class="number">0</span>, cv = <span class="number">5</span>, scoring=make_scorer(mean_absolute_error)))</span><br><span class="line">    best_leaves[leaves] = score</span><br><span class="line">    </span><br><span class="line">best_depth = dict()</span><br><span class="line"><span class="keyword">for</span> depth <span class="keyword">in</span> max_depth:</span><br><span class="line">    model = LGBMRegressor(objective=min(best_obj.items(), key=<span class="keyword">lambda</span> x:x[<span class="number">1</span>])[<span class="number">0</span>],</span><br><span class="line">                          num_leaves=min(best_leaves.items(), key=<span class="keyword">lambda</span> x:x[<span class="number">1</span>])[<span class="number">0</span>],</span><br><span class="line">                          max_depth=depth)</span><br><span class="line">    score = np.mean(cross_val_score(model, X=train_X, y=train_y_ln, verbose=<span class="number">0</span>, cv = <span class="number">5</span>, scoring=make_scorer(mean_absolute_error)))</span><br><span class="line">    best_depth[depth] = score</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.lineplot(x=[<span class="string">'0_initial'</span>,<span class="string">'1_turning_obj'</span>,<span class="string">'2_turning_leaves'</span>,<span class="string">'3_turning_depth'</span>], y=[<span class="number">0.143</span> ,min(best_obj.values()), min(best_leaves.values()), min(best_depth.values())])</span><br></pre></td></tr></tbody></table></figure><pre><code><matplotlib.axes._subplots.AxesSubplot at 0x21041776128></code></pre><p><img src="https://img-blog.csdnimg.cn/20200505185018549.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0V4Y2FsaWJ1clVsaW1pdGVk,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="4️⃣-3️⃣-2️⃣-Grid-Search-网格调参"><a href="#4️⃣-3️⃣-2️⃣-Grid-Search-网格调参" class="headerlink" title="4️⃣.3️⃣.2️⃣ Grid Search 网格调参"></a>4️⃣.3️⃣.2️⃣ Grid Search 网格调参</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> GridSearchCV</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">parameters = {<span class="string">'objective'</span>: objective , <span class="string">'num_leaves'</span>: num_leaves, <span class="string">'max_depth'</span>: max_depth}</span><br><span class="line">model = LGBMRegressor()</span><br><span class="line">clf = GridSearchCV(model, parameters, cv=<span class="number">5</span>)</span><br><span class="line">clf = clf.fit(train_X, train_y)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clf.best_params_</span><br></pre></td></tr></tbody></table></figure><pre><code>{'max_depth': 10, 'num_leaves': 55, 'objective': 'regression'}</code></pre><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">model = LGBMRegressor(objective=<span class="string">'regression'</span>,</span><br><span class="line">                          num_leaves=<span class="number">55</span>,</span><br><span class="line">                          max_depth=<span class="number">10</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.mean(cross_val_score(model, X=train_X, y=train_y_ln, verbose=<span class="number">0</span>, cv = <span class="number">5</span>, scoring=make_scorer(mean_absolute_error)))</span><br></pre></td></tr></tbody></table></figure><pre><code>0.1526351038235066</code></pre><h3 id="4️⃣-3️⃣-3️⃣-贝叶斯调参"><a href="#4️⃣-3️⃣-3️⃣-贝叶斯调参" class="headerlink" title="4️⃣.3️⃣.3️⃣ 贝叶斯调参"></a>4️⃣.3️⃣.3️⃣ 贝叶斯调参</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">!pip install -i https://pypi.tuna.tsinghua.edu.cn/simple bayesian-optimization</span><br><span class="line"><span class="keyword">from</span> bayes_opt <span class="keyword">import</span> BayesianOptimization</span><br></pre></td></tr></tbody></table></figure><pre><code>Looking in indexes: https://pypi.tuna.tsinghua.edu.cn/simpleCollecting bayesian-optimization  Downloading https://pypi.tuna.tsinghua.edu.cn/packages/b5/26/9842333adbb8f17bcb3d699400a8b1ccde0af0b6de8d07224e183728acdf/bayesian_optimization-1.1.0-py3-none-any.whlRequirement already satisfied: scikit-learn>=0.18.0 in d:\software\anaconda\lib\site-packages (from bayesian-optimization) (0.20.3)Requirement already satisfied: scipy>=0.14.0 in d:\software\anaconda\lib\site-packages (from bayesian-optimization) (1.2.1)Requirement already satisfied: numpy>=1.9.0 in d:\software\anaconda\lib\site-packages (from bayesian-optimization) (1.16.2)Installing collected packages: bayesian-optimizationSuccessfully installed bayesian-optimization-1.1.0</code></pre><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rf_cv</span><span class="params">(num_leaves, max_depth, subsample, min_child_samples)</span>:</span></span><br><span class="line">    val = cross_val_score(</span><br><span class="line">        LGBMRegressor(objective = <span class="string">'regression_l1'</span>,</span><br><span class="line">            num_leaves=int(num_leaves),</span><br><span class="line">            max_depth=int(max_depth),</span><br><span class="line">            subsample = subsample,</span><br><span class="line">            min_child_samples = int(min_child_samples)</span><br><span class="line">        ),</span><br><span class="line">        X=train_X, y=train_y_ln, verbose=<span class="number">0</span>, cv = <span class="number">5</span>, scoring=make_scorer(mean_absolute_error)</span><br><span class="line">    ).mean()</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> - val <span class="comment"># 贝叶斯调参目标是求最大值，所以用1减去误差</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">rf_bo = BayesianOptimization(</span><br><span class="line">    rf_cv,</span><br><span class="line">    {</span><br><span class="line">    <span class="string">'num_leaves'</span>: (<span class="number">2</span>, <span class="number">100</span>),</span><br><span class="line">    <span class="string">'max_depth'</span>: (<span class="number">2</span>, <span class="number">100</span>),</span><br><span class="line">    <span class="string">'subsample'</span>: (<span class="number">0.1</span>, <span class="number">1</span>),</span><br><span class="line">    <span class="string">'min_child_samples'</span> : (<span class="number">2</span>, <span class="number">100</span>)</span><br><span class="line">    }</span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rf_bo.maximize()</span><br></pre></td></tr></tbody></table></figure><pre><code>|   iter    |  target   | max_depth | min_ch... | num_le... | subsample |-------------------------------------------------------------------------| [0m 1       [0m | [0m 0.8493  [0m | [0m 80.61   [0m | [0m 97.58   [0m | [0m 44.92   [0m | [0m 0.881   [0m || [95m 2       [0m | [95m 0.8514  [0m | [95m 35.87   [0m | [95m 66.92   [0m | [95m 57.68   [0m | [95m 0.7878  [0m || [95m 3       [0m | [95m 0.8522  [0m | [95m 49.75   [0m | [95m 68.95   [0m | [95m 64.99   [0m | [95m 0.1726  [0m || [0m 4       [0m | [0m 0.8504  [0m | [0m 35.58   [0m | [0m 10.83   [0m | [0m 53.8    [0m | [0m 0.1306  [0m || [0m 5       [0m | [0m 0.7942  [0m | [0m 63.37   [0m | [0m 32.21   [0m | [0m 3.143   [0m | [0m 0.4555  [0m || [0m 6       [0m | [0m 0.7997  [0m | [0m 2.437   [0m | [0m 4.362   [0m | [0m 97.26   [0m | [0m 0.9957  [0m || [95m 7       [0m | [95m 0.8526  [0m | [95m 47.85   [0m | [95m 69.39   [0m | [95m 68.02   [0m | [95m 0.8833  [0m || [95m 8       [0m | [95m 0.8537  [0m | [95m 96.87   [0m | [95m 4.285   [0m | [95m 99.53   [0m | [95m 0.9389  [0m || [95m 9       [0m | [95m 0.8546  [0m | [95m 96.06   [0m | [95m 97.85   [0m | [95m 98.82   [0m | [95m 0.8874  [0m || [0m 10      [0m | [0m 0.7942  [0m | [0m 8.165   [0m | [0m 99.06   [0m | [0m 3.93    [0m | [0m 0.2049  [0m || [0m 11      [0m | [0m 0.7993  [0m | [0m 2.77    [0m | [0m 99.47   [0m | [0m 91.16   [0m | [0m 0.2523  [0m || [0m 12      [0m | [0m 0.852   [0m | [0m 99.3    [0m | [0m 43.04   [0m | [0m 62.67   [0m | [0m 0.9897  [0m || [0m 13      [0m | [0m 0.8507  [0m | [0m 96.57   [0m | [0m 2.749   [0m | [0m 55.2    [0m | [0m 0.6727  [0m || [0m 14      [0m | [0m 0.8168  [0m | [0m 3.076   [0m | [0m 3.269   [0m | [0m 33.78   [0m | [0m 0.5982  [0m || [0m 15      [0m | [0m 0.8527  [0m | [0m 71.88   [0m | [0m 7.624   [0m | [0m 76.49   [0m | [0m 0.9536  [0m || [0m 16      [0m | [0m 0.8528  [0m | [0m 99.44   [0m | [0m 99.28   [0m | [0m 69.58   [0m | [0m 0.7682  [0m || [0m 17      [0m | [0m 0.8543  [0m | [0m 99.93   [0m | [0m 45.95   [0m | [0m 97.54   [0m | [0m 0.5095  [0m || [0m 18      [0m | [0m 0.8518  [0m | [0m 60.87   [0m | [0m 99.67   [0m | [0m 61.3    [0m | [0m 0.7369  [0m || [0m 19      [0m | [0m 0.8535  [0m | [0m 99.69   [0m | [0m 16.58   [0m | [0m 84.31   [0m | [0m 0.1025  [0m || [0m 20      [0m | [0m 0.8507  [0m | [0m 54.68   [0m | [0m 38.11   [0m | [0m 54.65   [0m | [0m 0.9796  [0m || [0m 21      [0m | [0m 0.8538  [0m | [0m 99.1    [0m | [0m 81.79   [0m | [0m 84.03   [0m | [0m 0.9823  [0m || [0m 22      [0m | [0m 0.8529  [0m | [0m 99.28   [0m | [0m 3.373   [0m | [0m 83.48   [0m | [0m 0.7243  [0m || [0m 23      [0m | [0m 0.8512  [0m | [0m 52.67   [0m | [0m 2.614   [0m | [0m 59.65   [0m | [0m 0.5286  [0m || [95m 24      [0m | [95m 0.8546  [0m | [95m 75.81   [0m | [95m 61.62   [0m | [95m 99.78   [0m | [95m 0.9956  [0m || [0m 25      [0m | [0m 0.853   [0m | [0m 45.9    [0m | [0m 33.68   [0m | [0m 74.59   [0m | [0m 0.73    [0m || [0m 26      [0m | [0m 0.8532  [0m | [0m 82.58   [0m | [0m 63.9    [0m | [0m 78.61   [0m | [0m 0.1014  [0m || [0m 27      [0m | [0m 0.8544  [0m | [0m 76.15   [0m | [0m 97.58   [0m | [0m 95.07   [0m | [0m 0.9995  [0m || [0m 28      [0m | [0m 0.8545  [0m | [0m 95.75   [0m | [0m 74.96   [0m | [0m 99.45   [0m | [0m 0.7263  [0m || [0m 29      [0m | [0m 0.8532  [0m | [0m 80.84   [0m | [0m 89.28   [0m | [0m 77.31   [0m | [0m 0.9389  [0m || [0m 30      [0m | [0m 0.8545  [0m | [0m 82.92   [0m | [0m 35.46   [0m | [0m 96.66   [0m | [0m 0.969   [0m |=========================================================================</code></pre><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rf_bo.max</span><br></pre></td></tr></tbody></table></figure><pre><code>{'target': 0.8545792238909576, 'params': {'max_depth': 75.80893509302794,  'min_child_samples': 61.62267920507557,  'num_leaves': 99.77501502667806,  'subsample': 0.9955706357612557}}</code></pre><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> - rf_bo.max[<span class="string">'target'</span>]</span><br></pre></td></tr></tbody></table></figure><pre><code>0.14542077610904236</code></pre><h1 id="5️⃣-总结"><a href="#5️⃣-总结" class="headerlink" title="5️⃣ 总结"></a>5️⃣ 总结</h1><p>  在本章中，我们完成了建模与调参的工作，并对我们的模型进行了验证。此外，我们还采用了一些基本方法来提高预测的精度，提升如下图所示。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">13</span>,<span class="number">5</span>))</span><br><span class="line">sns.lineplot(x=[<span class="string">'0_origin'</span>,<span class="string">'1_log_transfer'</span>,<span class="string">'2_L1_&_L2'</span>,<span class="string">'3_change_model'</span>,<span class="string">'4_parameter_turning'</span>], y=[<span class="number">1.36</span> ,<span class="number">0.19</span>, <span class="number">0.19</span>, <span class="number">0.16</span>, <span class="number">0.15</span>])</span><br></pre></td></tr></tbody></table></figure><pre><code><matplotlib.axes._subplots.AxesSubplot at 0x21041688208></code></pre><p><img src="https://img-blog.csdnimg.cn/20200505185026643.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0V4Y2FsaWJ1clVsaW1pdGVk,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;天池数据挖掘，组对学习系列，系统地各种算法的杂糅。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="https://kemo.xyz/categories/Algorithm/"/>
    
    
      <category term="pandas" scheme="https://kemo.xyz/tags/pandas/"/>
    
      <category term="Editor" scheme="https://kemo.xyz/tags/Editor/"/>
    
      <category term="DataMining" scheme="https://kemo.xyz/tags/DataMining/"/>
    
      <category term="Tianchi" scheme="https://kemo.xyz/tags/Tianchi/"/>
    
      <category term="Study" scheme="https://kemo.xyz/tags/Study/"/>
    
      <category term="Jupyter" scheme="https://kemo.xyz/tags/Jupyter/"/>
    
      <category term="seaborn" scheme="https://kemo.xyz/tags/seaborn/"/>
    
      <category term="内存优化" scheme="https://kemo.xyz/tags/%E5%86%85%E5%AD%98%E4%BC%98%E5%8C%96/"/>
    
      <category term="五折交叉验证" scheme="https://kemo.xyz/tags/%E4%BA%94%E6%8A%98%E4%BA%A4%E5%8F%89%E9%AA%8C%E8%AF%81/"/>
    
      <category term="cross validation" scheme="https://kemo.xyz/tags/cross-validation/"/>
    
      <category term="Linear Regression" scheme="https://kemo.xyz/tags/Linear-Regression/"/>
    
      <category term="Ridge正则化" scheme="https://kemo.xyz/tags/Ridge%E6%AD%A3%E5%88%99%E5%8C%96/"/>
    
      <category term="Lasso正则化" scheme="https://kemo.xyz/tags/Lasso%E6%AD%A3%E5%88%99%E5%8C%96/"/>
    
      <category term="svm" scheme="https://kemo.xyz/tags/svm/"/>
    
      <category term="决策树" scheme="https://kemo.xyz/tags/%E5%86%B3%E7%AD%96%E6%A0%91/"/>
    
      <category term="随机森林" scheme="https://kemo.xyz/tags/%E9%9A%8F%E6%9C%BA%E6%A3%AE%E6%9E%97/"/>
    
      <category term="梯度提升树(GBDT)" scheme="https://kemo.xyz/tags/%E6%A2%AF%E5%BA%A6%E6%8F%90%E5%8D%87%E6%A0%91-GBDT/"/>
    
      <category term="多层感知机(MLP)" scheme="https://kemo.xyz/tags/%E5%A4%9A%E5%B1%82%E6%84%9F%E7%9F%A5%E6%9C%BA-MLP/"/>
    
      <category term="XGBoost" scheme="https://kemo.xyz/tags/XGBoost/"/>
    
      <category term="LightGBM" scheme="https://kemo.xyz/tags/LightGBM/"/>
    
      <category term="贪心调参" scheme="https://kemo.xyz/tags/%E8%B4%AA%E5%BF%83%E8%B0%83%E5%8F%82/"/>
    
      <category term="网格调参" scheme="https://kemo.xyz/tags/%E7%BD%91%E6%A0%BC%E8%B0%83%E5%8F%82/"/>
    
      <category term="贝叶斯调参" scheme="https://kemo.xyz/tags/%E8%B4%9D%E5%8F%B6%E6%96%AF%E8%B0%83%E5%8F%82/"/>
    
  </entry>
  
  <entry>
    <title>一文解决--matplotlib绘制极坐标热力图并插值优化</title>
    <link href="https://kemo.xyz/%E4%B8%80%E6%96%87%E8%A7%A3%E5%86%B3-matplotlib%E7%BB%98%E5%88%B6%E6%9E%81%E5%9D%90%E6%A0%87%E7%83%AD%E5%8A%9B%E5%9B%BE%E5%B9%B6%E6%8F%92%E5%80%BC%E4%BC%98%E5%8C%96.html"/>
    <id>https://kemo.xyz/一文解决-matplotlib绘制极坐标热力图并插值优化.html</id>
    <published>2020-05-12T18:50:41.000Z</published>
    <updated>2020-05-12T19:27:17.618Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>图画的好看，文看的舒心。<br><a id="more"></a></p><h1 id="0️⃣-前言"><a href="#0️⃣-前言" class="headerlink" title="0️⃣ 前言"></a>0️⃣ 前言</h1><p>  又到了毕业季，学弟学妹们开始了毕设之旅，提到毕设想到了什么呢？对，没错，必备技巧就是绘制各种精美绝伦，举世无双的高清美图。这不，我刚炖了碗鲜美的极坐标热力图气象图汤。😢<br>  如下：<br><img src="https://img-blog.csdnimg.cn/20200501214945596.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0V4Y2FsaWJ1clVsaW1pdGVk,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200501215017477.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0V4Y2FsaWJ1clVsaW1pdGVk,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h1 id="1️⃣-数据准备"><a href="#1️⃣-数据准备" class="headerlink" title="1️⃣ 数据准备"></a>1️⃣ 数据准备</h1><p>  数据可以是随机产生，或者放在<code>csv</code>文件中读。在<code>csv</code>中存储格式如下：<br>| pos | 0            | 30           | 60           | 90           |<br>|——-|———————|———————|———————|———————|<br>| 0   | 1.101447148 | 1.308827831 | 1.526038083 | 1.603848713 |<br>| 30  | 1.101447148 | 1.279591136 | 1.49432297  | 1.577829862 |<br>| 60  | 1.101447148 | 1.204513965 | 1.435064241 | 1.52576792  |<br>| 90  | 1.101447148 | 1.108569817 | 1.404547306 | 1.499676995 |<br>| 120 | 1.101447148 | 1.204513965 | 1.435064241 | 1.52576792  |<br>| 150 | 1.101447148 | 1.279591136 | 1.49432297  | 1.577829862 |<br>| 180 | 1.101447148 | 1.308827831 | 1.526038083 | 1.603848713 |<br>| 210 | 1.101447148 | 1.279591136 | 1.49432297  | 1.577829862 |<br>| 240 | 1.101447148 | 1.204513965 | 1.435064241 | 1.52576792  |<br>| 270 | 1.101447148 | 1.108569817 | 1.404547306 | 1.499676995 |<br>| 300 | 1.101447148 | 1.204513965 | 1.435064241 | 1.52576792  |<br>| 330 | 1.101447148 | 1.279591136 | 1.49432297  | 1.577829862 |<br>| 360 | 1.101447148 | 1.308827831 | 1.526038083 | 1.603848713 |</p><p>  因为要绘制的是极坐标图，所以列名代表的就是弧度，而行名代表的就是半径。<br>csv文件下载：<a href="https://blog-1259799643.cos.ap-shanghai.myqcloud.com/2020-05-01-data.csv" target="_blank" rel="noopener">data.csv</a>，下载后复制成四份，分别命名为<code>data1.csv</code>，<code>data2.csv</code>，<code>data3.csv</code>，<code>data4.csv</code>。</p><h1 id="2️⃣-代码"><a href="#2️⃣-代码" class="headerlink" title="2️⃣ 代码"></a>2️⃣ 代码</h1><h2 id="2️⃣-1️⃣-导入需要的包"><a href="#2️⃣-1️⃣-导入需要的包" class="headerlink" title="2️⃣.1️⃣ 导入需要的包"></a>2️⃣.1️⃣ 导入需要的包</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> scipy.interpolate <span class="keyword">import</span> interp2d <span class="comment"># 后面需要的插值库</span></span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br></pre></td></tr></tbody></table></figure><h2 id="2️⃣-2️⃣-从csv文件中读取数据"><a href="#2️⃣-2️⃣-从csv文件中读取数据" class="headerlink" title="2️⃣.2️⃣ 从csv文件中读取数据"></a>2️⃣.2️⃣ 从<code>csv</code>文件中读取数据</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">data1 = pd.read_csv(<span class="string">'data1.csv'</span>)</span><br><span class="line">data2 = pd.read_csv(<span class="string">'data2.csv'</span>)</span><br><span class="line">data3 = pd.read_csv(<span class="string">'data3.csv'</span>)</span><br><span class="line">data4 = pd.read_csv(<span class="string">'data4.csv'</span>)</span><br><span class="line">data = [data1, data2, data3, data4]</span><br><span class="line">pos = np.array(data[<span class="string">'pos'</span>]/<span class="number">180</span>*np.pi)</span><br><span class="line">ind = np.array(data.columns[<span class="number">1</span>:], dtype=np.int)</span><br><span class="line">values = np.array(data[ind.astype(<span class="string">'str'</span>)])</span><br></pre></td></tr></tbody></table></figure><h2 id="2️⃣-3️⃣-随机产生数据"><a href="#2️⃣-3️⃣-随机产生数据" class="headerlink" title="2️⃣.3️⃣ 随机产生数据"></a>2️⃣.3️⃣ 随机产生数据</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pos = np.radians(np.linspace(<span class="number">0</span>, <span class="number">360</span>, <span class="number">30</span>))</span><br><span class="line">ind = np.arange(<span class="number">0</span>, <span class="number">90</span>, <span class="number">10</span>)</span><br><span class="line">values = np.random.random((pos.size, ind.size))</span><br></pre></td></tr></tbody></table></figure><h2 id="2️⃣-4️⃣-全部代码-方便大家直接复制运行"><a href="#2️⃣-4️⃣-全部代码-方便大家直接复制运行" class="headerlink" title="2️⃣.4️⃣ 全部代码(方便大家直接复制运行)"></a>2️⃣.4️⃣ 全部代码(方便大家直接复制运行)</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> scipy.interpolate <span class="keyword">import</span> interp2d</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">data1 = pd.read_csv(<span class="string">'data1.csv'</span>)</span><br><span class="line">data2 = pd.read_csv(<span class="string">'data2.csv'</span>)</span><br><span class="line">data3 = pd.read_csv(<span class="string">'data3.csv'</span>)</span><br><span class="line">data4 = pd.read_csv(<span class="string">'data4.csv'</span>)</span><br><span class="line">data = [data1, data2, data3, data4]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_weather_heatmap</span><span class="params">(dataList, title)</span>:</span></span><br><span class="line">    plt.figure(figsize=(<span class="number">25</span>, <span class="number">25</span>))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(dataList)):</span><br><span class="line">        data = dataList[i]</span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        方法一：从csv文件中读取数据</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># pos = np.array(data['pos']/180*np.pi)</span></span><br><span class="line">        <span class="comment"># ind = np.array(data.columns[1:], dtype=np.int)</span></span><br><span class="line">        <span class="comment"># values = np.array(data[ind.astype('str')])</span></span><br><span class="line">        </span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        方法二：随机产生数据</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        pos = np.radians(np.linspace(<span class="number">0</span>, <span class="number">360</span>, <span class="number">30</span>))</span><br><span class="line">        ind = np.arange(<span class="number">0</span>, <span class="number">90</span>, <span class="number">10</span>)</span><br><span class="line">        values = np.random.random((pos.size, ind.size))</span><br><span class="line"></span><br><span class="line">        <span class="comment">#计算插值函数</span></span><br><span class="line">        func = interp2d(pos, ind, values.T, kind=<span class="string">'cubic'</span>)</span><br><span class="line">        tnew = np.linspace(<span class="number">0</span>, <span class="number">2</span>*np.pi, <span class="number">200</span>)  <span class="comment"># theta</span></span><br><span class="line">        <span class="comment">#绘图数据点</span></span><br><span class="line">        rnew = np.linspace(<span class="number">0</span>, <span class="number">90</span>, <span class="number">100</span>)  <span class="comment"># r</span></span><br><span class="line">        vnew = func(tnew, rnew)</span><br><span class="line">        tnew, rnew = np.meshgrid(tnew, rnew)</span><br><span class="line">        ax = plt.subplot(<span class="number">2</span>, <span class="number">2</span>, i+<span class="number">1</span>, projection=<span class="string">'polar'</span>)</span><br><span class="line">        plt.pcolor(tnew, rnew, vnew, cmap=<span class="string">'jet'</span>)</span><br><span class="line">        plt.grid(c=<span class="string">'black'</span>)</span><br><span class="line">        plt.colorbar()</span><br><span class="line">        ax.set_theta_zero_location(<span class="string">"N"</span>)</span><br><span class="line">        ax.set_theta_direction(<span class="number">-1</span>)</span><br><span class="line">        plt.title(title[i], fontsize=<span class="number">20</span>)</span><br><span class="line">        <span class="comment">#设置坐标标签标注和字体大小</span></span><br><span class="line">        plt.xlabel(<span class="string">' '</span>, fontsize=<span class="number">15</span>)</span><br><span class="line">        plt.ylabel(<span class="string">' '</span>, fontsize=<span class="number">15</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">#设置坐标刻度字体大小</span></span><br><span class="line">        plt.xticks(fontsize=<span class="number">15</span>, rotation=<span class="number">90</span>)</span><br><span class="line">        plt.yticks(fontsize=<span class="number">15</span>)</span><br><span class="line">        <span class="comment"># cb.set_label("Pixel reflectance")</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">title = [<span class="string">'Spring'</span>, <span class="string">'Summer'</span>, <span class="string">'Autumn'</span>, <span class="string">'Winter'</span>]</span><br><span class="line">plot_weather_heatmap(data, title)</span><br><span class="line">plt.savefig(<span class="string">"pic.png"</span>, dpi=<span class="number">300</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><h1 id="3️⃣-cmap参数，为了更好看"><a href="#3️⃣-cmap参数，为了更好看" class="headerlink" title="3️⃣ cmap参数，为了更好看"></a>3️⃣ <code>cmap</code>参数，为了更好看</h1><p>  关于下面这句中的<code>jet</code>参数是指定图的色域，可以更换。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.pcolor(tnew, rnew, vnew, cmap=<span class="string">'jet'</span>)</span><br></pre></td></tr></tbody></table></figure><p>可选值如下</p><p><img src="https://img-blog.csdnimg.cn/20190426151922462.png#pic_center" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20190426151939114.png#pic_center" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20190426152005342.png#pic_center" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20190426152025451.png#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190426152041444.png#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190426152112952.png#pic_center" alt="在这里插入图片描述"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;图画的好看，文看的舒心。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://kemo.xyz/categories/Python/"/>
    
    
      <category term="python" scheme="https://kemo.xyz/tags/python/"/>
    
      <category term="pandas" scheme="https://kemo.xyz/tags/pandas/"/>
    
      <category term="matplotlib" scheme="https://kemo.xyz/tags/matplotlib/"/>
    
      <category term="热力图" scheme="https://kemo.xyz/tags/%E7%83%AD%E5%8A%9B%E5%9B%BE/"/>
    
      <category term="极坐标" scheme="https://kemo.xyz/tags/%E6%9E%81%E5%9D%90%E6%A0%87/"/>
    
      <category term="插值" scheme="https://kemo.xyz/tags/%E6%8F%92%E5%80%BC/"/>
    
      <category term="画图" scheme="https://kemo.xyz/tags/%E7%94%BB%E5%9B%BE/"/>
    
      <category term="气象图" scheme="https://kemo.xyz/tags/%E6%B0%94%E8%B1%A1%E5%9B%BE/"/>
    
      <category term="毕业论文" scheme="https://kemo.xyz/tags/%E6%AF%95%E4%B8%9A%E8%AE%BA%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>利用Selenium秒填朋友圈各种问卷星调查问卷</title>
    <link href="https://kemo.xyz/%E5%88%A9%E7%94%A8Selenium%E7%A7%92%E5%A1%AB%E6%9C%8B%E5%8F%8B%E5%9C%88%E5%90%84%E7%A7%8D%E9%97%AE%E5%8D%B7%E6%98%9F%E8%B0%83%E6%9F%A5%E9%97%AE%E5%8D%B7.html"/>
    <id>https://kemo.xyz/利用Selenium秒填朋友圈各种问卷星调查问卷.html</id>
    <published>2020-05-12T18:46:36.000Z</published>
    <updated>2020-05-12T19:27:02.144Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>这时代没人愿意填调查问卷，纯属无聊。<br><a id="more"></a></p><h1 id="0️⃣-前言"><a href="#0️⃣-前言" class="headerlink" title="0️⃣ 前言"></a>0️⃣ 前言</h1><p>毕业季到了，要开始写论文了，朋友圈各种同学的各种课题的调查问卷，但几乎没什么人填，想帮他们随机填一填。</p><h1 id="1️⃣-实现功能"><a href="#1️⃣-实现功能" class="headerlink" title="1️⃣ 实现功能"></a>1️⃣ 实现功能</h1><ul><li>目前还不算完善，只能填电脑端，手机端需要重新写逻辑，也就是链接里面要改成<code>jq</code>而不是<code>m</code>；</li><li>默认自动填10份，可以在主函数的<code>times</code>里面修改数值；</li><li>问卷链接在<code>FillTheQuestionaire</code>函数里面修改；</li><li>写了代理更换，但没钱换代理，换了代理可以更加真实一点，不然老是一个地区的人填不好。<h1 id="2️⃣-代码"><a href="#2️⃣-代码" class="headerlink" title="2️⃣ 代码"></a>2️⃣ 代码</h1></li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ChangeIP</span><span class="params">()</span>:</span></span><br><span class="line">    page = random.randint(<span class="number">1</span>,<span class="number">4055</span>)</span><br><span class="line">    url = <span class="string">'https://www.xicidaili.com/nn/'</span></span><br><span class="line">    <span class="comment"># url = 'https://www.kuaidaili.com/free/'</span></span><br><span class="line">    driverIP = webdriver.Chrome()</span><br><span class="line">    driverIP.get(url)</span><br><span class="line">    content = driverIP.page_source.encode(<span class="string">'utf-8'</span>)</span><br><span class="line">    html = etree.HTML(content)</span><br><span class="line">    t = html.xpath(<span class="string">"//div[@class='bar']/div[@class='bar_inner fast']"</span>)</span><br><span class="line">    flow = [<span class="string">'99%'</span>,<span class="string">'98%'</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> t:</span><br><span class="line">        <span class="keyword">if</span> i.attrib[<span class="string">'style'</span>].split(<span class="string">":"</span>)[<span class="number">1</span>] <span class="keyword">in</span> flow:</span><br><span class="line">            index = t.index(i)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    driverIP.quit()</span><br><span class="line">    data = pd.read_html(content)</span><br><span class="line">    ipinfo = data[<span class="number">0</span>].values[index]</span><br><span class="line">    <span class="comment"># ipinfo = random.choice(data[0].values)</span></span><br><span class="line">    ip = str(ipinfo[<span class="number">5</span>]).lower() + <span class="string">"://"</span> + str(ipinfo[<span class="number">1</span>]) + <span class="string">":"</span> + str(ipinfo[<span class="number">2</span>])</span><br><span class="line">    <span class="comment"># ip = str(ipinfo[3]).lower() + "://" + str(ipinfo[0]) + ":" + str(ipinfo[1])</span></span><br><span class="line">    <span class="keyword">return</span> ip</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">FillTheQuestionaire</span><span class="params">(times)</span>:</span></span><br><span class="line">    url = <span class="string">'https://www.wjx.cn/jq/74385885.aspx'</span></span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> range(times):</span><br><span class="line">        mobileEmulation = {<span class="string">'deviceName'</span>: <span class="string">'iPhone X'</span>}</span><br><span class="line">        options = webdriver.ChromeOptions()</span><br><span class="line">        options.add_experimental_option(<span class="string">'mobileEmulation'</span>, mobileEmulation)</span><br><span class="line">        <span class="comment"># options = webdriver.ChromeOptions()</span></span><br><span class="line">        <span class="comment"># ip = ChangeIP()</span></span><br><span class="line">        <span class="comment"># print(ip)</span></span><br><span class="line">        <span class="comment"># options.add_argument("--proxy-server=" + ip)</span></span><br><span class="line">        <span class="comment"># driver = webdriver.Chrome(chrome_options=options)</span></span><br><span class="line">        <span class="comment"># if t % 2 == 0:</span></span><br><span class="line">        driver = webdriver.Chrome()</span><br><span class="line">        <span class="comment"># else:</span></span><br><span class="line">        <span class="comment"># driver = webdriver.Chrome(chrome_options=options)</span></span><br><span class="line">        driver.get(url)</span><br><span class="line">        content = driver.page_source.encode(<span class="string">'utf-8'</span>)</span><br><span class="line">        html = etree.HTML(content)</span><br><span class="line">        soup = BeautifulSoup(content, <span class="string">'lxml'</span>)</span><br><span class="line">        NumOfQuestions = len(driver.find_elements_by_xpath(</span><br><span class="line">            <span class="string">"//div[@class='div_question']"</span>))</span><br><span class="line">        <span class="keyword">for</span> quiz <span class="keyword">in</span> range(NumOfQuestions):</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                question = driver.find_elements_by_xpath(<span class="string">"//div[@id='divquestion"</span> + str(</span><br><span class="line">                    quiz + <span class="number">1</span>) + <span class="string">"']//ul[@class='ulradiocheck']//li//a[@class='jqRadio']"</span>)</span><br><span class="line">                random.choice(question).click()</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                tr = driver.find_elements_by_xpath(</span><br><span class="line">                    <span class="string">"//div[@id='divquestion"</span> + str(quiz + <span class="number">1</span>) + <span class="string">"']/table/tbody/tr"</span>)</span><br><span class="line">                <span class="keyword">for</span> t <span class="keyword">in</span> range(len(tr)):</span><br><span class="line">                    button = driver.find_elements_by_xpath(<span class="string">"//div[@id='divquestion"</span> + str(</span><br><span class="line">                        quiz + <span class="number">1</span>) + <span class="string">"']/table/tbody/tr["</span> + str(t + <span class="number">1</span>) + <span class="string">"]/td/a[@class='jqRadio']"</span>)</span><br><span class="line">                    <span class="keyword">try</span>:</span><br><span class="line">                        random.choice(button).click()</span><br><span class="line">                    <span class="keyword">except</span>:</span><br><span class="line">                        <span class="keyword">pass</span></span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                checkbox = driver.find_elements_by_xpath(<span class="string">"//div[@id='divquestion"</span> + str(</span><br><span class="line">                    quiz + <span class="number">1</span>) + <span class="string">"']//ul[@class='ulradiocheck']//li//a[@class='jqCheckbox']"</span>)</span><br><span class="line">                YorN = [x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">2</span>)]</span><br><span class="line">                checkbox[<span class="number">0</span>].click()</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> range(len(checkbox) - <span class="number">2</span>):</span><br><span class="line">                    <span class="keyword">if</span> random.choice(YorN) == <span class="number">1</span>:</span><br><span class="line">                        print(<span class="string">"是"</span>)</span><br><span class="line">                        <span class="keyword">try</span>:</span><br><span class="line">                            checkbox[i+<span class="number">1</span>].click()</span><br><span class="line">                        <span class="keyword">except</span>:</span><br><span class="line">                            <span class="keyword">pass</span></span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">        time.sleep(<span class="number">3</span>)</span><br><span class="line">        driver.find_elements_by_xpath(<span class="string">"//input[@id='submit_button']"</span>)[<span class="number">0</span>].click()</span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br><span class="line">        driver.quit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    times = <span class="number">10</span></span><br><span class="line">    FillTheQuestionaire(times)</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这时代没人愿意填调查问卷，纯属无聊。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Crawler" scheme="https://kemo.xyz/categories/Crawler/"/>
    
    
      <category term="python" scheme="https://kemo.xyz/tags/python/"/>
    
      <category term="pandas" scheme="https://kemo.xyz/tags/pandas/"/>
    
      <category term="Selenium" scheme="https://kemo.xyz/tags/Selenium/"/>
    
      <category term="朋友圈" scheme="https://kemo.xyz/tags/%E6%9C%8B%E5%8F%8B%E5%9C%88/"/>
    
      <category term="问卷星" scheme="https://kemo.xyz/tags/%E9%97%AE%E5%8D%B7%E6%98%9F/"/>
    
      <category term="调查问卷" scheme="https://kemo.xyz/tags/%E8%B0%83%E6%9F%A5%E9%97%AE%E5%8D%B7/"/>
    
  </entry>
  
  <entry>
    <title>从零实现朴素贝叶斯分类器(离散情况)--以学生分班为例</title>
    <link href="https://kemo.xyz/%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0%E6%9C%B4%E7%B4%A0%E8%B4%9D%E5%8F%B6%E6%96%AF%E5%88%86%E7%B1%BB%E5%99%A8-%E7%A6%BB%E6%95%A3%E6%83%85%E5%86%B5-%E4%BB%A5%E5%AD%A6%E7%94%9F%E5%88%86%E7%8F%AD%E4%B8%BA%E4%BE%8B.html"/>
    <id>https://kemo.xyz/从零实现朴素贝叶斯分类器-离散情况-以学生分班为例.html</id>
    <published>2020-05-12T18:43:02.000Z</published>
    <updated>2020-05-12T19:26:08.088Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>闲来无事，算法糖。<br><a id="more"></a></p><h1 id="1️⃣-任务要求"><a href="#1️⃣-任务要求" class="headerlink" title="1️⃣ 任务要求"></a>1️⃣ 任务要求</h1><h2 id="1️⃣-1️⃣-实现5个函数，分别为："><a href="#1️⃣-1️⃣-实现5个函数，分别为：" class="headerlink" title="1️⃣.1️⃣ 实现5个函数，分别为："></a>1️⃣.1️⃣ 实现5个函数，分别为：</h2><ul><li><code>load_data()</code>：读取数据，并转换为可用的形式；</li><li><code>split_data()</code>：将数据集分为训练集和测试集；</li><li><code>train()</code>：从当前数据集中训练模型；</li><li><code>predict()</code>：用<code>train()</code>生成的模型，对测试集的学生进行分班；</li><li><code>evaluate()</code>：输出模型的准确率。<h2 id="1️⃣-2️⃣-train-和predict-不可以用第三方库；"><a href="#1️⃣-2️⃣-train-和predict-不可以用第三方库；" class="headerlink" title="1️⃣.2️⃣ train()和predict()不可以用第三方库；"></a>1️⃣.2️⃣ <code>train()</code>和<code>predict()</code>不可以用第三方库；</h2><h2 id="1️⃣-3️⃣-数据集-下载链接：student-csv"><a href="#1️⃣-3️⃣-数据集-下载链接：student-csv" class="headerlink" title="1️⃣.3️⃣ 数据集(下载链接：student.csv)"></a>1️⃣.3️⃣ 数据集(下载链接：<a href="https://blog-1259799643.cos.ap-shanghai.myqcloud.com/student%20.csv" target="_blank" rel="noopener">student.csv</a>)</h2></li><li>每个学生对应的情况，与最终分到的班级；</li><li>649行数据(<code>instances</code>)；</li><li>30个类别性特征；</li><li>6个班级，包括{A+，A，B，C，D，F}；<h2 id="1️⃣-4️⃣-数据集解释："><a href="#1️⃣-4️⃣-数据集解释：" class="headerlink" title="1️⃣.4️⃣ 数据集解释："></a>1️⃣.4️⃣ 数据集解释：</h2>1 school - students school (binary: “GP” - Gabriel Pereira or “MS” - Mousinho da Silveira)</li></ul><p>2 sex - students sex (binary: “F” - female or “M” - male)</p><p>3 address - students home address type (binary: “U” - urban or “R” - rural)</p><p>4 famsize - family size (binary: “LE3” - less or equal to 3 or “GT3” - greater than 3)</p><p>5 Pstatus - parents cohabitation status (binary: “T” - living together or “A” - apart)</p><p>6 Medu - mothers education (nominal: low, none, mid, high)</p><p>7 Fedu - fathers education (nominal: low, none, mid, high)</p><p>8 Mjob - mothers job (nominal: “teacher”, “health” care related, civil “services” (e.g. administrative or police), “at_home” or “other”)</p><p>9 Fjob - fathers job (nominal: “teacher”, “health” care related, civil “services” (e.g. administrative or police), “at_home” or “other”)</p><p>10 reason - reason to choose this school (nominal: close to “home”, school “reputation”, “course” preference or “other”)</p><p>11 guardian - students guardian (nominal: “mother”, “father” or “other”)</p><p>12 traveltime - home to school travel time (nominal: none,  low, medium, high, very_high)</p><p>13 studytime - weekly study time (nominal: none,  low, medium, high, very_high)</p><p>14 failures - number of past class failures (nominal: none,  low, medium, high, very_high)</p><p>15 schoolsup - extra educational support (binary: yes or no)<br>16 famsup - family educational support (binary: yes or no)</p><p>17 paid - extra paid classes within the course subject (binary: yes or no)</p><p>18 activities - extra-curricular activities (binary: yes or no)</p><p>19 nursery - attended nursery school (binary: yes or no)</p><p>20 higher - wants to take higher education (binary: yes or no)</p><p>21 internet - Internet access at home (binary: yes or no)</p><p>22 romantic - with a romantic relationship (binary: yes or no)</p><p>23 famrel - quality of family relationships (nominal: very_bad, bad, mediocre, good, excellent)</p><p>24 freetime - free time after school (nominal: very_low, low, mediocre, high, very_high)</p><p>25 goout - going out with friends (nominal: very_low, low, mediocre, high, very_high)<br>26 Dalc - workday alcohol consumption (nominal: very_low, low, mediocre, high, very_high)</p><p>27 Walc - weekend alcohol consumption (nominal: very_low, low, mediocre, high, very_high)</p><p>28 health - current health status (nominal: very_bad, bad, mediocre, good, excellent)</p><p>29 absences - number of school absences (nominal: none, one_to_three, four_to_six, seven_to_ten, more_than_ten)</p><p>30 Grade - final grade (A+, A, B, C, D, F)</p><h1 id="2️⃣-代码"><a href="#2️⃣-代码" class="headerlink" title="2️⃣ 代码"></a>2️⃣ 代码</h1><h2 id="2️⃣-1️⃣-load-data"><a href="#2️⃣-1️⃣-load-data" class="headerlink" title="2️⃣.1️⃣ load_data()"></a>2️⃣.1️⃣ <code>load_data()</code></h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># This function should open a data file in csv, and transform it into a usable format </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_data</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">    data = pd.read_csv(<span class="string">'student.csv'</span>, sep=<span class="string">','</span>)</span><br><span class="line">    <span class="keyword">return</span> data</span><br></pre></td></tr></tbody></table></figure><h2 id="2️⃣-2️⃣-split-data"><a href="#2️⃣-2️⃣-split-data" class="headerlink" title="2️⃣.2️⃣ split_data()"></a>2️⃣.2️⃣ <code>split_data()</code></h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># This function should split a data set into a training set and hold-out test set</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">split_data</span><span class="params">(data, test_size)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    split the data into train set and test set</span></span><br><span class="line"><span class="string">    :param data: Dtype from pd.read_csv</span></span><br><span class="line"><span class="string">    :param test_size: float, define the position to split</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">    X = data[list(data.columns[:<span class="number">-1</span>])].values <span class="comment"># get the instances matrix</span></span><br><span class="line">    y = data[<span class="string">'Grade'</span>] <span class="comment"># get the class vector</span></span><br><span class="line">    index = np.arange(data.shape[<span class="number">0</span>]) <span class="comment"># get the number of the dataset</span></span><br><span class="line">    np.random.shuffle(index) <span class="comment"># shuffle the order of the data</span></span><br><span class="line">    X = X[index] <span class="comment"># reorder the instances matrix</span></span><br><span class="line">    y = y[index] <span class="comment"># reorder the class vector</span></span><br><span class="line"></span><br><span class="line">    split_point = int(X.shape[<span class="number">0</span>] * test_size) <span class="comment"># define the position to split the data into train and test</span></span><br><span class="line">    X_train, X_test = X[:split_point], X[split_point:] </span><br><span class="line">    y_train, y_test = y[:split_point], y[split_point:]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> X_train, X_test, y_train, y_test</span><br></pre></td></tr></tbody></table></figure><h2 id="2️⃣-3️⃣-train"><a href="#2️⃣-3️⃣-train" class="headerlink" title="2️⃣.3️⃣ train()"></a>2️⃣.3️⃣ <code>train()</code></h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># This function should build a supervised NB model</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train</span><span class="params">(X, y, alpha)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    train or generate the probability matrix of Naive Bayes Classifier</span></span><br><span class="line"><span class="string">    :param X: Dtype from pd.read_csv, train set</span></span><br><span class="line"><span class="string">    :param y: Dtype from pd.read_csv, train class</span></span><br><span class="line"><span class="string">    :param alpha: Laplace smooth index</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    y_class_count = {}</span><br><span class="line">    feature_dimension = len(X[<span class="number">1</span>]) <span class="comment"># number of feature</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># get the number of each labels</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> y:</span><br><span class="line">        y_class_count[c] = y_class_count.get(c, <span class="number">0</span>) + <span class="number">1</span> <span class="comment"># generate the dict of class, e.g. {'A':'69',...}</span></span><br><span class="line">    y_class_tuple = sorted(y_class_count.items(), reverse=<span class="literal">False</span>) <span class="comment"># generate the tuple of class and sort it in terms of number, e.g. [('A','69'),...]</span></span><br><span class="line">    K = len(y_class_tuple)         <span class="comment"># the specific number of class grade</span></span><br><span class="line">    N = len(y)                     <span class="comment"># the number of instances</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># get the prior probability</span></span><br><span class="line">    prior_prob = {}</span><br><span class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> range(len(y_class_tuple)):</span><br><span class="line">        prior_prob[y_class_tuple[key][<span class="number">0</span>]] = (y_class_tuple[key][<span class="number">1</span>] + alpha) / (N + K * alpha)  <span class="comment"># laplace smooth</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># get the value set of each feature</span></span><br><span class="line">    feature_value = []  <span class="comment"># feature with different value</span></span><br><span class="line">    feature_value_number = []  <span class="comment"># the number of unique values of each feature</span></span><br><span class="line">    <span class="keyword">for</span> feature <span class="keyword">in</span> range(feature_dimension):</span><br><span class="line">        unique_feature = list(set(X[:, feature])) <span class="comment"># use `set` to get the unique value</span></span><br><span class="line">        feature_value_number.append(len(unique_feature))</span><br><span class="line">        feature_value.append(unique_feature)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># calculate the conditional probability</span></span><br><span class="line">    conditional_prob = []</span><br><span class="line">    <span class="comment"># calculate the count (x = a & y = c)</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(feature_dimension):</span><br><span class="line">        count = [[<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(len(y_class_count))] <span class="keyword">for</span> i <span class="keyword">in</span> range(feature_value_number[j])] </span><br><span class="line">        <span class="comment"># use list comprehension to generate zero matrix, (feature_value_number[j] rows x y_class_count cols) </span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(X[:, j])):</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> range(len(feature_value[j])):</span><br><span class="line">                <span class="keyword">for</span> t <span class="keyword">in</span> range(len(y_class_count)):</span><br><span class="line">                    <span class="keyword">if</span> X[:, j][i] == feature_value[j][k] <span class="keyword">and</span> list(y)[i] == y_class_tuple[t][<span class="number">0</span>]:</span><br><span class="line">                        <span class="comment"># x = value and y = class, get the count </span></span><br><span class="line">                        count[k][t] += <span class="number">1</span></span><br><span class="line">        <span class="comment"># calculate the conditional probability</span></span><br><span class="line">        <span class="keyword">for</span> m <span class="keyword">in</span> range(len(y_class_tuple)):</span><br><span class="line">            <span class="keyword">for</span> r <span class="keyword">in</span> range(len(count)):</span><br><span class="line">                count[r][m] = (count[r][m] + alpha) / (y_class_tuple[m][<span class="number">1</span>] + alpha * feature_value_number[j])  <span class="comment"># laplace smoothing</span></span><br><span class="line">        conditional_prob.append(count)</span><br><span class="line">    <span class="keyword">return</span> y_class_tuple, prior_prob, feature_value, feature_value_number, conditional_prob</span><br></pre></td></tr></tbody></table></figure><h2 id="2️⃣-4️⃣-predict"><a href="#2️⃣-4️⃣-predict" class="headerlink" title="2️⃣.4️⃣ predict()"></a>2️⃣.4️⃣ <code>predict()</code></h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">classify</span><span class="params">(y_class_tuple, prior_prob, feature_value, conditional_prob, feature_value_number, alpha, instance)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    generate the answer of classification</span></span><br><span class="line"><span class="string">    :param y_class_tuple: list, the tuple of class and sort it in terms of number</span></span><br><span class="line"><span class="string">    :param prior_prob: float list, prior probability of class</span></span><br><span class="line"><span class="string">    :param feature_value: list, feature value of all the attributes</span></span><br><span class="line"><span class="string">    :param conditional_prob: float list, posterior probability</span></span><br><span class="line"><span class="string">    :param feature_value_number: float list, number of different unique features</span></span><br><span class="line"><span class="string">    :param alpha: float, Laplace smooth index default 1</span></span><br><span class="line"><span class="string">    :param instance: list, one row of test set</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">import</span> math</span><br><span class="line">    predict = {}</span><br><span class="line">    <span class="keyword">for</span> m <span class="keyword">in</span> range(len(y_class_tuple)):</span><br><span class="line">        <span class="comment"># get the prior_probability of m-th label in y_class_tuple</span></span><br><span class="line">        yhat = math.log(prior_prob[y_class_tuple[m][<span class="number">0</span>]]) <span class="comment"># use log-transformation to avoid float missing</span></span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> range(len(instance)):</span><br><span class="line">            <span class="keyword">if</span> instance[n] <span class="keyword">in</span> feature_value[n]:</span><br><span class="line">                index = feature_value[n].index(instance[n]) <span class="comment"># locate the feature in feature_value</span></span><br><span class="line">                yhat = yhat + math.log(conditional_prob[n][index][m]) <span class="comment"># accumulate the probability</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># if the value of feature is not in training set, return the laplace smoothing</span></span><br><span class="line">                yhat = alpha / (feature_value_number[n] * alpha)</span><br><span class="line">        predict[y_class_tuple[m][<span class="number">0</span>]] = yhat</span><br><span class="line">    <span class="keyword">return</span> predict</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># This function should predict the class for an instance or a set of instances, based on a trained model </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">predict</span><span class="params">(y_class_tuple, prior_prob, feature_value, feature_value_number, conditional_prob, X, alpha, flag=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    predict the class for an instance or a set of instances, based on a trained model </span></span><br><span class="line"><span class="string">    :param y_class_tuple: list, the tuple of class and sort it in terms of number</span></span><br><span class="line"><span class="string">    :param prior_prob: float list, prior probability of class</span></span><br><span class="line"><span class="string">    :param feature_value: list, feature value of all the attributes</span></span><br><span class="line"><span class="string">    :param conditional_prob: float list, posterior probability</span></span><br><span class="line"><span class="string">    :param feature_value_number: float list, number of different unique features</span></span><br><span class="line"><span class="string">    :param alpha: float, Laplace smooth index default 1</span></span><br><span class="line"><span class="string">    :param X: Dtype from pd.read_csv, test set</span></span><br><span class="line"><span class="string">    :param flag: set 1 return probability or set 0 return prediction, default 0</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">import</span> operator <span class="keyword">as</span> op</span><br><span class="line">    test_num = len(X)</span><br><span class="line">    prediction = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(test_num)]</span><br><span class="line">    probability = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(test_num)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(test_num):</span><br><span class="line">        result = classify(y_class_tuple, prior_prob, feature_value, conditional_prob, feature_value_number, <span class="number">1</span>, X[i, :])</span><br><span class="line">        <span class="comment"># result is the probability of each class</span></span><br><span class="line">        result = sorted(result.items(), key=op.itemgetter(<span class="number">1</span>), reverse=<span class="literal">True</span>) <span class="comment"># the max probability is the predict class</span></span><br><span class="line">        prediction[i] = result[<span class="number">0</span>][<span class="number">0</span>] <span class="comment"># show the predict answer</span></span><br><span class="line">        probability[i] = result[<span class="number">0</span>][<span class="number">1</span>] <span class="comment"># show the predict probability</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> flag:</span><br><span class="line">        <span class="keyword">return</span> probability</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> prediction</span><br></pre></td></tr></tbody></table></figure><h2 id="2️⃣-5️⃣-evaluate"><a href="#2️⃣-5️⃣-evaluate" class="headerlink" title="2️⃣.5️⃣ evaluate()"></a>2️⃣.5️⃣ <code>evaluate()</code></h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># This function should evaluate a set of predictions in terms of accuracy</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">evaluate</span><span class="params">(p, y_test)</span>:</span></span><br><span class="line">    accuracy = sum(p == y_test)/len(y_test)</span><br><span class="line">    <span class="keyword">return</span> accuracy</span><br></pre></td></tr></tbody></table></figure><h2 id="2️⃣-6️⃣-主函数"><a href="#2️⃣-6️⃣-主函数" class="headerlink" title="2️⃣.6️⃣ 主函数"></a>2️⃣.6️⃣ 主函数</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data = load_data()</span><br><span class="line">X_train, X_test, y_train, y_test = split_data(data, <span class="number">0.7</span>)</span><br><span class="line">y_class_tuple, prior_prob, feature_value, feature_value_number, conditional_prob = train(X_train, y_train, <span class="number">1</span>)</span><br><span class="line">p = predict(y_class_tuple, prior_prob, feature_value, feature_value_number, conditional_prob, X_test, <span class="number">1</span>)</span><br><span class="line">evaluate(p, y_test)</span><br></pre></td></tr></tbody></table></figure><h1 id="3️⃣-整合全部代码-方便大家复制后直接运行"><a href="#3️⃣-整合全部代码-方便大家复制后直接运行" class="headerlink" title="3️⃣ 整合全部代码(方便大家复制后直接运行)"></a>3️⃣ 整合全部代码(方便大家复制后直接运行)</h1><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># This function should open a data file in csv, and transform it into a usable format </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_data</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">    data = pd.read_csv(<span class="string">'student.csv'</span>, sep=<span class="string">','</span>)</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="comment"># This function should split a data set into a training set and hold-out test set</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">split_data</span><span class="params">(data, test_size)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    split the data into train set and test set</span></span><br><span class="line"><span class="string">    :param data: Dtype from pd.read_csv</span></span><br><span class="line"><span class="string">    :param test_size: float, define the position to split</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">    X = data[list(data.columns[:<span class="number">-1</span>])].values <span class="comment"># get the instances matrix</span></span><br><span class="line">    y = data[<span class="string">'Grade'</span>] <span class="comment"># get the class vector</span></span><br><span class="line">    index = np.arange(data.shape[<span class="number">0</span>]) <span class="comment"># get the number of the dataset</span></span><br><span class="line">    np.random.shuffle(index) <span class="comment"># shuffle the order of the data</span></span><br><span class="line">    X = X[index] <span class="comment"># reorder the instances matrix</span></span><br><span class="line">    y = y[index] <span class="comment"># reorder the class vector</span></span><br><span class="line"></span><br><span class="line">    split_point = int(X.shape[<span class="number">0</span>] * test_size) <span class="comment"># define the position to split the data into train and test</span></span><br><span class="line">    X_train, X_test = X[:split_point], X[split_point:] </span><br><span class="line">    y_train, y_test = y[:split_point], y[split_point:]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> X_train, X_test, y_train, y_test</span><br><span class="line"></span><br><span class="line"><span class="comment"># This function should build a supervised NB model</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train</span><span class="params">(X, y, alpha)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    train or generate the probability matrix of Naive Bayes Classifier</span></span><br><span class="line"><span class="string">    :param X: Dtype from pd.read_csv, train set</span></span><br><span class="line"><span class="string">    :param y: Dtype from pd.read_csv, train class</span></span><br><span class="line"><span class="string">    :param alpha: Laplace smooth index</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    y_class_count = {}</span><br><span class="line">    feature_dimension = len(X[<span class="number">1</span>]) <span class="comment"># number of feature</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># get the number of each labels</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> y:</span><br><span class="line">        y_class_count[c] = y_class_count.get(c, <span class="number">0</span>) + <span class="number">1</span> <span class="comment"># generate the dict of class, e.g. {'A':'69',...}</span></span><br><span class="line">    y_class_tuple = sorted(y_class_count.items(), reverse=<span class="literal">False</span>) <span class="comment"># generate the tuple of class and sort it in terms of number, e.g. [('A','69'),...]</span></span><br><span class="line">    K = len(y_class_tuple)         <span class="comment"># the specific number of class grade</span></span><br><span class="line">    N = len(y)                     <span class="comment"># the number of instances</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># get the prior probability</span></span><br><span class="line">    prior_prob = {}</span><br><span class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> range(len(y_class_tuple)):</span><br><span class="line">        prior_prob[y_class_tuple[key][<span class="number">0</span>]] = (y_class_tuple[key][<span class="number">1</span>] + alpha) / (N + K * alpha)  <span class="comment"># laplace smooth</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># get the value set of each feature</span></span><br><span class="line">    feature_value = []  <span class="comment"># feature with different value</span></span><br><span class="line">    feature_value_number = []  <span class="comment"># the number of unique values of each feature</span></span><br><span class="line">    <span class="keyword">for</span> feature <span class="keyword">in</span> range(feature_dimension):</span><br><span class="line">        unique_feature = list(set(X[:, feature])) <span class="comment"># use `set` to get the unique value</span></span><br><span class="line">        feature_value_number.append(len(unique_feature))</span><br><span class="line">        feature_value.append(unique_feature)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># calculate the conditional probability</span></span><br><span class="line">    conditional_prob = []</span><br><span class="line">    <span class="comment"># calculate the count (x = a & y = c)</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(feature_dimension):</span><br><span class="line">        count = [[<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(len(y_class_count))] <span class="keyword">for</span> i <span class="keyword">in</span> range(feature_value_number[j])] </span><br><span class="line">        <span class="comment"># use list comprehension to generate zero matrix, (feature_value_number[j] rows x y_class_count cols) </span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(X[:, j])):</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> range(len(feature_value[j])):</span><br><span class="line">                <span class="keyword">for</span> t <span class="keyword">in</span> range(len(y_class_count)):</span><br><span class="line">                    <span class="keyword">if</span> X[:, j][i] == feature_value[j][k] <span class="keyword">and</span> list(y)[i] == y_class_tuple[t][<span class="number">0</span>]:</span><br><span class="line">                        <span class="comment"># x = value and y = class, get the count </span></span><br><span class="line">                        count[k][t] += <span class="number">1</span></span><br><span class="line">        <span class="comment"># calculate the conditional probability</span></span><br><span class="line">        <span class="keyword">for</span> m <span class="keyword">in</span> range(len(y_class_tuple)):</span><br><span class="line">            <span class="keyword">for</span> r <span class="keyword">in</span> range(len(count)):</span><br><span class="line">                count[r][m] = (count[r][m] + alpha) / (y_class_tuple[m][<span class="number">1</span>] + alpha * feature_value_number[j])  <span class="comment"># laplace smoothing</span></span><br><span class="line">        conditional_prob.append(count)</span><br><span class="line">    <span class="keyword">return</span> y_class_tuple, prior_prob, feature_value, feature_value_number, conditional_prob</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">classify</span><span class="params">(y_class_tuple, prior_prob, feature_value, conditional_prob, feature_value_number, alpha, instance)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    generate the answer of classification</span></span><br><span class="line"><span class="string">    :param y_class_tuple: list, the tuple of class and sort it in terms of number</span></span><br><span class="line"><span class="string">    :param prior_prob: float list, prior probability of class</span></span><br><span class="line"><span class="string">    :param feature_value: list, feature value of all the attributes</span></span><br><span class="line"><span class="string">    :param conditional_prob: float list, posterior probability</span></span><br><span class="line"><span class="string">    :param feature_value_number: float list, number of different unique features</span></span><br><span class="line"><span class="string">    :param alpha: float, Laplace smooth index default 1</span></span><br><span class="line"><span class="string">    :param instance: list, one row of test set</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">import</span> math</span><br><span class="line">    predict = {}</span><br><span class="line">    <span class="keyword">for</span> m <span class="keyword">in</span> range(len(y_class_tuple)):</span><br><span class="line">        <span class="comment"># get the prior_probability of m-th label in y_class_tuple</span></span><br><span class="line">        yhat = math.log(prior_prob[y_class_tuple[m][<span class="number">0</span>]]) <span class="comment"># use log-transformation to avoid float missing</span></span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> range(len(instance)):</span><br><span class="line">            <span class="keyword">if</span> instance[n] <span class="keyword">in</span> feature_value[n]:</span><br><span class="line">                index = feature_value[n].index(instance[n]) <span class="comment"># locate the feature in feature_value</span></span><br><span class="line">                yhat = yhat + math.log(conditional_prob[n][index][m]) <span class="comment"># accumulate the probability</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># if the value of feature is not in training set, return the laplace smoothing</span></span><br><span class="line">                yhat = alpha / (feature_value_number[n] * alpha)</span><br><span class="line">        predict[y_class_tuple[m][<span class="number">0</span>]] = yhat</span><br><span class="line">    <span class="keyword">return</span> predict</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># This function should predict the class for an instance or a set of instances, based on a trained model </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">predict</span><span class="params">(y_class_tuple, prior_prob, feature_value, feature_value_number, conditional_prob, X, alpha, flag=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    predict the class for an instance or a set of instances, based on a trained model </span></span><br><span class="line"><span class="string">    :param y_class_tuple: list, the tuple of class and sort it in terms of number</span></span><br><span class="line"><span class="string">    :param prior_prob: float list, prior probability of class</span></span><br><span class="line"><span class="string">    :param feature_value: list, feature value of all the attributes</span></span><br><span class="line"><span class="string">    :param conditional_prob: float list, posterior probability</span></span><br><span class="line"><span class="string">    :param feature_value_number: float list, number of different unique features</span></span><br><span class="line"><span class="string">    :param alpha: float, Laplace smooth index default 1</span></span><br><span class="line"><span class="string">    :param X: Dtype from pd.read_csv, test set</span></span><br><span class="line"><span class="string">    :param flag: set 1 return probability or set 0 return prediction, default 0</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">import</span> operator <span class="keyword">as</span> op</span><br><span class="line">    test_num = len(X)</span><br><span class="line">    prediction = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(test_num)]</span><br><span class="line">    probability = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(test_num)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(test_num):</span><br><span class="line">        result = classify(y_class_tuple, prior_prob, feature_value, conditional_prob, feature_value_number, <span class="number">1</span>, X[i, :])</span><br><span class="line">        <span class="comment"># result is the probability of each class</span></span><br><span class="line">        result = sorted(result.items(), key=op.itemgetter(<span class="number">1</span>), reverse=<span class="literal">True</span>) <span class="comment"># the max probability is the predict class</span></span><br><span class="line">        prediction[i] = result[<span class="number">0</span>][<span class="number">0</span>] <span class="comment"># show the predict answer</span></span><br><span class="line">        probability[i] = result[<span class="number">0</span>][<span class="number">1</span>] <span class="comment"># show the predict probability</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> flag:</span><br><span class="line">        <span class="keyword">return</span> probability</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> prediction</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># This function should evaluate a set of predictions in terms of accuracy</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">evaluate</span><span class="params">(p, y_test)</span>:</span></span><br><span class="line">    accuracy = sum(p == y_test)/len(y_test)</span><br><span class="line">    <span class="keyword">return</span> accuracy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data = load_data()</span><br><span class="line">X_train, X_test, y_train, y_test = split_data(data, <span class="number">0.7</span>)</span><br><span class="line">y_class_tuple, prior_prob, feature_value, feature_value_number, conditional_prob = train(X_train, y_train, <span class="number">1</span>)</span><br><span class="line">p = predict(y_class_tuple, prior_prob, feature_value, feature_value_number, conditional_prob, X_test, <span class="number">1</span>)</span><br><span class="line">evaluate(p, y_test)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0.4358974358974359</span></span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;闲来无事，算法糖。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="https://kemo.xyz/categories/Algorithm/"/>
    
    
      <category term="Navie Bayes" scheme="https://kemo.xyz/tags/Navie-Bayes/"/>
    
      <category term="朴素贝叶斯" scheme="https://kemo.xyz/tags/%E6%9C%B4%E7%B4%A0%E8%B4%9D%E5%8F%B6%E6%96%AF/"/>
    
      <category term="python" scheme="https://kemo.xyz/tags/python/"/>
    
      <category term="pandas" scheme="https://kemo.xyz/tags/pandas/"/>
    
  </entry>
  
  <entry>
    <title>高性能分布式计算(HPC)作业3--节点通信，发布计算任务，并在计算任务中阻塞</title>
    <link href="https://kemo.xyz/%E9%AB%98%E6%80%A7%E8%83%BD%E5%88%86%E5%B8%83%E5%BC%8F%E8%AE%A1%E7%AE%97-HPC-%E4%BD%9C%E4%B8%9A3-%E8%8A%82%E7%82%B9%E9%80%9A%E4%BF%A1%EF%BC%8C%E5%8F%91%E5%B8%83%E8%AE%A1%E7%AE%97%E4%BB%BB%E5%8A%A1%EF%BC%8C%E5%B9%B6%E5%9C%A8%E8%AE%A1%E7%AE%97%E4%BB%BB%E5%8A%A1%E4%B8%AD%E9%98%BB%E5%A1%9E.html"/>
    <id>https://kemo.xyz/高性能分布式计算-HPC-作业3-节点通信，发布计算任务，并在计算任务中阻塞.html</id>
    <published>2020-05-12T18:40:37.000Z</published>
    <updated>2020-05-12T19:26:40.389Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>分布式计算作业3，socket实时通信，接收发送文件，在计算任务中阻塞。<br><a id="more"></a></p><h1 id="1️⃣-作业要求"><a href="#1️⃣-作业要求" class="headerlink" title="1️⃣ 作业要求"></a>1️⃣ 作业要求</h1><ul><li>建立两节点间的通信；</li><li>从节点 1 向节点 2 发送一个<code>python</code>语言编写的源程序 A，节点 2 执行程序 A，并向节<br>点 1 返回计算结果；</li><li>程序 A 可在节点 2 上独立完成运行，无需其它条件支持；</li><li>额外功能<code>Barrier</code><ul><li>程序 A 中设计一个独立的函数<code>Barrier</code>；</li><li>在程序 A 执行过程中，执行 函数<code>Barrier</code>；</li><li>函数<code>Barrier</code>运行时，程序 A 阻塞在函数中。函数<code>Barrier</code>发起与节点 1 的通信。等待节点<br>1 发送字符串<code>GOON</code>以后，函数<code>Barrier</code>返回，程序 A 继续执行直至结束。</li></ul></li></ul><h1 id="2️⃣-代码"><a href="#2️⃣-代码" class="headerlink" title="2️⃣ 代码"></a>2️⃣ 代码</h1><h2 id="2️⃣-1️⃣-代码1——节点通信，发布计算任务"><a href="#2️⃣-1️⃣-代码1——节点通信，发布计算任务" class="headerlink" title="2️⃣.1️⃣ 代码1——节点通信，发布计算任务"></a>2️⃣.1️⃣ 代码1——节点通信，发布计算任务</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ReceiveFile</span><span class="params">(conn)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:  <span class="comment"># 连接成功后一直使用当前连接，直到退出</span></span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">"recv.py"</span>, <span class="string">"ab"</span>) <span class="keyword">as</span> f:</span><br><span class="line">            data = conn.recv(<span class="number">1024</span>)</span><br><span class="line">            <span class="keyword">if</span> data == <span class="string">b'quit'</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> data != <span class="string">b'success'</span>:</span><br><span class="line">                f.write(data)</span><br><span class="line">            conn.send(<span class="string">"success"</span>.encode())</span><br><span class="line">    print(<span class="string">"文件barrier.py已经接收！存储为recv.py"</span>)</span><br><span class="line">    f.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">SendAnswer</span><span class="params">(conn)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> os.path.exists(<span class="string">"recv.py"</span>):</span><br><span class="line">            ans = os.popen(<span class="string">"python recv.py"</span>)</span><br><span class="line">            ansRead = ans.read()</span><br><span class="line">            print(<span class="string">"recv.py运行完毕，得到结果为%s"</span> % (str(ansRead)))</span><br><span class="line">            <span class="keyword">with</span> open(<span class="string">'output.txt'</span>, <span class="string">"w"</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(ansRead)</span><br><span class="line">                f.close()</span><br><span class="line">            print(<span class="string">"将得到的结果写入output.txt"</span>)</span><br><span class="line">            <span class="keyword">with</span> open(<span class="string">'output.txt'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> f:</span><br><span class="line">                    conn.send(i)</span><br><span class="line">                    data = conn.recv(<span class="number">1024</span>)</span><br><span class="line">                    <span class="keyword">if</span> data != <span class="string">b'success'</span>:</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                conn.send(<span class="string">'quit'</span>.encode())</span><br><span class="line">            print(<span class="string">"将output.txt发送完毕！"</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    conn.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">SendPyFile</span><span class="params">(conn)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'barrier.py'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> f:</span><br><span class="line">            conn.send(i)</span><br><span class="line">            data = conn.recv(<span class="number">1024</span>)</span><br><span class="line">            <span class="keyword">if</span> data != <span class="string">b'success'</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    print(<span class="string">"文件barrier.py已经发送！"</span>)</span><br><span class="line">    conn.send(<span class="string">'quit'</span>.encode())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ReceiveAnswer</span><span class="params">(conn)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">"recv_output.txt"</span>, <span class="string">"ab"</span>) <span class="keyword">as</span> f:</span><br><span class="line">            data = conn.recv(<span class="number">1024</span>)</span><br><span class="line">            <span class="keyword">if</span> data == <span class="string">b'quit'</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> data != <span class="string">b'success'</span>:</span><br><span class="line">                f.write(data)</span><br><span class="line">            conn.send(<span class="string">"success"</span>.encode())</span><br><span class="line">    print(<span class="string">"结果接收完毕，存储在recv_output.txt！"</span>)</span><br><span class="line">    f.close()</span><br><span class="line">    conn.send(<span class="string">'quit'</span>.encode())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process</span><span class="params">(conn)</span>:</span></span><br><span class="line">    print(<span class="string">"等待5秒返回GOON！"</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        print(i+<span class="number">1</span>)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">    conn.send(<span class="string">'GOON'</span>.encode())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ClientBarrier</span><span class="params">(conn)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        conn, addr = conn.accept()</span><br><span class="line">        print(<span class="string">"barrier函数阻塞，连接建立，地址为%s"</span>%(str(addr)))</span><br><span class="line">        t = threading.Thread(target=process, args=(conn,))</span><br><span class="line">        t.start()</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 改写线程类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">msgThread</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, conn, flag)</span>:</span></span><br><span class="line">        threading.Thread.__init__(self)</span><br><span class="line">        self.conn = conn</span><br><span class="line">        self.flag = flag</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.flag == <span class="string">"send_file"</span>:</span><br><span class="line">            SendPyFile(self.conn)</span><br><span class="line">        <span class="keyword">elif</span> self.flag == <span class="string">"receive_answer"</span>:</span><br><span class="line">            ReceiveAnswer(self.conn)</span><br><span class="line">        <span class="keyword">elif</span> self.flag == <span class="string">"receive_file"</span>:</span><br><span class="line">            ReceiveFile(self.conn)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            SendAnswer(self.conn)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Client</span><span class="params">(address)</span>:</span></span><br><span class="line">    client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            client.connect((address, <span class="number">6999</span>))  <span class="comment"># 建立一个链接，连接到本地的6999端口</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            print(<span class="string">"等待侦听！"</span>)</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">    Thread_receive = msgThread(client, <span class="string">"receive_file"</span>)</span><br><span class="line">    Thread_send = msgThread(client, <span class="string">"send_answer"</span>)</span><br><span class="line">    Thread_receive.start()</span><br><span class="line">    Thread_send.start()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Server</span><span class="params">()</span>:</span></span><br><span class="line">    server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    server.bind((<span class="string">'127.0.0.1'</span>, <span class="number">6999</span>))  <span class="comment"># 绑定要监听的端口</span></span><br><span class="line">    server.listen(<span class="number">5</span>)  <span class="comment"># 开始监听 表示可以使用五个链接排队</span></span><br><span class="line">    conn, addr = server.accept()  <span class="comment"># 等待链接,多个链接的时候就会出现问题,其实返回了两个值</span></span><br><span class="line">    print(<span class="string">"侦听器已启动！port：6999"</span>)</span><br><span class="line">    print(<span class="string">"连接建立，地址在%s"</span>%(str(addr)))</span><br><span class="line">    Thread_receive = msgThread(conn, <span class="string">"send_file"</span>)</span><br><span class="line">    Thread_send = msgThread(conn, <span class="string">"receive_answer"</span>)</span><br><span class="line">    Thread_barrier = threading.Thread(target=ClientBarrier, args=(server,))</span><br><span class="line">    Thread_receive.start()</span><br><span class="line">    Thread_send.start()</span><br><span class="line">    Thread_barrier.start()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    BootMode = input(<span class="string">"请选择启动方式(1(控制节点)或2(计算节点))：\n"</span>)</span><br><span class="line">    <span class="keyword">if</span> BootMode == <span class="string">'1'</span>:</span><br><span class="line">        Server()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        port = input(<span class="string">"请输入侦听服务器地址(默认127.0.0.1)：\n"</span>)</span><br><span class="line">        Client(port)</span><br></pre></td></tr></tbody></table></figure><h2 id="2️⃣-2️⃣-代码2——Barrier函数"><a href="#2️⃣-2️⃣-代码2——Barrier函数" class="headerlink" title="2️⃣.2️⃣ 代码2——Barrier函数"></a>2️⃣.2️⃣ 代码2——Barrier函数</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">barrier</span><span class="params">()</span>:</span></span><br><span class="line">    client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    client.connect((<span class="string">'127.0.0.1'</span>, <span class="number">6999</span>))</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        data = client.recv(<span class="number">1024</span>)</span><br><span class="line">        <span class="keyword">if</span> data == <span class="string">b'GOON'</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    client.send(<span class="string">'quit'</span>.encode())</span><br><span class="line">    client.close()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">MaxMin</span><span class="params">()</span>:</span></span><br><span class="line">    a = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        a.append(random.random() * <span class="number">10</span>)</span><br><span class="line">    barrier()</span><br><span class="line">    print(max(a), min(a))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    MaxMin()</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;分布式计算作业3，socket实时通信，接收发送文件，在计算任务中阻塞。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="https://kemo.xyz/categories/Algorithm/"/>
    
    
      <category term="python" scheme="https://kemo.xyz/tags/python/"/>
    
      <category term="distributed system" scheme="https://kemo.xyz/tags/distributed-system/"/>
    
      <category term="节点通信" scheme="https://kemo.xyz/tags/%E8%8A%82%E7%82%B9%E9%80%9A%E4%BF%A1/"/>
    
      <category term="多线程" scheme="https://kemo.xyz/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="multithreading" scheme="https://kemo.xyz/tags/multithreading/"/>
    
      <category term="socket" scheme="https://kemo.xyz/tags/socket/"/>
    
      <category term="分布式计算" scheme="https://kemo.xyz/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E8%AE%A1%E7%AE%97/"/>
    
      <category term="Barrier" scheme="https://kemo.xyz/tags/Barrier/"/>
    
  </entry>
  
  <entry>
    <title>高性能分布式计算(HPC)作业2--节点通信，发布计算任务</title>
    <link href="https://kemo.xyz/%E9%AB%98%E6%80%A7%E8%83%BD%E5%88%86%E5%B8%83%E5%BC%8F%E8%AE%A1%E7%AE%97-HPC-%E4%BD%9C%E4%B8%9A2-%E8%8A%82%E7%82%B9%E9%80%9A%E4%BF%A1%EF%BC%8C%E5%8F%91%E5%B8%83%E8%AE%A1%E7%AE%97%E4%BB%BB%E5%8A%A1.html"/>
    <id>https://kemo.xyz/高性能分布式计算-HPC-作业2-节点通信，发布计算任务.html</id>
    <published>2020-05-12T18:37:35.000Z</published>
    <updated>2020-05-12T19:29:30.433Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>分布式计算作业2，socket实时通信，接收发送文件并阻塞。<br><a id="more"></a></p><h1 id="1️⃣-作业要求"><a href="#1️⃣-作业要求" class="headerlink" title="1️⃣ 作业要求"></a>1️⃣ 作业要求</h1><ul><li>建立两节点间的通信；</li><li>从节点 1 向节点 2 发送一个<code>python</code>语言编写的源程序 A，节点 2 执行程序 A，并向节<br>点 1 返回计算结果；</li><li>程序 A 可在节点 2 上独立完成运行，无需其它条件支持。</li></ul><h1 id="2️⃣程序"><a href="#2️⃣程序" class="headerlink" title="2️⃣程序"></a>2️⃣程序</h1><h2 id="2️⃣-1️⃣-程序1——实现通信"><a href="#2️⃣-1️⃣-程序1——实现通信" class="headerlink" title="2️⃣.1️⃣ 程序1——实现通信"></a>2️⃣.1️⃣ 程序1——实现通信</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ReceiveFile</span><span class="params">(conn)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:  <span class="comment"># 连接成功后一直使用当前连接，直到退出</span></span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">"recv.py"</span>, <span class="string">"ab"</span>) <span class="keyword">as</span> f:</span><br><span class="line">            data = conn.recv(<span class="number">1024</span>)</span><br><span class="line">            <span class="keyword">if</span> data == <span class="string">b'quit'</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> data != <span class="string">b'success'</span>:</span><br><span class="line">                f.write(data)</span><br><span class="line">            conn.send(<span class="string">"success"</span>.encode())</span><br><span class="line">    print(<span class="string">"文件test.py已经接收！存储为recv.py"</span>)</span><br><span class="line">    f.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">SendAnswer</span><span class="params">(conn)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> os.path.exists(<span class="string">"recv.py"</span>):</span><br><span class="line">            ans = os.popen(<span class="string">"python recv.py"</span>)</span><br><span class="line">            ansRead = ans.read()</span><br><span class="line">            print(<span class="string">"recv.py运行完毕，得到结果为%s"</span> % (str(ansRead)))</span><br><span class="line">            <span class="keyword">with</span> open(<span class="string">'output.txt'</span>, <span class="string">"w"</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(ansRead)</span><br><span class="line">                f.close()</span><br><span class="line">            print(<span class="string">"将得到的结果写入output.txt"</span>)</span><br><span class="line">            <span class="keyword">with</span> open(<span class="string">'output.txt'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> f:</span><br><span class="line">                    conn.send(i)</span><br><span class="line">                    data = conn.recv(<span class="number">1024</span>)</span><br><span class="line">                    <span class="keyword">if</span> data != <span class="string">b'success'</span>:</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                conn.send(<span class="string">'quit'</span>.encode())</span><br><span class="line">            print(<span class="string">"将output.txt发送完毕！"</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    conn.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">SendPyFile</span><span class="params">(conn)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'test.py'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> f:</span><br><span class="line">            conn.send(i)</span><br><span class="line">            data = conn.recv(<span class="number">1024</span>)</span><br><span class="line">            <span class="keyword">if</span> data != <span class="string">b'success'</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    print(<span class="string">"文件test.py已经发送！"</span>)</span><br><span class="line">    conn.send(<span class="string">'quit'</span>.encode())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ReceiveAnswer</span><span class="params">(conn)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">"recv_output.txt"</span>, <span class="string">"ab"</span>) <span class="keyword">as</span> f:</span><br><span class="line">            data = conn.recv(<span class="number">1024</span>)</span><br><span class="line">            <span class="keyword">if</span> data == <span class="string">b'quit'</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> data != <span class="string">b'success'</span>:</span><br><span class="line">                f.write(data)</span><br><span class="line">            conn.send(<span class="string">"success"</span>.encode())</span><br><span class="line">    print(<span class="string">"结果接收完毕，存储在recv_output.txt！"</span>)</span><br><span class="line">    f.close()</span><br><span class="line">    conn.send(<span class="string">'quit'</span>.encode())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">msgThread</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, conn, flag)</span>:</span></span><br><span class="line">        threading.Thread.__init__(self)</span><br><span class="line">        self.conn = conn</span><br><span class="line">        self.flag = flag</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.flag == <span class="string">"send_file"</span>:</span><br><span class="line">            SendPyFile(self.conn)</span><br><span class="line">        <span class="keyword">elif</span> self.flag == <span class="string">"receive_answer"</span>:</span><br><span class="line">            ReceiveAnswer(self.conn)</span><br><span class="line">        <span class="keyword">elif</span> self.flag == <span class="string">"receive_file"</span>:</span><br><span class="line">            ReceiveFile(self.conn)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            SendAnswer(self.conn)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 改写线程类</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Client</span><span class="params">(address)</span>:</span></span><br><span class="line">    client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            client.connect((address, <span class="number">6999</span>))  <span class="comment"># 建立一个链接，连接到本地的6999端口</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            print(<span class="string">"等待侦听！"</span>)</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">    Thread_receive = msgThread(client, <span class="string">"receive_file"</span>)</span><br><span class="line">    Thread_send = msgThread(client, <span class="string">"send_answer"</span>)</span><br><span class="line">    Thread_receive.start()</span><br><span class="line">    Thread_send.start()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Server</span><span class="params">()</span>:</span></span><br><span class="line">    server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    server.bind((<span class="string">'127.0.0.1'</span>, <span class="number">6999</span>))  <span class="comment"># 绑定要监听的端口</span></span><br><span class="line">    server.listen(<span class="number">5</span>)  <span class="comment"># 开始监听 表示可以使用五个链接排队</span></span><br><span class="line">    conn, addr = server.accept()  <span class="comment"># 等待链接,多个链接的时候就会出现问题,其实返回了两个值</span></span><br><span class="line">    print(<span class="string">"侦听器已启动！port：6999"</span>)</span><br><span class="line">    print(<span class="string">"连接建立，地址在%s"</span> % (str(addr)))</span><br><span class="line">    Thread_receive = msgThread(conn, <span class="string">"send_file"</span>)</span><br><span class="line">    Thread_send = msgThread(conn, <span class="string">"receive_answer"</span>)</span><br><span class="line">    Thread_receive.start()</span><br><span class="line">    Thread_send.start()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    BootMode = input(<span class="string">"请选择启动方式(1(控制节点)或2(计算节点))：\n"</span>)</span><br><span class="line">    <span class="keyword">if</span> BootMode == <span class="string">'1'</span>:</span><br><span class="line">        Server()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        port = input(<span class="string">"请输入侦听服务器地址(默认127.0.0.1)：\n"</span>)</span><br><span class="line">        Client(port)</span><br></pre></td></tr></tbody></table></figure><h2 id="2️⃣-2️⃣-程序2——计算任务函数"><a href="#2️⃣-2️⃣-程序2——计算任务函数" class="headerlink" title="2️⃣.2️⃣ 程序2——计算任务函数"></a>2️⃣.2️⃣ 程序2——计算任务函数</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    a.append(random.random() * <span class="number">10</span>)</span><br><span class="line">    </span><br><span class="line">print(max(a),min(a))</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;分布式计算作业2，socket实时通信，接收发送文件并阻塞。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="https://kemo.xyz/categories/Algorithm/"/>
    
    
      <category term="python" scheme="https://kemo.xyz/tags/python/"/>
    
      <category term="distributed system" scheme="https://kemo.xyz/tags/distributed-system/"/>
    
      <category term="节点通信" scheme="https://kemo.xyz/tags/%E8%8A%82%E7%82%B9%E9%80%9A%E4%BF%A1/"/>
    
      <category term="多线程" scheme="https://kemo.xyz/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="multithreading" scheme="https://kemo.xyz/tags/multithreading/"/>
    
      <category term="socket" scheme="https://kemo.xyz/tags/socket/"/>
    
      <category term="分布式计算" scheme="https://kemo.xyz/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E8%AE%A1%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>高性能分布式计算(HPC)作业1--节点实时通信</title>
    <link href="https://kemo.xyz/%E9%AB%98%E6%80%A7%E8%83%BD%E5%88%86%E5%B8%83%E5%BC%8F%E8%AE%A1%E7%AE%97-HPC-%E4%BD%9C%E4%B8%9A1-%E8%8A%82%E7%82%B9%E5%AE%9E%E6%97%B6%E9%80%9A%E4%BF%A1.html"/>
    <id>https://kemo.xyz/高性能分布式计算-HPC-作业1-节点实时通信.html</id>
    <published>2020-05-12T18:31:06.000Z</published>
    <updated>2020-05-12T19:26:20.498Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>分布式计算作业1，socket实时通信。<br><a id="more"></a></p><h1 id="1️⃣-作业要求"><a href="#1️⃣-作业要求" class="headerlink" title="1️⃣ 作业要求"></a>1️⃣ 作业要求</h1><ul><li>通信双方使用同一个通信程序；</li><li>通信程序有两种启动方式。<strong>方式一</strong>：启动后创建侦听器，等待连接。<strong>方式二</strong>：启动是给<br>定服务器（处于侦听状态的机器）地址；</li><li>首先按方式一启动侦听节点；</li><li>然后按方式二启动第二个通信节点，与侦听节点建立连接；</li><li>完成连接后，通信双方进入双向通信状态，可以互发文字消息；</li><li>任何一方发出“QUIT”消息（大小写不敏感）即终止通信，双方终止程序运行。<h1 id="2️⃣-代码"><a href="#2️⃣-代码" class="headerlink" title="2️⃣ 代码"></a>2️⃣ 代码</h1></li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket  <span class="comment"># 客户端 发送一个数据，再接收一个数据</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> ctypes</span><br><span class="line"><span class="keyword">import</span> inspect</span><br><span class="line">quit = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 终止线程</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_async_raise</span><span class="params">(tid, exctype)</span>:</span></span><br><span class="line">    <span class="string">"""raises the exception, performs cleanup if needed"""</span></span><br><span class="line">    tid = ctypes.c_long(tid)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> inspect.isclass(exctype):</span><br><span class="line">        exctype = type(exctype)</span><br><span class="line">    res = ctypes.pythonapi.PyThreadState_SetAsyncExc(</span><br><span class="line">        tid, ctypes.py_object(exctype))</span><br><span class="line">    <span class="keyword">if</span> res == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">"invalid thread id"</span>)</span><br><span class="line">    <span class="keyword">elif</span> res != <span class="number">1</span>:</span><br><span class="line">        <span class="comment"># """if it returns a number greater than one, you're in trouble,</span></span><br><span class="line">        <span class="comment"># and you should call it again with exc=NULL to revert the effect"""</span></span><br><span class="line">        ctypes.pythonapi.PyThreadState_SetAsyncExc(tid, <span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">raise</span> SystemError(<span class="string">"PyThreadState_SetAsyncExc failed"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">stop_thread</span><span class="params">(thread)</span>:</span></span><br><span class="line">    _async_raise(thread.ident, SystemExit)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ReceiveMsg</span><span class="params">(conn)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> quit</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            data = conn.recv(<span class="number">1024</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            print(<span class="string">"连接结束"</span>)</span><br><span class="line">            conn.close()</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> str(data.decode()).upper() != <span class="string">'QUIT'</span>:</span><br><span class="line">            print(<span class="string">'recive:'</span>, data.decode())</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            quit = <span class="number">1</span></span><br><span class="line">            conn.close()</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">SendMsg</span><span class="params">(conn)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> quit</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        send = input(<span class="string">"send:\n"</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            conn.send(send.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            print(<span class="string">"连接结束"</span>)</span><br><span class="line">            conn.close()</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> str(send).upper() == <span class="string">'QUIT'</span>:</span><br><span class="line">            conn.close()</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 改写线程</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">msgThread</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, conn, flag)</span>:</span></span><br><span class="line">        threading.Thread.__init__(self)</span><br><span class="line">        self.conn = conn</span><br><span class="line">        self.flag = flag</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.flag == <span class="number">1</span>:</span><br><span class="line">            ReceiveMsg(self.conn)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            SendMsg(self.conn)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 声明socket类型，同时生成链接对象</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Client</span><span class="params">(address)</span>:</span></span><br><span class="line">    client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            client.connect((address, <span class="number">6999</span>))  <span class="comment"># 建立一个链接，连接到本地的6999端口</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            print(<span class="string">"等待侦听！"</span>)</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">    Thread_receive = msgThread(client, <span class="number">1</span>)</span><br><span class="line">    Thread_send = msgThread(client, <span class="number">2</span>)</span><br><span class="line">    Thread_receive.start()</span><br><span class="line">    Thread_send.start()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Server</span><span class="params">()</span>:</span></span><br><span class="line">    server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    server.bind((<span class="string">'127.0.0.1'</span>, <span class="number">6999</span>))  <span class="comment"># 绑定要监听的端口</span></span><br><span class="line">    server.listen(<span class="number">5</span>)  <span class="comment"># 开始监听 表示可以使用五个链接排队</span></span><br><span class="line">    conn, addr = server.accept()  <span class="comment"># 等待链接,多个链接的时候就会出现问题,其实返回了两个值</span></span><br><span class="line">    print(<span class="string">"侦听器已启动！port：6999"</span>)</span><br><span class="line">    print(conn, addr)</span><br><span class="line">    Thread_receive = msgThread(conn, <span class="number">1</span>)</span><br><span class="line">    Thread_send = msgThread(conn, <span class="number">2</span>)</span><br><span class="line">    Thread_receive.start()</span><br><span class="line">    Thread_send.start()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    BootMode = input(<span class="string">"请选择启动方式(1或2)：\n"</span>)</span><br><span class="line">    <span class="keyword">if</span> BootMode == <span class="string">'1'</span>:</span><br><span class="line">        Server()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        port = input(<span class="string">"请输入侦听服务器地址(默认127.0.0.1)：\n"</span>)</span><br><span class="line">        Client(port)</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;分布式计算作业1，socket实时通信。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="https://kemo.xyz/categories/Algorithm/"/>
    
    
      <category term="python" scheme="https://kemo.xyz/tags/python/"/>
    
      <category term="分布式" scheme="https://kemo.xyz/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
      <category term="distributed system" scheme="https://kemo.xyz/tags/distributed-system/"/>
    
      <category term="节点通信" scheme="https://kemo.xyz/tags/%E8%8A%82%E7%82%B9%E9%80%9A%E4%BF%A1/"/>
    
      <category term="多线程" scheme="https://kemo.xyz/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="multithreading" scheme="https://kemo.xyz/tags/multithreading/"/>
    
      <category term="socket" scheme="https://kemo.xyz/tags/socket/"/>
    
  </entry>
  
  <entry>
    <title>天池_二手车价格预测_Task_3_特征工程</title>
    <link href="https://kemo.xyz/%E5%A4%A9%E6%B1%A0-%E4%BA%8C%E6%89%8B%E8%BD%A6%E4%BB%B7%E6%A0%BC%E9%A2%84%E6%B5%8B-Task-3-%E7%89%B9%E5%BE%81%E5%B7%A5%E7%A8%8B.html"/>
    <id>https://kemo.xyz/天池-二手车价格预测-Task-3-特征工程.html</id>
    <published>2020-04-02T06:56:56.000Z</published>
    <updated>2020-05-12T19:21:21.595Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>接续<br><a id="more"></a></p><h1 id="特征工程🃏"><a href="#特征工程🃏" class="headerlink" title="特征工程🃏"></a>特征工程🃏</h1><p>  特征工程，是指用一系列工程化的方式从原始数据中筛选出更好的数据特征，以提升模型的训练效果。业内有一句广为流传的话是：数据和特征决定了机器学习的上限，而模型和算法是在逼近这个上限而已。由此可见，好的数据和特征是模型和算法发挥更大的作用的前提。特征工程通常包括数据预处理、特征选择、降维等环节。如下图所示：<br><img src="https://img-blog.csdnimg.cn/20200402004507865.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0V4Y2FsaWJ1clVsaW1pdGVk,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="0️⃣-前言"><a href="#0️⃣-前言" class="headerlink" title="0️⃣ 前言"></a>0️⃣ 前言</h2><p>  我们经常在处理数据时，会面临以下问题：</p><ul><li>收集的数据格式不对（如 <code>SQL</code> 数据库、<code>JSON</code>、<code>CSV</code> 等）</li><li>缺失值和异常值</li><li>标准化</li><li>减少数据集中存在的固有噪声（部分存储数据可能已损坏）</li><li>数据集中的某些功能可能无法收集任何信息以供分析</li></ul><p>而减少统计分析期间要使用的特征的数量可能会带来一些好处，例如：</p><ul><li>提高精度</li><li>降低过拟合风险</li><li>加快训练速度</li><li>改进数据可视化</li><li>增加我们模型的可解释性</li></ul><p>事实上，统计上证明，当执行机器学习任务时，存在针对每个特定任务应该使用的<strong>最佳数量的特征</strong>（图 1）。如果添加的特征比必要的特征<strong>多</strong>，那么我们的模型性能将<strong>下降</strong>（因为添加了噪声）。真正的挑战是找出哪些特征是<strong>最佳的使用特征</strong>（这实际上取决于我们提供的数据量和我们正在努力实现的任务的复杂性）。这就是特征选择技术能够帮到我们的地方！</p><p><img src="https://img-blog.csdnimg.cn/20200402005242590.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0V4Y2FsaWJ1clVsaW1pdGVk,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="0️⃣-1️⃣-赛题重述"><a href="#0️⃣-1️⃣-赛题重述" class="headerlink" title="0️⃣.1️⃣ 赛题重述"></a>0️⃣.1️⃣ 赛题重述</h3><p>  这是一道来自于天池的新手练习题目，用<code>数据分析</code>、<code>机器学习</code>等手段进行 <a href="https://tianchi.aliyun.com/competition/entrance/231784/information" target="_blank" rel="noopener">二手车售卖价格预测</a> 的回归问题。赛题本身的思路清晰明了，即对给定的数据集进行分析探讨，然后设计模型运用数据进行训练，测试模型，最终给出选手的预测结果。前面我们已经进行过EDA分析在这里<a href="https://blog.csdn.net/ExcaliburUlimited/article/details/105021630" target="_blank" rel="noopener">天池_二手车价格预测_Task1-2_赛题理解与数据分析</a></p><h3 id="0️⃣-2️⃣-数据集概述"><a href="#0️⃣-2️⃣-数据集概述" class="headerlink" title="0️⃣.2️⃣ 数据集概述"></a>0️⃣.2️⃣ 数据集概述</h3><p>  赛题官方给出了来自Ebay Kleinanzeigen的二手车交易记录，总数据量超过<strong>40w</strong>，包含<strong>31列</strong>变量信息，其中<strong>15列</strong>为匿名变量，即<code>v0</code>至<code>v15</code>。并从中抽取<strong>15万条</strong>作为训练集，<strong>5万</strong>条作为测试集A，<strong>5万</strong>条作为测试集B，同时对<code>name</code>、<code>model</code>、<code>brand</code>和<code>regionCode</code>等信息进行脱敏。具体的数据表如下图：</p><div class="table-wrapper" style="center"><table style="center"><thead><tr style="center"><th><strong>Field</strong></th><th><strong>Description</strong></th></tr></thead><tbody style="center"><tr style="center"><td>SaleID</td><td>交易ID，唯一编码</td></tr><tr><td>name</td><td>汽车交易名称，已脱敏</td></tr><tr><td>regDate</td><td>汽车注册日期，例如20160101，2016年01月01日</td></tr><tr><td>model</td><td>车型编码，已脱敏</td></tr><tr><td>brand</td><td>汽车品牌，已脱敏</td></tr><tr><td>bodyType</td><td>车身类型：豪华轿车：0，微型车：1，厢型车：2，大巴车：3，敞篷车：4，双门汽车：5，商务车：6，搅拌车：7</td></tr><tr><td>fuelType</td><td>燃油类型：汽油：0，柴油：1，液化石油气：2，天然气：3，混合动力：4，其他：5，电动：6</td></tr><tr><td>gearbox</td><td>变速箱：手动：0，自动：1</td></tr><tr><td>power</td><td>发动机功率：范围 [ 0,  600 ]</td></tr><tr><td>kilometer</td><td>汽车已行驶公里，单位万km</td></tr><tr><td>notRepairedDamage</td><td>汽车有尚未修复的损坏：是：0，否：1</td></tr><tr><td>regionCode</td><td>地区编码，已脱敏</td></tr><tr><td>seller</td><td>销售方：个体：0，非个体：1</td></tr><tr><td>offerType</td><td>报价类型：提供：0，请求：1</td></tr><tr><td>creatDate</td><td>汽车上线时间，即开始售卖时间</td></tr><tr><td>price</td><td>二手车交易价格（预测目标）</td></tr><tr><td>v系列特征</td><td>匿名特征，包含v0-14在内15个匿名特征</td></tr></tbody></table></div><h2 id="1️⃣-异常缺失值删除"><a href="#1️⃣-异常缺失值删除" class="headerlink" title="1️⃣ 异常缺失值删除"></a>1️⃣ 异常缺失值删除</h2><h3 id="1️⃣-1️⃣-导入库与数据"><a href="#1️⃣-1️⃣-导入库与数据" class="headerlink" title="1️⃣.1️⃣  导入库与数据"></a>1️⃣.1️⃣  导入库与数据</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> itemgetter</span><br><span class="line"></span><br><span class="line">%matplotlib inline</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">train = pd.read_csv(<span class="string">'used_car_train_20200313.csv'</span>, sep=<span class="string">' '</span>)</span><br><span class="line">test = pd.read_csv(<span class="string">'used_car_testA_20200313.csv'</span>, sep=<span class="string">' '</span>)</span><br><span class="line">print(train.shape)</span><br><span class="line">print(test.shape)</span><br></pre></td></tr></tbody></table></figure><pre><code>(150000, 31)(50000, 30)</code></pre><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">train.head()</span><br></pre></td></tr></tbody></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>SaleID</th>      <th>name</th>      <th>regDate</th>      <th>model</th>      <th>brand</th>      <th>bodyType</th>      <th>fuelType</th>      <th>gearbox</th>      <th>power</th>      <th>kilometer</th>      <th>...</th>      <th>v_5</th>      <th>v_6</th>      <th>v_7</th>      <th>v_8</th>      <th>v_9</th>      <th>v_10</th>      <th>v_11</th>      <th>v_12</th>      <th>v_13</th>      <th>v_14</th>    </tr>  </thead>  <tbody>    <tr>      <td>0</td>      <td>0</td>      <td>736</td>      <td>20040402</td>      <td>30.0</td>      <td>6</td>      <td>1.0</td>      <td>0.0</td>      <td>0.0</td>      <td>60</td>      <td>12.5</td>      <td>...</td>      <td>0.235676</td>      <td>0.101988</td>      <td>0.129549</td>      <td>0.022816</td>      <td>0.097462</td>      <td>-2.881803</td>      <td>2.804097</td>      <td>-2.420821</td>      <td>0.795292</td>      <td>0.914762</td>    </tr>    <tr>      <td>1</td>      <td>1</td>      <td>2262</td>      <td>20030301</td>      <td>40.0</td>      <td>1</td>      <td>2.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0</td>      <td>15.0</td>      <td>...</td>      <td>0.264777</td>      <td>0.121004</td>      <td>0.135731</td>      <td>0.026597</td>      <td>0.020582</td>      <td>-4.900482</td>      <td>2.096338</td>      <td>-1.030483</td>      <td>-1.722674</td>      <td>0.245522</td>    </tr>    <tr>      <td>2</td>      <td>2</td>      <td>14874</td>      <td>20040403</td>      <td>115.0</td>      <td>15</td>      <td>1.0</td>      <td>0.0</td>      <td>0.0</td>      <td>163</td>      <td>12.5</td>      <td>...</td>      <td>0.251410</td>      <td>0.114912</td>      <td>0.165147</td>      <td>0.062173</td>      <td>0.027075</td>      <td>-4.846749</td>      <td>1.803559</td>      <td>1.565330</td>      <td>-0.832687</td>      <td>-0.229963</td>    </tr>    <tr>      <td>3</td>      <td>3</td>      <td>71865</td>      <td>19960908</td>      <td>109.0</td>      <td>10</td>      <td>0.0</td>      <td>0.0</td>      <td>1.0</td>      <td>193</td>      <td>15.0</td>      <td>...</td>      <td>0.274293</td>      <td>0.110300</td>      <td>0.121964</td>      <td>0.033395</td>      <td>0.000000</td>      <td>-4.509599</td>      <td>1.285940</td>      <td>-0.501868</td>      <td>-2.438353</td>      <td>-0.478699</td>    </tr>    <tr>      <td>4</td>      <td>4</td>      <td>111080</td>      <td>20120103</td>      <td>110.0</td>      <td>5</td>      <td>1.0</td>      <td>0.0</td>      <td>0.0</td>      <td>68</td>      <td>5.0</td>      <td>...</td>      <td>0.228036</td>      <td>0.073205</td>      <td>0.091880</td>      <td>0.078819</td>      <td>0.121534</td>      <td>-1.896240</td>      <td>0.910783</td>      <td>0.931110</td>      <td>2.834518</td>      <td>1.923482</td>    </tr>  </tbody></table><p>5 rows × 31 columns</p></div><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">train.columns</span><br></pre></td></tr></tbody></table></figure><pre><code>Index(['SaleID', 'name', 'regDate', 'model', 'brand', 'bodyType', 'fuelType',       'gearbox', 'power', 'kilometer', 'notRepairedDamage', 'regionCode',       'seller', 'offerType', 'creatDate', 'price', 'v_0', 'v_1', 'v_2', 'v_3',       'v_4', 'v_5', 'v_6', 'v_7', 'v_8', 'v_9', 'v_10', 'v_11', 'v_12',       'v_13', 'v_14'],      dtype='object')</code></pre><h3 id="1️⃣-2️⃣-异常值删除"><a href="#1️⃣-2️⃣-异常值删除" class="headerlink" title="1️⃣.2️⃣  异常值删除"></a>1️⃣.2️⃣  异常值删除</h3><p>  这里可以将箱型图中的超过上下限的那些值作为异常值删除。如下图所示，箱型图中间是一个箱体，也就是粉红色部分，箱体左边，中间，右边分别有一条线，左边是下分位数($Q1$)，右边是上四分位数($Q3$)，中间是中位数($Median$)，上下四分位数之差是四分位距$IQR（Interquartile Range$，用$Q1-1.5<em>IQR$得到下边缘（最小值），$Q3+1.5</em>IQR$得到上边缘（最大值）。在上边缘之外的数据就是极大异常值，在下边缘之外的数据就是极小异常值。<br><img src="https://img-blog.csdnimg.cn/20200402004441943.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0V4Y2FsaWJ1clVsaW1pdGVk,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>搞清楚原理那我们就构造一个实现上述功能的函数吧！</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">drop_outliers</span><span class="params">(data, col_name, scale = <span class="number">1.5</span>)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    用于清洗异常值，默认用 box_plot（scale=1.5）进行清洗</span></span><br><span class="line"><span class="string">    :param data: 接收 pandas 数据格式</span></span><br><span class="line"><span class="string">    :param col_name: pandas 列名</span></span><br><span class="line"><span class="string">    :param scale: 尺度</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    data_n = data.copy()</span><br><span class="line">    data_series = data_n[col_name]</span><br><span class="line">    </span><br><span class="line">    IQR = scale * (data_series.quantile(<span class="number">0.75</span>) - data_series.quantile(<span class="number">0.25</span>)) <span class="comment"># quantile是pd内置的求四分位的函数</span></span><br><span class="line">    val_low = data_series.quantile(<span class="number">0.25</span>) - IQR <span class="comment"># 下边缘</span></span><br><span class="line">    val_up = data_series.quantile(<span class="number">0.75</span>) + IQR <span class="comment"># 上边缘</span></span><br><span class="line">    rule_low = (data_series < val_low) <span class="comment"># 下边缘的极小异常值的下标列表</span></span><br><span class="line">    rule_up = (data_series > val_up)   <span class="comment"># 上边缘的极大异常值的下标列表</span></span><br><span class="line">    </span><br><span class="line">    index = np.arange(data_series.shape[<span class="number">0</span>])[rule_low | rule_up] <span class="comment"># | 运算就是说只要rule_low和rule_up中只要有一个值为True，就把这个下标取出来</span></span><br><span class="line">    print(index)</span><br><span class="line">    print(<span class="string">"Delete number is: {}"</span>.format(len(index)))</span><br><span class="line">    </span><br><span class="line">    data_n = data_n.drop(index) <span class="comment"># 删除index对应下标的元素</span></span><br><span class="line">    data_n.reset_index(drop=<span class="literal">True</span>, inplace=<span class="literal">True</span>) <span class="comment">#下文有介绍</span></span><br><span class="line">    print(<span class="string">"Now column number is: {}"</span>.format(data_n.shape[<span class="number">0</span>]))</span><br><span class="line">    </span><br><span class="line">    index_low = np.arange(data_series.shape[<span class="number">0</span>])[rule_low] <span class="comment"># 下边缘的异常数据的描述统计量</span></span><br><span class="line">    outliers = data_series.iloc[index_low]</span><br><span class="line">    print(<span class="string">"Description of data less than the lower bound is:"</span>)</span><br><span class="line">    print(pd.Series(outliers).describe())</span><br><span class="line">    </span><br><span class="line">    index_up = np.arange(data_series.shape[<span class="number">0</span>])[rule_up] <span class="comment"># 上边缘的异常数据的描述统计量</span></span><br><span class="line">    outliers = data_series.iloc[index_up]</span><br><span class="line">    print(<span class="string">"Description of data larger than the upper bound is:"</span>)</span><br><span class="line">    print(pd.Series(outliers).describe())</span><br><span class="line">    </span><br><span class="line">    fig, ax = plt.subplots(<span class="number">1</span>, <span class="number">2</span>, figsize = (<span class="number">10</span>, <span class="number">7</span>))</span><br><span class="line">    sns.boxplot(y = data[col_name], data = data, palette = <span class="string">"Set1"</span>, ax = ax[<span class="number">0</span>])</span><br><span class="line">    sns.boxplot(y = data_n[col_name], data = data_n, palette = <span class="string">"Set1"</span>, ax = ax[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">return</span> data_n</span><br></pre></td></tr></tbody></table></figure><p>这里<code>reset_index</code>可以还原索引，重新变为默认的整型索引 </p><p><code>DataFrame.reset_index(level=None, drop=False, inplace=False, col_level=0, col_fill=”)</code></p><ul><li><code>level</code>：<code>int</code>、<code>str</code>、<code>tuple</code>或<code>list</code>，默认无，仅从索引中删除给定级别。默认情况下移除所有级别。控制了具体要还原的那个等级的索引</li><li><code>drop</code>：<code>drop</code>为<code>False</code>则索引列会被还原为普通列，否则会丢失</li><li><code>inplace</code>：默认为<code>False</code>，适当修改<code>DataFrame</code>(不要创建新对象)</li><li><code>col_level</code>：<code>int</code>或<code>str</code>，默认值为0，如果列有多个级别，则确定将标签插入到哪个级别。默认情况下，它将插入到第一级。</li><li><code>col_fill</code>：对象，默认‘’，如果列有多个级别，则确定其他级别的命名方式。如果没有，则重复索引名</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop_outliers(train, <span class="string">'power'</span>, scale=<span class="number">1.5</span>)</span><br></pre></td></tr></tbody></table></figure><pre><code>[    33     77    104 ... 149967 149981 149984]Delete number is: 4878Now column number is: 145122Description of data less than the lower bound is:count    0.0mean     NaNstd      NaNmin      NaN25%      NaN50%      NaN75%      NaNmax      NaNName: power, dtype: float64Description of data larger than the upper bound is:count     4878.000000mean       410.132021std        884.219933min        264.00000025%        286.00000050%        306.00000075%        349.000000max      19312.000000Name: power, dtype: float64</code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>SaleID</th>      <th>name</th>      <th>regDate</th>      <th>model</th>      <th>brand</th>      <th>bodyType</th>      <th>fuelType</th>      <th>gearbox</th>      <th>power</th>      <th>kilometer</th>      <th>...</th>      <th>v_5</th>      <th>v_6</th>      <th>v_7</th>      <th>v_8</th>      <th>v_9</th>      <th>v_10</th>      <th>v_11</th>      <th>v_12</th>      <th>v_13</th>      <th>v_14</th>    </tr>  </thead>  <tbody>    <tr>      <td>0</td>      <td>0</td>      <td>736</td>      <td>20040402</td>      <td>30.0</td>      <td>6</td>      <td>1.0</td>      <td>0.0</td>      <td>0.0</td>      <td>60</td>      <td>12.5</td>      <td>...</td>      <td>0.235676</td>      <td>0.101988</td>      <td>0.129549</td>      <td>0.022816</td>      <td>0.097462</td>      <td>-2.881803</td>      <td>2.804097</td>      <td>-2.420821</td>      <td>0.795292</td>      <td>0.914762</td>    </tr>    <tr>      <td>1</td>      <td>1</td>      <td>2262</td>      <td>20030301</td>      <td>40.0</td>      <td>1</td>      <td>2.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0</td>      <td>15.0</td>      <td>...</td>      <td>0.264777</td>      <td>0.121004</td>      <td>0.135731</td>      <td>0.026597</td>      <td>0.020582</td>      <td>-4.900482</td>      <td>2.096338</td>      <td>-1.030483</td>      <td>-1.722674</td>      <td>0.245522</td>    </tr>    <tr>      <td>2</td>      <td>2</td>      <td>14874</td>      <td>20040403</td>      <td>115.0</td>      <td>15</td>      <td>1.0</td>      <td>0.0</td>      <td>0.0</td>      <td>163</td>      <td>12.5</td>      <td>...</td>      <td>0.251410</td>      <td>0.114912</td>      <td>0.165147</td>      <td>0.062173</td>      <td>0.027075</td>      <td>-4.846749</td>      <td>1.803559</td>      <td>1.565330</td>      <td>-0.832687</td>      <td>-0.229963</td>    </tr>    <tr>      <td>3</td>      <td>3</td>      <td>71865</td>      <td>19960908</td>      <td>109.0</td>      <td>10</td>      <td>0.0</td>      <td>0.0</td>      <td>1.0</td>      <td>193</td>      <td>15.0</td>      <td>...</td>      <td>0.274293</td>      <td>0.110300</td>      <td>0.121964</td>      <td>0.033395</td>      <td>0.000000</td>      <td>-4.509599</td>      <td>1.285940</td>      <td>-0.501868</td>      <td>-2.438353</td>      <td>-0.478699</td>    </tr>    <tr>      <td>4</td>      <td>4</td>      <td>111080</td>      <td>20120103</td>      <td>110.0</td>      <td>5</td>      <td>1.0</td>      <td>0.0</td>      <td>0.0</td>      <td>68</td>      <td>5.0</td>      <td>...</td>      <td>0.228036</td>      <td>0.073205</td>      <td>0.091880</td>      <td>0.078819</td>      <td>0.121534</td>      <td>-1.896240</td>      <td>0.910783</td>      <td>0.931110</td>      <td>2.834518</td>      <td>1.923482</td>    </tr>    <tr>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>    </tr>    <tr>      <td>145117</td>      <td>149995</td>      <td>163978</td>      <td>20000607</td>      <td>121.0</td>      <td>10</td>      <td>4.0</td>      <td>0.0</td>      <td>1.0</td>      <td>163</td>      <td>15.0</td>      <td>...</td>      <td>0.280264</td>      <td>0.000310</td>      <td>0.048441</td>      <td>0.071158</td>      <td>0.019174</td>      <td>1.988114</td>      <td>-2.983973</td>      <td>0.589167</td>      <td>-1.304370</td>      <td>-0.302592</td>    </tr>    <tr>      <td>145118</td>      <td>149996</td>      <td>184535</td>      <td>20091102</td>      <td>116.0</td>      <td>11</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>125</td>      <td>10.0</td>      <td>...</td>      <td>0.253217</td>      <td>0.000777</td>      <td>0.084079</td>      <td>0.099681</td>      <td>0.079371</td>      <td>1.839166</td>      <td>-2.774615</td>      <td>2.553994</td>      <td>0.924196</td>      <td>-0.272160</td>    </tr>    <tr>      <td>145119</td>      <td>149997</td>      <td>147587</td>      <td>20101003</td>      <td>60.0</td>      <td>11</td>      <td>1.0</td>      <td>1.0</td>      <td>0.0</td>      <td>90</td>      <td>6.0</td>      <td>...</td>      <td>0.233353</td>      <td>0.000705</td>      <td>0.118872</td>      <td>0.100118</td>      <td>0.097914</td>      <td>2.439812</td>      <td>-1.630677</td>      <td>2.290197</td>      <td>1.891922</td>      <td>0.414931</td>    </tr>    <tr>      <td>145120</td>      <td>149998</td>      <td>45907</td>      <td>20060312</td>      <td>34.0</td>      <td>10</td>      <td>3.0</td>      <td>1.0</td>      <td>0.0</td>      <td>156</td>      <td>15.0</td>      <td>...</td>      <td>0.256369</td>      <td>0.000252</td>      <td>0.081479</td>      <td>0.083558</td>      <td>0.081498</td>      <td>2.075380</td>      <td>-2.633719</td>      <td>1.414937</td>      <td>0.431981</td>      <td>-1.659014</td>    </tr>    <tr>      <td>145121</td>      <td>149999</td>      <td>177672</td>      <td>19990204</td>      <td>19.0</td>      <td>28</td>      <td>6.0</td>      <td>0.0</td>      <td>1.0</td>      <td>193</td>      <td>12.5</td>      <td>...</td>      <td>0.284475</td>      <td>0.000000</td>      <td>0.040072</td>      <td>0.062543</td>      <td>0.025819</td>      <td>1.978453</td>      <td>-3.179913</td>      <td>0.031724</td>      <td>-1.483350</td>      <td>-0.342674</td>    </tr>  </tbody></table><p>145122 rows × 31 columns</p></div><p><img src="https://img-blog.csdnimg.cn/20200402004634297.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0V4Y2FsaWJ1clVsaW1pdGVk,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>从这张删除异常值前后的箱型图对比可以看出，剔除异常值后，数据的分布就很均匀了。</p><p>下面我们就批量对所有的特征进行一次异常数据删除：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Bach_drop_outliers</span><span class="params">(data,scale=<span class="number">1.5</span>)</span>:</span></span><br><span class="line">    dataNew = data.copy()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> fea <span class="keyword">in</span> data.columns:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            IQR = scale * (dataNew[fea].quantile(<span class="number">0.75</span>) - dataNew[fea].quantile(<span class="number">0.25</span>)) <span class="comment"># quantile是pd内置的求四分位的函数</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        val_low = dataNew[fea].quantile(<span class="number">0.25</span>) - IQR <span class="comment"># 下边缘</span></span><br><span class="line">        val_up = dataNew[fea].quantile(<span class="number">0.75</span>) + IQR <span class="comment"># 上边缘</span></span><br><span class="line">        rule_low = (dataNew[fea] < val_low) <span class="comment"># 下边缘的极小异常值的下标列表</span></span><br><span class="line">        rule_up = (dataNew[fea] > val_up)   <span class="comment"># 上边缘的极大异常值的下标列表</span></span><br><span class="line">        </span><br><span class="line">        index = np.arange(dataNew[fea].shape[<span class="number">0</span>])[rule_low | rule_up] <span class="comment"># | 运算就是说只要rule_low和rule_up中只要有一个值为True，就把这个下标取出来</span></span><br><span class="line">        print(<span class="string">"feature %s deleted number is %d"</span>%(fea, len(index)))</span><br><span class="line">        </span><br><span class="line">        dataNew = dataNew.drop(index)<span class="comment"># 删除index对应下标的元素</span></span><br><span class="line">        dataNew.reset_index(drop=<span class="literal">True</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">    fig, ax = plt.subplots(<span class="number">5</span>, <span class="number">6</span>, figsize = (<span class="number">20</span>, <span class="number">15</span>))</span><br><span class="line">    x = <span class="number">0</span></span><br><span class="line">    y = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> fea <span class="keyword">in</span> dataNew.columns:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            sns.boxplot(y = dataNew[fea], data =dataNew, palette = <span class="string">"Set2"</span>, ax = ax[x][y])</span><br><span class="line">            y+=<span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> y == <span class="number">6</span>:</span><br><span class="line">                y = <span class="number">0</span></span><br><span class="line">                x += <span class="number">1</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            print(fea)</span><br><span class="line">            y+=<span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> y == <span class="number">6</span>:</span><br><span class="line">                y = <span class="number">0</span></span><br><span class="line">                x += <span class="number">1</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">return</span> dataNew</span><br><span class="line"></span><br><span class="line">train = Bach_drop_outliers(train)</span><br></pre></td></tr></tbody></table></figure><pre><code>feature SaleID deleted number is 0feature name deleted number is 0feature regDate deleted number is 0feature model deleted number is 9720feature brand deleted number is 4032feature bodyType deleted number is 5458feature fuelType deleted number is 333feature gearbox deleted number is 26829feature power deleted number is 1506feature kilometer deleted number is 15306feature regionCode deleted number is 4feature seller deleted number is 1feature offerType deleted number is 0feature creatDate deleted number is 13989feature price deleted number is 4527feature v_0 deleted number is 2558feature v_1 deleted number is 0feature v_2 deleted number is 487feature v_3 deleted number is 173feature v_4 deleted number is 61feature v_5 deleted number is 0feature v_6 deleted number is 0feature v_7 deleted number is 64feature v_8 deleted number is 0feature v_9 deleted number is 24feature v_10 deleted number is 0feature v_11 deleted number is 0feature v_12 deleted number is 4feature v_13 deleted number is 0feature v_14 deleted number is 1944notRepairedDamagev_14</code></pre><p><img src="https://img-blog.csdnimg.cn/20200402004549377.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0V4Y2FsaWJ1clVsaW1pdGVk,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>可以看出，经过箱型图异常值删除后，新数据的箱型图的数据几乎没有异常值了，甚至有些箱型图的数据是一条直线，当然那是因为数据本身就是种类非0即1。</p><h2 id="2️⃣-树模型的特征构造"><a href="#2️⃣-树模型的特征构造" class="headerlink" title="2️⃣ 树模型的特征构造"></a>2️⃣ 树模型的特征构造</h2><p>  训练集和测试集放在一起，方便构造特征</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">train[<span class="string">'train'</span>] = <span class="number">1</span></span><br><span class="line">test[<span class="string">'train'</span>] = <span class="number">0</span></span><br><span class="line">data = pd.concat([train, test], ignore_index=<span class="literal">True</span>, sort=<span class="literal">False</span>)</span><br><span class="line">data</span><br></pre></td></tr></tbody></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>SaleID</th>      <th>name</th>      <th>regDate</th>      <th>model</th>      <th>brand</th>      <th>bodyType</th>      <th>fuelType</th>      <th>gearbox</th>      <th>power</th>      <th>kilometer</th>      <th>...</th>      <th>v_6</th>      <th>v_7</th>      <th>v_8</th>      <th>v_9</th>      <th>v_10</th>      <th>v_11</th>      <th>v_12</th>      <th>v_13</th>      <th>v_14</th>      <th>train</th>    </tr>  </thead>  <tbody>    <tr>      <td>0</td>      <td>1</td>      <td>2262</td>      <td>20030301</td>      <td>40.0</td>      <td>1</td>      <td>2.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0</td>      <td>15.0</td>      <td>...</td>      <td>0.121004</td>      <td>0.135731</td>      <td>0.026597</td>      <td>0.020582</td>      <td>-4.900482</td>      <td>2.096338</td>      <td>-1.030483</td>      <td>-1.722674</td>      <td>0.245522</td>      <td>1</td>    </tr>    <tr>      <td>1</td>      <td>5</td>      <td>137642</td>      <td>20090602</td>      <td>24.0</td>      <td>10</td>      <td>0.0</td>      <td>1.0</td>      <td>0.0</td>      <td>109</td>      <td>10.0</td>      <td>...</td>      <td>0.000518</td>      <td>0.119838</td>      <td>0.090922</td>      <td>0.048769</td>      <td>1.885526</td>      <td>-2.721943</td>      <td>2.457660</td>      <td>-0.286973</td>      <td>0.206573</td>      <td>1</td>    </tr>    <tr>      <td>2</td>      <td>7</td>      <td>165346</td>      <td>19990706</td>      <td>26.0</td>      <td>14</td>      <td>1.0</td>      <td>0.0</td>      <td>0.0</td>      <td>101</td>      <td>15.0</td>      <td>...</td>      <td>0.000000</td>      <td>0.122943</td>      <td>0.039839</td>      <td>0.082413</td>      <td>3.693829</td>      <td>-0.245014</td>      <td>-2.192810</td>      <td>0.236728</td>      <td>0.195567</td>      <td>1</td>    </tr>    <tr>      <td>3</td>      <td>10</td>      <td>18961</td>      <td>20050811</td>      <td>19.0</td>      <td>9</td>      <td>3.0</td>      <td>1.0</td>      <td>0.0</td>      <td>101</td>      <td>15.0</td>      <td>...</td>      <td>0.105385</td>      <td>0.077271</td>      <td>0.042445</td>      <td>0.060794</td>      <td>-4.206000</td>      <td>1.060391</td>      <td>-0.647515</td>      <td>-0.191194</td>      <td>0.349187</td>      <td>1</td>    </tr>    <tr>      <td>4</td>      <td>13</td>      <td>8129</td>      <td>20041110</td>      <td>65.0</td>      <td>1</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>150</td>      <td>15.0</td>      <td>...</td>      <td>0.106950</td>      <td>0.134945</td>      <td>0.050364</td>      <td>0.051359</td>      <td>-4.614692</td>      <td>0.821889</td>      <td>0.753490</td>      <td>-0.886425</td>      <td>-0.341562</td>      <td>1</td>    </tr>    <tr>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>    </tr>    <tr>      <td>112975</td>      <td>199995</td>      <td>20903</td>      <td>19960503</td>      <td>4.0</td>      <td>4</td>      <td>4.0</td>      <td>0.0</td>      <td>0.0</td>      <td>116</td>      <td>15.0</td>      <td>...</td>      <td>0.130044</td>      <td>0.049833</td>      <td>0.028807</td>      <td>0.004616</td>      <td>-5.978511</td>      <td>1.303174</td>      <td>-1.207191</td>      <td>-1.981240</td>      <td>-0.357695</td>      <td>0</td>    </tr>    <tr>      <td>112976</td>      <td>199996</td>      <td>708</td>      <td>19991011</td>      <td>0.0</td>      <td>0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>75</td>      <td>15.0</td>      <td>...</td>      <td>0.108095</td>      <td>0.066039</td>      <td>0.025468</td>      <td>0.025971</td>      <td>-3.913825</td>      <td>1.759524</td>      <td>-2.075658</td>      <td>-1.154847</td>      <td>0.169073</td>      <td>0</td>    </tr>    <tr>      <td>112977</td>      <td>199997</td>      <td>6693</td>      <td>20040412</td>      <td>49.0</td>      <td>1</td>      <td>0.0</td>      <td>1.0</td>      <td>1.0</td>      <td>224</td>      <td>15.0</td>      <td>...</td>      <td>0.105724</td>      <td>0.117652</td>      <td>0.057479</td>      <td>0.015669</td>      <td>-4.639065</td>      <td>0.654713</td>      <td>1.137756</td>      <td>-1.390531</td>      <td>0.254420</td>      <td>0</td>    </tr>    <tr>      <td>112978</td>      <td>199998</td>      <td>96900</td>      <td>20020008</td>      <td>27.0</td>      <td>1</td>      <td>0.0</td>      <td>0.0</td>      <td>1.0</td>      <td>334</td>      <td>15.0</td>      <td>...</td>      <td>0.000490</td>      <td>0.137366</td>      <td>0.086216</td>      <td>0.051383</td>      <td>1.833504</td>      <td>-2.828687</td>      <td>2.465630</td>      <td>-0.911682</td>      <td>-2.057353</td>      <td>0</td>    </tr>    <tr>      <td>112979</td>      <td>199999</td>      <td>193384</td>      <td>20041109</td>      <td>166.0</td>      <td>6</td>      <td>1.0</td>      <td>NaN</td>      <td>1.0</td>      <td>68</td>      <td>9.0</td>      <td>...</td>      <td>0.000300</td>      <td>0.103534</td>      <td>0.080625</td>      <td>0.124264</td>      <td>2.914571</td>      <td>-1.135270</td>      <td>0.547628</td>      <td>2.094057</td>      <td>-1.552150</td>      <td>0</td>    </tr>  </tbody></table><p>112980 rows × 32 columns</p></div><h3 id="2️⃣-1️⃣-时间特征构造"><a href="#2️⃣-1️⃣-时间特征构造" class="headerlink" title="2️⃣.1️⃣ 时间特征构造"></a>2️⃣.1️⃣ 时间特征构造</h3><ul><li>使用时间：<code>data['creatDate']</code> - <code>data['regDate']</code>，反应汽车使用时间，一般来说价格与使用时间成反比</li><li>不过要注意，数据里有时间出错的格式，所以我们需要 errors=’coerce’</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data[<span class="string">'used_time'</span>] = (pd.to_datetime(data[<span class="string">'creatDate'</span>], format=<span class="string">'%Y%m%d'</span>, errors=<span class="string">'coerce'</span>) - </span><br><span class="line">                            pd.to_datetime(data[<span class="string">'regDate'</span>], format=<span class="string">'%Y%m%d'</span>, errors=<span class="string">'coerce'</span>)).dt.days</span><br><span class="line">data[<span class="string">'used_time'</span>]</span><br></pre></td></tr></tbody></table></figure><pre><code>0         4757.01         2482.02         6108.03         3874.04         4154.0           ...  112975    7261.0112976    6014.0112977    4345.0112978       NaN112979    4151.0Name: used_time, Length: 112980, dtype: float64</code></pre><ul><li>看一下空数据，有 7.6k 个样本的时间是有问题的，我们可以选择删除，也可以选择放着。</li><li>但是这里不建议删除，因为删除缺失数据占总样本量过大，3.8%</li><li>我们可以先放着，因为如果我们 XGBoost 之类的决策树，其本身就能处理缺失值，所以可以不用管；</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data[<span class="string">'used_time'</span>].isnull().sum()</span><br></pre></td></tr></tbody></table></figure><pre><code>8591</code></pre><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.isnull().sum().sum()</span><br></pre></td></tr></tbody></table></figure><pre><code>70585</code></pre><h3 id="2️⃣-2️⃣-城市信息特征提取"><a href="#2️⃣-2️⃣-城市信息特征提取" class="headerlink" title="2️⃣.2️⃣ 城市信息特征提取"></a>2️⃣.2️⃣ 城市信息特征提取</h3><ul><li>从邮编中提取城市信息，因为是德国的数据，所以参考德国的邮编，相当于加入了先验知识</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data[<span class="string">'city'</span>] = data[<span class="string">'regionCode'</span>].apply(<span class="keyword">lambda</span> x : str(x)[:<span class="number">-3</span>])</span><br><span class="line">data[<span class="string">'city'</span>]</span><br></pre></td></tr></tbody></table></figure><pre><code>0         41         32         43         14         3         ..112975    3112976    1112977    3112978    1112979    3Name: city, Length: 112980, dtype: object</code></pre><h3 id="2️⃣-3️⃣-品牌特征提取"><a href="#2️⃣-3️⃣-品牌特征提取" class="headerlink" title="2️⃣.3️⃣ 品牌特征提取"></a>2️⃣.3️⃣ 品牌特征提取</h3><p>  计算某品牌的销售统计量，这里要以 train 的数据计算统计量。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">train_gb = train.groupby(<span class="string">"brand"</span>)</span><br><span class="line">all_info = {}</span><br><span class="line"><span class="keyword">for</span> kind, kind_data <span class="keyword">in</span> train_gb:</span><br><span class="line">    info = {}</span><br><span class="line">    kind_data = kind_data[kind_data[<span class="string">'price'</span>] > <span class="number">0</span>] <span class="comment"># kind_data['price'] > 0 返回的是下标再取一次列表就得到了数据</span></span><br><span class="line">    info[<span class="string">'brand_amount'</span>] = len(kind_data)</span><br><span class="line">    info[<span class="string">'brand_price_max'</span>] = kind_data.price.max()</span><br><span class="line">    info[<span class="string">'brand_price_median'</span>] = kind_data.price.median()</span><br><span class="line">    info[<span class="string">'brand_price_min'</span>] = kind_data.price.min()</span><br><span class="line">    info[<span class="string">'brand_price_sum'</span>] = kind_data.price.sum()</span><br><span class="line">    info[<span class="string">'brand_price_std'</span>] = kind_data.price.std()</span><br><span class="line">    info[<span class="string">'brand_price_average'</span>] = round(kind_data.price.sum() / (len(kind_data) + <span class="number">1</span>), <span class="number">2</span>)</span><br><span class="line">    all_info[kind] = info</span><br><span class="line">brand_fe = pd.DataFrame(all_info).T.reset_index().rename(columns={<span class="string">"index"</span>: <span class="string">"brand"</span>})</span><br><span class="line">data = data.merge(brand_fe, how=<span class="string">'left'</span>, on=<span class="string">'brand'</span>)</span><br><span class="line">data</span><br></pre></td></tr></tbody></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>SaleID</th>      <th>name</th>      <th>regDate</th>      <th>model</th>      <th>brand</th>      <th>bodyType</th>      <th>fuelType</th>      <th>gearbox</th>      <th>power</th>      <th>kilometer</th>      <th>...</th>      <th>train</th>      <th>used_time</th>      <th>city</th>      <th>brand_amount</th>      <th>brand_price_max</th>      <th>brand_price_median</th>      <th>brand_price_min</th>      <th>brand_price_sum</th>      <th>brand_price_std</th>      <th>brand_price_average</th>    </tr>  </thead>  <tbody>    <tr>      <td>0</td>      <td>1</td>      <td>2262</td>      <td>20030301</td>      <td>40.0</td>      <td>1</td>      <td>2.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0</td>      <td>15.0</td>      <td>...</td>      <td>1</td>      <td>4757.0</td>      <td>4</td>      <td>4940.0</td>      <td>9500.0</td>      <td>2999.0</td>      <td>149.0</td>      <td>17934852.0</td>      <td>2537.956443</td>      <td>3629.80</td>    </tr>    <tr>      <td>1</td>      <td>5</td>      <td>137642</td>      <td>20090602</td>      <td>24.0</td>      <td>10</td>      <td>0.0</td>      <td>1.0</td>      <td>0.0</td>      <td>109</td>      <td>10.0</td>      <td>...</td>      <td>1</td>      <td>2482.0</td>      <td>3</td>      <td>3557.0</td>      <td>9500.0</td>      <td>2490.0</td>      <td>200.0</td>      <td>10936962.0</td>      <td>2180.881827</td>      <td>3073.91</td>    </tr>    <tr>      <td>2</td>      <td>7</td>      <td>165346</td>      <td>19990706</td>      <td>26.0</td>      <td>14</td>      <td>1.0</td>      <td>0.0</td>      <td>0.0</td>      <td>101</td>      <td>15.0</td>      <td>...</td>      <td>1</td>      <td>6108.0</td>      <td>4</td>      <td>8784.0</td>      <td>9500.0</td>      <td>1350.0</td>      <td>13.0</td>      <td>17445064.0</td>      <td>1797.704405</td>      <td>1985.78</td>    </tr>    <tr>      <td>3</td>      <td>10</td>      <td>18961</td>      <td>20050811</td>      <td>19.0</td>      <td>9</td>      <td>3.0</td>      <td>1.0</td>      <td>0.0</td>      <td>101</td>      <td>15.0</td>      <td>...</td>      <td>1</td>      <td>3874.0</td>      <td>1</td>      <td>4487.0</td>      <td>9500.0</td>      <td>1250.0</td>      <td>55.0</td>      <td>7867901.0</td>      <td>1556.621159</td>      <td>1753.10</td>    </tr>    <tr>      <td>4</td>      <td>13</td>      <td>8129</td>      <td>20041110</td>      <td>65.0</td>      <td>1</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>150</td>      <td>15.0</td>      <td>...</td>      <td>1</td>      <td>4154.0</td>      <td>3</td>      <td>4940.0</td>      <td>9500.0</td>      <td>2999.0</td>      <td>149.0</td>      <td>17934852.0</td>      <td>2537.956443</td>      <td>3629.80</td>    </tr>    <tr>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>    </tr>    <tr>      <td>112975</td>      <td>199995</td>      <td>20903</td>      <td>19960503</td>      <td>4.0</td>      <td>4</td>      <td>4.0</td>      <td>0.0</td>      <td>0.0</td>      <td>116</td>      <td>15.0</td>      <td>...</td>      <td>0</td>      <td>7261.0</td>      <td>3</td>      <td>6368.0</td>      <td>9500.0</td>      <td>3000.0</td>      <td>150.0</td>      <td>24046576.0</td>      <td>2558.650243</td>      <td>3775.57</td>    </tr>    <tr>      <td>112976</td>      <td>199996</td>      <td>708</td>      <td>19991011</td>      <td>0.0</td>      <td>0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>75</td>      <td>15.0</td>      <td>...</td>      <td>0</td>      <td>6014.0</td>      <td>1</td>      <td>16371.0</td>      <td>9500.0</td>      <td>2150.0</td>      <td>50.0</td>      <td>46735356.0</td>      <td>2276.755156</td>      <td>2854.59</td>    </tr>    <tr>      <td>112977</td>      <td>199997</td>      <td>6693</td>      <td>20040412</td>      <td>49.0</td>      <td>1</td>      <td>0.0</td>      <td>1.0</td>      <td>1.0</td>      <td>224</td>      <td>15.0</td>      <td>...</td>      <td>0</td>      <td>4345.0</td>      <td>3</td>      <td>4940.0</td>      <td>9500.0</td>      <td>2999.0</td>      <td>149.0</td>      <td>17934852.0</td>      <td>2537.956443</td>      <td>3629.80</td>    </tr>    <tr>      <td>112978</td>      <td>199998</td>      <td>96900</td>      <td>20020008</td>      <td>27.0</td>      <td>1</td>      <td>0.0</td>      <td>0.0</td>      <td>1.0</td>      <td>334</td>      <td>15.0</td>      <td>...</td>      <td>0</td>      <td>NaN</td>      <td>1</td>      <td>4940.0</td>      <td>9500.0</td>      <td>2999.0</td>      <td>149.0</td>      <td>17934852.0</td>      <td>2537.956443</td>      <td>3629.80</td>    </tr>    <tr>      <td>112979</td>      <td>199999</td>      <td>193384</td>      <td>20041109</td>      <td>166.0</td>      <td>6</td>      <td>1.0</td>      <td>NaN</td>      <td>1.0</td>      <td>68</td>      <td>9.0</td>      <td>...</td>      <td>0</td>      <td>4151.0</td>      <td>3</td>      <td>5778.0</td>      <td>9500.0</td>      <td>1400.0</td>      <td>50.0</td>      <td>11955982.0</td>      <td>1871.933447</td>      <td>2068.87</td>    </tr>  </tbody></table><p>112980 rows × 41 columns</p></div><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brand_fe</span><br></pre></td></tr></tbody></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>brand</th>      <th>brand_amount</th>      <th>brand_price_max</th>      <th>brand_price_median</th>      <th>brand_price_min</th>      <th>brand_price_sum</th>      <th>brand_price_std</th>      <th>brand_price_average</th>    </tr>  </thead>  <tbody>    <tr>      <td>0</td>      <td>0</td>      <td>16371.0</td>      <td>9500.0</td>      <td>2150.0</td>      <td>50.0</td>      <td>46735356.0</td>      <td>2276.755156</td>      <td>2854.59</td>    </tr>    <tr>      <td>1</td>      <td>1</td>      <td>4940.0</td>      <td>9500.0</td>      <td>2999.0</td>      <td>149.0</td>      <td>17934852.0</td>      <td>2537.956443</td>      <td>3629.80</td>    </tr>    <tr>      <td>2</td>      <td>3</td>      <td>665.0</td>      <td>9500.0</td>      <td>2800.0</td>      <td>99.0</td>      <td>2158773.0</td>      <td>2058.532395</td>      <td>3241.40</td>    </tr>    <tr>      <td>3</td>      <td>4</td>      <td>6368.0</td>      <td>9500.0</td>      <td>3000.0</td>      <td>150.0</td>      <td>24046576.0</td>      <td>2558.650243</td>      <td>3775.57</td>    </tr>    <tr>      <td>4</td>      <td>5</td>      <td>2842.0</td>      <td>9500.0</td>      <td>1850.0</td>      <td>75.0</td>      <td>6562224.0</td>      <td>1738.415572</td>      <td>2308.20</td>    </tr>    <tr>      <td>5</td>      <td>6</td>      <td>5778.0</td>      <td>9500.0</td>      <td>1400.0</td>      <td>50.0</td>      <td>11955982.0</td>      <td>1871.933447</td>      <td>2068.87</td>    </tr>    <tr>      <td>6</td>      <td>7</td>      <td>1035.0</td>      <td>9500.0</td>      <td>1500.0</td>      <td>100.0</td>      <td>2372550.0</td>      <td>2071.320262</td>      <td>2290.11</td>    </tr>    <tr>      <td>7</td>      <td>8</td>      <td>705.0</td>      <td>9500.0</td>      <td>1100.0</td>      <td>125.0</td>      <td>1077211.0</td>      <td>1318.748474</td>      <td>1525.79</td>    </tr>    <tr>      <td>8</td>      <td>9</td>      <td>4487.0</td>      <td>9500.0</td>      <td>1250.0</td>      <td>55.0</td>      <td>7867901.0</td>      <td>1556.621159</td>      <td>1753.10</td>    </tr>    <tr>      <td>9</td>      <td>10</td>      <td>3557.0</td>      <td>9500.0</td>      <td>2490.0</td>      <td>200.0</td>      <td>10936962.0</td>      <td>2180.881827</td>      <td>3073.91</td>    </tr>    <tr>      <td>10</td>      <td>11</td>      <td>1390.0</td>      <td>9500.0</td>      <td>1750.0</td>      <td>50.0</td>      <td>3513591.0</td>      <td>2151.572044</td>      <td>2525.95</td>    </tr>    <tr>      <td>11</td>      <td>12</td>      <td>549.0</td>      <td>9500.0</td>      <td>1850.0</td>      <td>100.0</td>      <td>1413264.0</td>      <td>2091.218447</td>      <td>2569.57</td>    </tr>    <tr>      <td>12</td>      <td>13</td>      <td>1689.0</td>      <td>8950.0</td>      <td>1250.0</td>      <td>25.0</td>      <td>2832005.0</td>      <td>1363.018568</td>      <td>1675.74</td>    </tr>    <tr>      <td>13</td>      <td>14</td>      <td>8784.0</td>      <td>9500.0</td>      <td>1350.0</td>      <td>13.0</td>      <td>17445064.0</td>      <td>1797.704405</td>      <td>1985.78</td>    </tr>    <tr>      <td>14</td>      <td>15</td>      <td>389.0</td>      <td>9500.0</td>      <td>5700.0</td>      <td>1800.0</td>      <td>2247357.0</td>      <td>1795.404288</td>      <td>5762.45</td>    </tr>    <tr>      <td>15</td>      <td>16</td>      <td>291.0</td>      <td>8900.0</td>      <td>1950.0</td>      <td>300.0</td>      <td>636703.0</td>      <td>1223.490908</td>      <td>2180.49</td>    </tr>    <tr>      <td>16</td>      <td>17</td>      <td>542.0</td>      <td>9500.0</td>      <td>1970.0</td>      <td>150.0</td>      <td>1444129.0</td>      <td>2136.402905</td>      <td>2659.54</td>    </tr>    <tr>      <td>17</td>      <td>18</td>      <td>66.0</td>      <td>8990.0</td>      <td>1650.0</td>      <td>150.0</td>      <td>167360.0</td>      <td>2514.210817</td>      <td>2497.91</td>    </tr>    <tr>      <td>18</td>      <td>19</td>      <td>341.0</td>      <td>9100.0</td>      <td>1200.0</td>      <td>130.0</td>      <td>540335.0</td>      <td>1337.203100</td>      <td>1579.93</td>    </tr>    <tr>      <td>19</td>      <td>20</td>      <td>514.0</td>      <td>8150.0</td>      <td>1200.0</td>      <td>100.0</td>      <td>818973.0</td>      <td>1276.623577</td>      <td>1590.24</td>    </tr>    <tr>      <td>20</td>      <td>21</td>      <td>527.0</td>      <td>8900.0</td>      <td>1890.0</td>      <td>99.0</td>      <td>1285258.0</td>      <td>1832.524896</td>      <td>2434.20</td>    </tr>    <tr>      <td>21</td>      <td>22</td>      <td>222.0</td>      <td>9300.0</td>      <td>1925.0</td>      <td>190.0</td>      <td>592296.0</td>      <td>2118.280894</td>      <td>2656.04</td>    </tr>    <tr>      <td>22</td>      <td>23</td>      <td>68.0</td>      <td>9500.0</td>      <td>1194.5</td>      <td>100.0</td>      <td>110253.0</td>      <td>1754.883573</td>      <td>1597.87</td>    </tr>    <tr>      <td>23</td>      <td>24</td>      <td>4.0</td>      <td>8600.0</td>      <td>7550.0</td>      <td>5999.0</td>      <td>29699.0</td>      <td>1072.435041</td>      <td>5939.80</td>    </tr>    <tr>      <td>24</td>      <td>25</td>      <td>735.0</td>      <td>9500.0</td>      <td>1500.0</td>      <td>100.0</td>      <td>1725999.0</td>      <td>2152.726491</td>      <td>2345.11</td>    </tr>    <tr>      <td>25</td>      <td>26</td>      <td>121.0</td>      <td>9500.0</td>      <td>2699.0</td>      <td>300.0</td>      <td>417260.0</td>      <td>2563.586943</td>      <td>3420.16</td>    </tr>  </tbody></table></div><h2 id="3️⃣-树模型的数据分桶"><a href="#3️⃣-树模型的数据分桶" class="headerlink" title="3️⃣ 树模型的数据分桶"></a>3️⃣ 树模型的数据分桶</h2><p>  数据分箱（也称为离散分箱或分段）是一种数据预处理技术，用于减少次要观察误差的影响，是一种将多个连续值分组为较少数量的“分箱”的方法。例如我们有各个年龄的数据的统计值，可以分成某个段的年龄的值。</p><ol><li>离散后稀疏向量内积乘法运算速度更快，计算结果也方便存储，容易扩展；</li><li>离散后的特征对异常值更具鲁棒性，如 age>30 为 1 否则为 0，对于年龄为 200 的也不会对模型造成很大的干扰；</li><li>LR 属于广义线性模型，表达能力有限，经过离散化后，每个变量有单独的权重，这相当于引入了非线性，能够提升模型的表达能力，加大拟合；</li><li>离散后特征可以进行特征交叉，提升表达能力，由 M+N 个变量变成 M*N 个变量，进一步引入非线形，提升了表达能力；</li><li>特征离散后模型更稳定，如用户年龄区间，不会因为用户年龄长了一岁就变化</li></ol><p>下面以<code>power</code>为例子，做一次数据分桶</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bin = [i*<span class="number">10</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">31</span>)]</span><br><span class="line">data[<span class="string">'power_bin'</span>] = pd.cut(data[<span class="string">'power'</span>], bin, labels=<span class="literal">False</span>)</span><br><span class="line">data[[<span class="string">'power_bin'</span>, <span class="string">'power'</span>]]</span><br></pre></td></tr></tbody></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>power_bin</th>      <th>power</th>    </tr>  </thead>  <tbody>    <tr>      <td>0</td>      <td>NaN</td>      <td>0</td>    </tr>    <tr>      <td>1</td>      <td>10.0</td>      <td>109</td>    </tr>    <tr>      <td>2</td>      <td>10.0</td>      <td>101</td>    </tr>    <tr>      <td>3</td>      <td>10.0</td>      <td>101</td>    </tr>    <tr>      <td>4</td>      <td>14.0</td>      <td>150</td>    </tr>    <tr>      <td>...</td>      <td>...</td>      <td>...</td>    </tr>    <tr>      <td>112975</td>      <td>11.0</td>      <td>116</td>    </tr>    <tr>      <td>112976</td>      <td>7.0</td>      <td>75</td>    </tr>    <tr>      <td>112977</td>      <td>22.0</td>      <td>224</td>    </tr>    <tr>      <td>112978</td>      <td>NaN</td>      <td>334</td>    </tr>    <tr>      <td>112979</td>      <td>6.0</td>      <td>68</td>    </tr>  </tbody></table><p>112980 rows × 2 columns</p></div><p>可以看出这个分箱的作用就是将同一个区间段的功率值设为同样的值，比如101~109都设置为10.0。<br>然后就可以删除掉原数据了：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data = data.drop([<span class="string">'creatDate'</span>, <span class="string">'regDate'</span>, <span class="string">'regionCode'</span>], axis=<span class="number">1</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(data.shape)</span><br><span class="line">data.columns</span><br></pre></td></tr></tbody></table></figure><pre><code>(112980, 39)Index(['SaleID', 'name', 'model', 'brand', 'bodyType', 'fuelType', 'gearbox',       'power', 'kilometer', 'notRepairedDamage', 'seller', 'offerType',       'price', 'v_0', 'v_1', 'v_2', 'v_3', 'v_4', 'v_5', 'v_6', 'v_7', 'v_8',       'v_9', 'v_10', 'v_11', 'v_12', 'v_13', 'v_14', 'train', 'used_time',       'city', 'brand_amount', 'brand_price_max', 'brand_price_median',       'brand_price_min', 'brand_price_sum', 'brand_price_std',       'brand_price_average', 'power_bin'],      dtype='object')</code></pre><p>至此，可以导出给树模型用的数据</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.to_csv(<span class="string">'data_for_tree.csv'</span>, index=<span class="number">0</span>)</span><br></pre></td></tr></tbody></table></figure><h2 id="4️⃣-LR与NN模型的特征构造"><a href="#4️⃣-LR与NN模型的特征构造" class="headerlink" title="4️⃣ LR与NN模型的特征构造"></a>4️⃣ LR与NN模型的特征构造</h2><p>  上面的步骤就是一次比较完备的特征构造，我们还可以为其他模型构造特征，主要是由于不用模型需要的数据输入是不同的。</p><h3 id="4️⃣-1️⃣-log-与归一化"><a href="#4️⃣-1️⃣-log-与归一化" class="headerlink" title="4️⃣.1️⃣ $log$与归一化"></a>4️⃣.1️⃣ $log$与归一化</h3><p>观察一下数据分布</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data[<span class="string">'power'</span>].plot.hist()</span><br></pre></td></tr></tbody></table></figure><pre><code><matplotlib.axes._subplots.AxesSubplot at 0x2108b6377b8></code></pre><p><img src="https://img-blog.csdnimg.cn/20200402004706243.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0V4Y2FsaWJ1clVsaW1pdGVk,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>再看看<code>train</code>数据集的分布：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">train[<span class="string">'power'</span>].plot.hist()</span><br></pre></td></tr></tbody></table></figure><pre><code><matplotlib.axes._subplots.AxesSubplot at 0x2108b4ed588></code></pre><p><img src="https://img-blog.csdnimg.cn/20200402004719447.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0V4Y2FsaWJ1clVsaW1pdGVk,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>我们对其取 log，再做归一化</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data[<span class="string">'power'</span>] = np.log(data[<span class="string">'power'</span>] + <span class="number">1</span>) </span><br><span class="line">data[<span class="string">'power'</span>] = ((data[<span class="string">'power'</span>] - np.min(data[<span class="string">'power'</span>])) / (np.max(data[<span class="string">'power'</span>]) - np.min(data[<span class="string">'power'</span>])))</span><br><span class="line">data[<span class="string">'power'</span>].plot.hist()</span><br></pre></td></tr></tbody></table></figure><pre><code><matplotlib.axes._subplots.AxesSubplot at 0x2108abc1438></code></pre><p><img src="https://img-blog.csdnimg.cn/20200402004913553.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0V4Y2FsaWJ1clVsaW1pdGVk,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>看看行驶里程的情况，应该是原始数据已经分好了桶</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data[<span class="string">'kilometer'</span>].plot.hist()</span><br></pre></td></tr></tbody></table></figure><pre><code><matplotlib.axes._subplots.AxesSubplot at 0x2108abc1390></code></pre><p><img src="https://img-blog.csdnimg.cn/20200402004748777.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0V4Y2FsaWJ1clVsaW1pdGVk,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>归一化</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data[<span class="string">'kilometer'</span>] = ((data[<span class="string">'kilometer'</span>] - np.min(data[<span class="string">'kilometer'</span>])) / </span><br><span class="line">                        (np.max(data[<span class="string">'kilometer'</span>]) - np.min(data[<span class="string">'kilometer'</span>])))</span><br><span class="line">data[<span class="string">'kilometer'</span>].plot.hist()</span><br></pre></td></tr></tbody></table></figure><pre><code><matplotlib.axes._subplots.AxesSubplot at 0x2108aca0898></code></pre><p><img src="https://img-blog.csdnimg.cn/20200402004923471.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0V4Y2FsaWJ1clVsaW1pdGVk,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>对刚刚构造的统计量进行归一化</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">max_min</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> (x - np.min(x)) / (np.max(x) - np.min(x))</span><br><span class="line"></span><br><span class="line">data.columns[<span class="number">-10</span>:]</span><br></pre></td></tr></tbody></table></figure><pre><code>Index(['used_time', 'city', 'brand_amount', 'brand_price_max',       'brand_price_median', 'brand_price_min', 'brand_price_sum',       'brand_price_std', 'brand_price_average', 'power_bin'],      dtype='object')</code></pre><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> data.columns[<span class="number">-10</span>:]:</span><br><span class="line">    <span class="keyword">if</span> np.min(data[i]) != <span class="string">''</span>: <span class="comment"># 存在空值的情况</span></span><br><span class="line">        data[i] = max_min(data[i])</span><br></pre></td></tr></tbody></table></figure><h3 id="4️⃣-2️⃣-OneEncoder-编码"><a href="#4️⃣-2️⃣-OneEncoder-编码" class="headerlink" title="4️⃣.2️⃣ $OneEncoder$编码"></a>4️⃣.2️⃣ $OneEncoder$编码</h3><p>  对类别特征进行$OneEncoder$<br><br>在此之前先介绍一下$OneEncoder$编码:$one-hot$的基本思想，将离散型特征的每一种取值都看成一种状态，若你的这一特征中有$N$个不相同的取值，那么我们就可以将该特征抽象成$N$种不同的状态，$one-hot$编码保证了每一个取值只会使得一种状态处于“激活态”，也就是说这N种状态中只有一个状态位值为1，其他状态位都是0。举个例子，假设我们以学历为例，我们想要研究的类别为小学、中学、大学、硕士、博士五种类别，我们使用$one-hot$对其编码就会得到：</p><p><img src="https://img-blog.csdnimg.cn/20200402004945672.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0V4Y2FsaWJ1clVsaW1pdGVk,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><ul><li>$dummy \quad encoding$</li></ul><p>哑变量编码直观的解释就是任意的将一个状态位去除。还是拿上面的例子来说，我们用4个状态位就足够反应上述5个类别的信息，也就是我们仅仅使用前四个状态位 [0,0,0,0] 就可以表达博士了。只是因为对于一个我们研究的样本，他已不是小学生、也不是中学生、也不是大学生、又不是研究生，那么我们就可以默认他是博士，是不是。所以，我们用哑变量编码可以将上述5类表示成：</p><p><img src="https://img-blog.csdnimg.cn/20200402004956905.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0V4Y2FsaWJ1clVsaW1pdGVk,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data = pd.get_dummies(data, columns=[<span class="string">'model'</span>, <span class="string">'brand'</span>, <span class="string">'bodyType'</span>, <span class="string">'fuelType'</span>,</span><br><span class="line">                                     <span class="string">'gearbox'</span>, <span class="string">'notRepairedDamage'</span>, <span class="string">'power_bin'</span>])</span><br><span class="line">data</span><br></pre></td></tr></tbody></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>SaleID</th>      <th>name</th>      <th>power</th>      <th>kilometer</th>      <th>seller</th>      <th>offerType</th>      <th>price</th>      <th>v_0</th>      <th>v_1</th>      <th>v_2</th>      <th>...</th>      <th>power_bin_0.6896551724137931</th>      <th>power_bin_0.7241379310344828</th>      <th>power_bin_0.7586206896551724</th>      <th>power_bin_0.7931034482758621</th>      <th>power_bin_0.8275862068965517</th>      <th>power_bin_0.8620689655172413</th>      <th>power_bin_0.896551724137931</th>      <th>power_bin_0.9310344827586207</th>      <th>power_bin_0.9655172413793104</th>      <th>power_bin_1.0</th>    </tr>  </thead>  <tbody>    <tr>      <td>0</td>      <td>1</td>      <td>2262</td>      <td>0.000000</td>      <td>1.000000</td>      <td>0</td>      <td>0</td>      <td>3600.0</td>      <td>45.305273</td>      <td>5.236112</td>      <td>0.137925</td>      <td>...</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <td>1</td>      <td>5</td>      <td>137642</td>      <td>0.474626</td>      <td>0.655172</td>      <td>0</td>      <td>0</td>      <td>8000.0</td>      <td>46.323165</td>      <td>-3.229285</td>      <td>0.156615</td>      <td>...</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <td>2</td>      <td>7</td>      <td>165346</td>      <td>0.467002</td>      <td>1.000000</td>      <td>0</td>      <td>0</td>      <td>1000.0</td>      <td>42.255586</td>      <td>-3.167771</td>      <td>-0.676693</td>      <td>...</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <td>3</td>      <td>10</td>      <td>18961</td>      <td>0.467002</td>      <td>1.000000</td>      <td>0</td>      <td>0</td>      <td>3100.0</td>      <td>45.401241</td>      <td>4.195311</td>      <td>-0.370513</td>      <td>...</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <td>4</td>      <td>13</td>      <td>8129</td>      <td>0.506615</td>      <td>1.000000</td>      <td>0</td>      <td>0</td>      <td>3100.0</td>      <td>46.844574</td>      <td>4.175332</td>      <td>0.490609</td>      <td>...</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>    </tr>    <tr>      <td>112975</td>      <td>199995</td>      <td>20903</td>      <td>0.480856</td>      <td>1.000000</td>      <td>0</td>      <td>0</td>      <td>NaN</td>      <td>45.621391</td>      <td>5.958453</td>      <td>-0.918571</td>      <td>...</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <td>112976</td>      <td>199996</td>      <td>708</td>      <td>0.437292</td>      <td>1.000000</td>      <td>0</td>      <td>0</td>      <td>NaN</td>      <td>43.935162</td>      <td>4.476841</td>      <td>-0.841710</td>      <td>...</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <td>112977</td>      <td>199997</td>      <td>6693</td>      <td>0.546885</td>      <td>1.000000</td>      <td>0</td>      <td>0</td>      <td>NaN</td>      <td>46.537137</td>      <td>4.170806</td>      <td>0.388595</td>      <td>...</td>      <td>0</td>      <td>0</td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <td>112978</td>      <td>199998</td>      <td>96900</td>      <td>0.587076</td>      <td>1.000000</td>      <td>0</td>      <td>0</td>      <td>NaN</td>      <td>46.771359</td>      <td>-3.296814</td>      <td>0.243566</td>      <td>...</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <td>112979</td>      <td>199999</td>      <td>193384</td>      <td>0.427535</td>      <td>0.586207</td>      <td>0</td>      <td>0</td>      <td>NaN</td>      <td>43.731010</td>      <td>-3.121867</td>      <td>0.027348</td>      <td>...</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>  </tbody></table><p>112980 rows × 369 columns</p></div><ul><li>将这份数据输出给LR模型使用</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.to_csv(<span class="string">'data_for_lr.csv'</span>, index=<span class="number">0</span>)</span><br></pre></td></tr></tbody></table></figure><h2 id="5️⃣-特征选择"><a href="#5️⃣-特征选择" class="headerlink" title="5️⃣ 特征选择"></a>5️⃣ 特征选择</h2><h3 id="5️⃣-1️⃣-过滤式-filter"><a href="#5️⃣-1️⃣-过滤式-filter" class="headerlink" title="5️⃣.1️⃣ 过滤式(filter)"></a>5️⃣.1️⃣ 过滤式(filter)</h3><p>相关性分析</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">print(data[<span class="string">'power'</span>].corr(data[<span class="string">'price'</span>], method=<span class="string">'spearman'</span>))</span><br><span class="line">print(data[<span class="string">'kilometer'</span>].corr(data[<span class="string">'price'</span>], method=<span class="string">'spearman'</span>))</span><br><span class="line">print(data[<span class="string">'brand_amount'</span>].corr(data[<span class="string">'price'</span>], method=<span class="string">'spearman'</span>))</span><br><span class="line">print(data[<span class="string">'brand_price_average'</span>].corr(data[<span class="string">'price'</span>], method=<span class="string">'spearman'</span>))</span><br><span class="line">print(data[<span class="string">'brand_price_max'</span>].corr(data[<span class="string">'price'</span>], method=<span class="string">'spearman'</span>))</span><br><span class="line">print(data[<span class="string">'brand_price_median'</span>].corr(data[<span class="string">'price'</span>], method=<span class="string">'spearman'</span>))</span><br></pre></td></tr></tbody></table></figure><pre><code>0.4698539569820024-0.199742825131185080.040858003200251270.31352395904129460.078941190892548270.3138873049004745</code></pre><p>可以看出<code>power</code>，<code>brand_price_average</code>，<code>brand_price_median</code>与<code>price</code>相关性比较高</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">data_numeric = data[[<span class="string">'power'</span>, <span class="string">'kilometer'</span>, <span class="string">'brand_amount'</span>, <span class="string">'brand_price_average'</span>, </span><br><span class="line">                     <span class="string">'brand_price_max'</span>, <span class="string">'brand_price_median'</span>]]</span><br><span class="line">correlation = data_numeric.corr()</span><br><span class="line"></span><br><span class="line">f , ax = plt.subplots(figsize = (<span class="number">7</span>, <span class="number">7</span>))</span><br><span class="line">plt.title(<span class="string">'Correlation of Numeric Features with Price'</span>,y=<span class="number">1</span>,size=<span class="number">30</span>)</span><br><span class="line">sns.heatmap(correlation, square = <span class="literal">True</span>, cmap = <span class="string">'PuBuGn'</span>, vmax=<span class="number">0.8</span>)</span><br></pre></td></tr></tbody></table></figure><pre><code><matplotlib.axes._subplots.AxesSubplot at 0x21096f60198></code></pre><p><img src="https://img-blog.csdnimg.cn/20200402005026878.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0V4Y2FsaWJ1clVsaW1pdGVk,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>看不出来啥。😛</p><h3 id="5️⃣-2️⃣-包裹式-wrapper"><a href="#5️⃣-2️⃣-包裹式-wrapper" class="headerlink" title="5️⃣.2️⃣ 包裹式(wrapper)"></a>5️⃣.2️⃣ 包裹式(wrapper)</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!pip install mlxtend</span><br></pre></td></tr></tbody></table></figure><pre><code>Collecting mlxtend  Downloading https://files.pythonhosted.org/packages/64/e2/1610a86284029abcad0ac9bc86cb19f9787fe6448ede467188b2a5121bb4/mlxtend-0.17.2-py2.py3-none-any.whl (1.3MB)Requirement already satisfied: setuptools in d:\software\anaconda\lib\site-packages (from mlxtend) (40.8.0)Requirement already satisfied: pandas>=0.24.2 in d:\software\anaconda\lib\site-packages (from mlxtend) (0.25.1)Requirement already satisfied: scipy>=1.2.1 in d:\software\anaconda\lib\site-packages (from mlxtend) (1.2.1)Requirement already satisfied: matplotlib>=3.0.0 in d:\software\anaconda\lib\site-packages (from mlxtend) (3.0.3)Requirement already satisfied: numpy>=1.16.2 in d:\software\anaconda\lib\site-packages (from mlxtend) (1.16.2)Collecting joblib>=0.13.2 (from mlxtend)  Downloading https://files.pythonhosted.org/packages/28/5c/cf6a2b65a321c4a209efcdf64c2689efae2cb62661f8f6f4bb28547cf1bf/joblib-0.14.1-py2.py3-none-any.whl (294kB)Requirement already satisfied: scikit-learn>=0.20.3 in d:\software\anaconda\lib\site-packages (from mlxtend) (0.20.3)Requirement already satisfied: pytz>=2017.2 in d:\software\anaconda\lib\site-packages (from pandas>=0.24.2->mlxtend) (2018.9)Requirement already satisfied: python-dateutil>=2.6.1 in d:\software\anaconda\lib\site-packages (from pandas>=0.24.2->mlxtend) (2.8.0)Requirement already satisfied: cycler>=0.10 in d:\software\anaconda\lib\site-packages (from matplotlib>=3.0.0->mlxtend) (0.10.0)Requirement already satisfied: kiwisolver>=1.0.1 in d:\software\anaconda\lib\site-packages (from matplotlib>=3.0.0->mlxtend) (1.0.1)Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in d:\software\anaconda\lib\site-packages (from matplotlib>=3.0.0->mlxtend) (2.3.1)Requirement already satisfied: six>=1.5 in d:\software\anaconda\lib\site-packages (from python-dateutil>=2.6.1->pandas>=0.24.2->mlxtend) (1.12.0)Installing collected packages: joblib, mlxtendSuccessfully installed joblib-0.14.1 mlxtend-0.17.2</code></pre><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x</span><br></pre></td></tr></tbody></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>SaleID</th>      <th>name</th>      <th>power</th>      <th>kilometer</th>      <th>seller</th>      <th>offerType</th>      <th>v_0</th>      <th>v_1</th>      <th>v_2</th>      <th>v_3</th>      <th>...</th>      <th>power_bin_0.6896551724137931</th>      <th>power_bin_0.7241379310344828</th>      <th>power_bin_0.7586206896551724</th>      <th>power_bin_0.7931034482758621</th>      <th>power_bin_0.8275862068965517</th>      <th>power_bin_0.8620689655172413</th>      <th>power_bin_0.896551724137931</th>      <th>power_bin_0.9310344827586207</th>      <th>power_bin_0.9655172413793104</th>      <th>power_bin_1.0</th>    </tr>  </thead>  <tbody>    <tr>      <td>0</td>      <td>1</td>      <td>2262</td>      <td>0.000000</td>      <td>1.000000</td>      <td>0</td>      <td>0</td>      <td>45.305273</td>      <td>5.236112</td>      <td>0.137925</td>      <td>1.380657</td>      <td>...</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <td>1</td>      <td>5</td>      <td>137642</td>      <td>0.474626</td>      <td>0.655172</td>      <td>0</td>      <td>0</td>      <td>46.323165</td>      <td>-3.229285</td>      <td>0.156615</td>      <td>-1.727217</td>      <td>...</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <td>2</td>      <td>7</td>      <td>165346</td>      <td>0.467002</td>      <td>1.000000</td>      <td>0</td>      <td>0</td>      <td>42.255586</td>      <td>-3.167771</td>      <td>-0.676693</td>      <td>1.942673</td>      <td>...</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <td>3</td>      <td>10</td>      <td>18961</td>      <td>0.467002</td>      <td>1.000000</td>      <td>0</td>      <td>0</td>      <td>45.401241</td>      <td>4.195311</td>      <td>-0.370513</td>      <td>0.444251</td>      <td>...</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <td>4</td>      <td>13</td>      <td>8129</td>      <td>0.506615</td>      <td>1.000000</td>      <td>0</td>      <td>0</td>      <td>46.844574</td>      <td>4.175332</td>      <td>0.490609</td>      <td>0.085718</td>      <td>...</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>    </tr>    <tr>      <td>112975</td>      <td>199995</td>      <td>20903</td>      <td>0.480856</td>      <td>1.000000</td>      <td>0</td>      <td>0</td>      <td>45.621391</td>      <td>5.958453</td>      <td>-0.918571</td>      <td>0.774826</td>      <td>...</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <td>112976</td>      <td>199996</td>      <td>708</td>      <td>0.437292</td>      <td>1.000000</td>      <td>0</td>      <td>0</td>      <td>43.935162</td>      <td>4.476841</td>      <td>-0.841710</td>      <td>1.328253</td>      <td>...</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <td>112977</td>      <td>199997</td>      <td>6693</td>      <td>0.546885</td>      <td>1.000000</td>      <td>0</td>      <td>0</td>      <td>46.537137</td>      <td>4.170806</td>      <td>0.388595</td>      <td>-0.704689</td>      <td>...</td>      <td>0</td>      <td>0</td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <td>112978</td>      <td>199998</td>      <td>96900</td>      <td>0.587076</td>      <td>1.000000</td>      <td>0</td>      <td>0</td>      <td>46.771359</td>      <td>-3.296814</td>      <td>0.243566</td>      <td>-1.277411</td>      <td>...</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <td>112979</td>      <td>199999</td>      <td>193384</td>      <td>0.427535</td>      <td>0.586207</td>      <td>0</td>      <td>0</td>      <td>43.731010</td>      <td>-3.121867</td>      <td>0.027348</td>      <td>-0.808914</td>      <td>...</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>  </tbody></table><p>112980 rows × 368 columns</p></div><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> mlxtend.feature_selection <span class="keyword">import</span> SequentialFeatureSelector <span class="keyword">as</span> SFS</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression</span><br><span class="line">sfs = SFS(LinearRegression(),</span><br><span class="line">           k_features=<span class="number">10</span>,</span><br><span class="line">           forward=<span class="literal">True</span>,</span><br><span class="line">           floating=<span class="literal">False</span>,</span><br><span class="line">           scoring = <span class="string">'r2'</span>,</span><br><span class="line">           cv = <span class="number">0</span>)</span><br><span class="line">x = data.drop([<span class="string">'price'</span>], axis=<span class="number">1</span>)</span><br><span class="line">x = x.fillna(<span class="number">0</span>)</span><br><span class="line">y = data[<span class="string">'price'</span>]</span><br><span class="line">x.dropna(axis=<span class="number">0</span>, how=<span class="string">'any'</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">y.dropna(axis=<span class="number">0</span>, how=<span class="string">'any'</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">sfs.fit(x, y)</span><br><span class="line">sfs.k_feature_names_</span><br></pre></td></tr></tbody></table></figure><p>画出来，可以看到边际效益</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> mlxtend.plotting <span class="keyword">import</span> plot_sequential_feature_selection <span class="keyword">as</span> plot_sfs</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">fig1 = plot_sfs(sfs.get_metric_dict(), kind=<span class="string">'std_dev'</span>)</span><br><span class="line">plt.grid()</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="https://img-blog.csdnimg.cn/20200402005051474.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0V4Y2FsaWJ1clVsaW1pdGVk,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="5️⃣-3️⃣-嵌入式（embedding）"><a href="#5️⃣-3️⃣-嵌入式（embedding）" class="headerlink" title="5️⃣.3️⃣ 嵌入式（embedding）"></a>5️⃣.3️⃣ 嵌入式（embedding）</h3><p>Lasso 回归和决策树可以完成嵌入式特征选择，大部分情况下都是用嵌入式做特征筛选。</p><p>下一步就是建模了。🤔</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;接续&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="https://kemo.xyz/categories/Algorithm/"/>
    
    
      <category term="pandas" scheme="https://kemo.xyz/tags/pandas/"/>
    
      <category term="Editor" scheme="https://kemo.xyz/tags/Editor/"/>
    
      <category term="DataMining" scheme="https://kemo.xyz/tags/DataMining/"/>
    
      <category term="Tianchi" scheme="https://kemo.xyz/tags/Tianchi/"/>
    
      <category term="Study" scheme="https://kemo.xyz/tags/Study/"/>
    
      <category term="Jupyter" scheme="https://kemo.xyz/tags/Jupyter/"/>
    
      <category term="seaborn" scheme="https://kemo.xyz/tags/seaborn/"/>
    
      <category term="Onehot" scheme="https://kemo.xyz/tags/Onehot/"/>
    
      <category term="BoxPlot" scheme="https://kemo.xyz/tags/BoxPlot/"/>
    
      <category term="IQR" scheme="https://kemo.xyz/tags/IQR/"/>
    
      <category term="groupby" scheme="https://kemo.xyz/tags/groupby/"/>
    
      <category term="过滤式(filter)" scheme="https://kemo.xyz/tags/%E8%BF%87%E6%BB%A4%E5%BC%8F-filter/"/>
    
      <category term="包裹式(wrapper)" scheme="https://kemo.xyz/tags/%E5%8C%85%E8%A3%B9%E5%BC%8F-wrapper/"/>
    
      <category term="嵌入式（embedding）" scheme="https://kemo.xyz/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F%EF%BC%88embedding%EF%BC%89/"/>
    
  </entry>
  
  <entry>
    <title>完美解决：Hexo Next主题本地可预览CSS，但部署到网站CSS失效问题!</title>
    <link href="https://kemo.xyz/%E5%AE%8C%E7%BE%8E%E8%A7%A3%E5%86%B3%EF%BC%9AHexo-Next%E4%B8%BB%E9%A2%98%E6%9C%AC%E5%9C%B0%E5%8F%AF%E9%A2%84%E8%A7%88CSS%EF%BC%8C%E4%BD%86%E9%83%A8%E7%BD%B2%E5%88%B0%E7%BD%91%E7%AB%99CSS%E5%A4%B1%E6%95%88%E9%97%AE%E9%A2%98.html"/>
    <id>https://kemo.xyz/完美解决：Hexo-Next主题本地可预览CSS，但部署到网站CSS失效问题.html</id>
    <published>2020-03-28T08:19:05.000Z</published>
    <updated>2020-03-29T10:49:31.028Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>非常折磨人，好在我暂时解决它了。😂<br><a id="more"></a></p><p><style><br>code {<br>    color: #FF1493 !important;<br>    font-weight: 800 !important;<br>}</style></p><h1 id="🌟-前言"><a href="#🌟-前言" class="headerlink" title="🌟 前言"></a>🌟 前言</h1><p>  我的<font color="#D2691E"><code>Hexo</code></font>版本是<font color="#D2691E"><code>3.9.0</code></font>，<font color="#D2691E"><code>Next</code></font>主题版本是<font color="#D2691E"><code>7.5</code></font>版本，也就是移除了<font color="#D2691E"><code>custom</code></font>文件的神奇的跨时代的版本。<br>  我的服务器不是<font color="#D2691E"><code>github-page</code></font>，而是阿里云的<font color="#D2691E"><code>ECS</code></font>服务器，关于如何将<font color="#D2691E"><code>Hexo</code></font>从<font color="#D2691E"><code>github-page</code></font>迁移到阿里云的<font color="#D2691E"><code>ECS</code></font>服务器请看这篇文章：<a href="https://bestzuo.cn/posts/fb6b5822.html" target="_blank" rel="noopener">将博客部署到阿里云服务器上</a>。</p><p>  当然一开始觉得这个版本好搓卡，本来想改改样式，不会<font color="#D2691E"><code>CSS</code></font>，上网搜搜就有很多改<font color="#D2691E"><code>custom</code></font>文件的文章，复制复制就可以改成很好看的样式，这下好了，一移除就全部失效了。</p><p>  其实不然，在与<font color="#D2691E"><code>Next</code></font>的大坑中摸爬滚打了很久后，</p><p>  发现，你可以在<font color="#D2691E"><code>themes/next/source/css/main.styl</code></font>中最后加上一句：<br></p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">import</span> <span class="string">"_custom/custom"</span>;</span><br></pre></td></tr></tbody></table></figure><p></p><p>  然后再在<font color="#D2691E"><code>themes/next/source/css</code></font>目录下新建<font color="#D2691E"><code>_custom</code></font>文件夹，再进去新建<font color="#D2691E"><code>custom.styl</code></font>文件，将网上搜罗到的<font color="#D2691E"><code>Next</code></font>主题的文件都粘贴进去，就可以在本地预览这些新添加的样式了。</p><p>  <span class="github-emoji" style="display:inline;vertical-align:middle;color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f646.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f646.png?v8">🙆</span>当然你也许不需要这么麻烦的操作，你甚至可以在<font color="#D2691E"><code>themes/next/source/css</code></font>文件夹中的任何一个<code>.styl</code></font>文件添加你想要的<font color="#D2691E"><code>css</code></font>样式代码都可以在本地预览中生效。</p><p>  我想其中的原因在于：主题调用的文件主要来自于<font color="#D2691E"><code>themes/next/source/css/main.styl</code></font>，而这个文件里面全是<font color="#D2691E"><code>import</code></font>语句，即将所有的<font color="#D2691E"><code>css</code></font>文件<font color="#D2691E"><code>import</code></font>进来，也就意味着最后生成的整体的<font color="#D2691E"><code>main.css</code></font>文件不过是将所有的<font color="#D2691E"><code>css</code></font>分文件中的语句按顺序排列罢了，所以你加在哪个文件改变的不过是最后的<font color="#D2691E"><code>main.css</code></font>的语句顺序罢了，但是其提供的效果依然生效。但为了日后修改方便，还是建议找对应的位置添加。</p><h1 id="1️⃣-问题陈述"><a href="#1️⃣-问题陈述" class="headerlink" title="1️⃣ 问题陈述"></a>1️⃣ 问题陈述</h1><p>  前言中我也提到了“本地预览生效”的话，意味着，你大可自己定义<font color="#D2691E"><code>css</code></font>样式，也可以将网上的内容复制粘贴，但有一点非常头疼，那就是大多数情况下，你只能成功地进行本地预览，而一旦<font color="#D2691E"><code>deploy</code></font>到服务器上要么就是完全无效，要么就是稀奇古怪，甚至有时候你即使将整个<font color="#D2691E"><code>/css</code></font>文件夹删除，发现<font color="#D2691E"><code>deploy</code></font>后的网站样式完全没有变化。<span class="github-emoji" style="display:inline;vertical-align:middle;color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f622.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f622.png?v8">😢</span></p><p>  紧接着通过在部署后的页面以及本地预览的页面分别进行<font color="#D2691E"><code>F12</code></font>调试，逐一对比，终于发现了不一样的地方。本地预览时调试页面的<font color="#D2691E"><code>/css</code></font>的文件下的文件名为<font color="#D2691E"><code>main.css</code></font>就跟<font color="#D2691E"><code>hexo g</code></font>生成在<font color="#D2691E"><code>/public</code></font>文件夹下是一模一样的，但是到了部署页面中这个文件名就变为了<font color="#D2691E"><code>main.css?v=7.3.0</code></font>，这多出来的<font color="#D2691E"><code>?v=7.3.0</code></font>百思不得其解。再看看<font color="#D2691E"><code>main.css</code></font>中的文件内容跟我pc里面的<font color="#D2691E"><code>/public/css/main.css</code></font>里面的东西一模一样，但是<font color="#D2691E"><code>main.css?v=7.3.0</code></font>里面莫名其妙的少了几百行，原以为是<font color="#D2691E"><code>hexo deploy</code></font>命令部署的不全，漏了东西，但上阿里云的服务器文件夹里面一看内容跟我本地的一样。并且当我将<font color="#D2691E"><code>main.css</code></font>里面的东西复制到<font color="#D2691E"><code>main.css?v=7.3.0</code></font>时，我想要的部署的页面就跟我本地预览终于一样了，虽然刷新一下就没了，毕竟是网页调试。</p><p>  那么问题就很清楚了，就是这个<font color="#D2691E"><code>main.css?v=7.3.0</code></font>并不放在服务器端，调用的源头也并不明朗，而且是无法更改的，所以得想办法让部署的页面加载<font color="#D2691E"><code>main.css</code></font>而不是<font color="#D2691E"><code>main.css?v=7.3.0</code></font>。</p><h1 id="2️⃣-问题解决"><a href="#2️⃣-问题解决" class="headerlink" title="2️⃣ 问题解决"></a>2️⃣ 问题解决</h1><p>  既然知道问题出在哪里就很简单了，费了一番功夫，终于发现在<font color="#D2691E"><code>themes/next/layout/_partials/head/head.swig</code></font>文件中，有一行语句是这样的：</p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#60link rel="stylesheet" href="{{ url_for(theme.css) }}/main.css?v={{ version }}"&#62</span><br></pre></td></tr></tbody></table></figure><p>  很明显之前多出来的<font color="#D2691E"><code>?v=7.3.0</code></font>就是出自于这里的<font color="#D2691E"><code>?v=</code></font>，所以就把这里的<font color="#D2691E"><code>?v=</code></font>删除，就可以了。</p><p>然后再<font color="#D2691E"><code>hexo clean && hexo g && hexo d</code></font>，查看部署端页面，样式齐全完美！问题解决。<span class="github-emoji" style="display:inline;vertical-align:middle;color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f44d.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f44d.png?v8">👍</span><span class="github-emoji" style="display:inline;vertical-align:middle;color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f44d.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f44d.png?v8">👍</span><span class="github-emoji" style="display:inline;vertical-align:middle;color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f44d.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f44d.png?v8">👍</span></p><h1 id="3️⃣-一些缺点"><a href="#3️⃣-一些缺点" class="headerlink" title="3️⃣ 一些缺点"></a>3️⃣ 一些缺点</h1><p>  这个方法可以完美地解决问题本身，而且绝对不会再出现本地预览与部署端不一样的问题，但是会出现副作用。</p><p>  当我以为终于可以愉快地肆无忌惮地玩耍时，又发现一个新的问题。就是我又再次改造了<font color="#D2691E"><code>css</code></font>样式，即在<font color="#D2691E"><code>/_custom/custom</code></font>文件中加入了一些样式，再<font color="#D2691E"><code>hexo d</code></font>发现样式没有变化。再调试发现问题，<font color="#D2691E"><code>main.css</code></font>文件没有变化。思考一下，猜测这个原因应该跟<font color="#D2691E"><code>main.css?v=7.3.0</code></font>问题是一样的，它本身是不可更改的，即使再<font color="#D2691E"><code>hexo d</code></font>新的<font color="#D2691E"><code>css</code></font>文件，其本身不会变化。</p><p>  问题的解决方法就是将<font color="#D2691E"><code>themes/next/layout/_partials/head/head.swig</code></font>中的<br></p><figure class="highlight diff"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">- &#60link rel="stylesheet" href="{{ url_for(theme.css) }}/main.css"&#62</span></span><br><span class="line"><span class="addition">+ &#60link rel="stylesheet" href="{{ url_for(theme.css) }}/main1.css"&#62</span></span><br></pre></td></tr></tbody></table></figure><p></p><p>  也就是改成其他名字<font color="#D2691E"><code>main1</code></font>也好<font color="#D2691E"><code>main2</code></font>也好，就是改成跟原来不用的名字。然后继续<font color="#D2691E"><code>hexo g</code></font>就会将生成的那些博客文章页面里面的引用的<font color="#D2691E"><code>css</code></font>文件名改为<font color="#D2691E"><code>main1.css</code></font>文件。</p><p>  同时还要将<font color="#D2691E"><code>/public/css</code></font>中的<font color="#D2691E"><code>main.css</code></font>改为<font color="#D2691E"><code>main1.css</code></font>，最后<font color="#D2691E"><code>hexo d</code></font>，发现改动的<font color="#D2691E"><code>css</code></font>样式也生效了。</p><p>  当然这也就意味着，以后每次改动<font color="#D2691E"><code>css</code></font>样式，都要将<font color="#D2691E"><code>main.css</code></font>改成新的名字，如<font color="#D2691E"><code>main2.css</code>、<code>main3.css</code></font>……。</p><p>  建议<font color="#D2691E"><code>hexo clean && hexo g && hexo d</code></font>之前，先备份一下<font color="#D2691E"><code>/public</code></font>文件夹，保留可以回退版本的可能。</p><p>  所以建议要么不改<font color="#D2691E"><code>css</code></font>，要么一次性改全。毕竟写<font color="#D2691E"><code>Hexo</code></font>博客，重要的不是好看，而是内容，不是嘛？<span class="github-emoji" style="display:inline;vertical-align:middle;color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f609.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f609.png?v8">😉</span></p><h1 id="4️⃣-总结"><a href="#4️⃣-总结" class="headerlink" title="4️⃣ 总结"></a>4️⃣ 总结</h1><ol><li>删除<font color="#D2691E"><code>themes/next/layout/_partials/head/head.swig</code></font>中的<font color="#D2691E"><code>main.css?v=</code></font>后面的<font color="#D2691E"><code>?v=</code></font></li><li>每次修改<font color="#D2691E"><code>css</code></font>后，<font color="#D2691E"><code>hexo d</code></font>之前，改造<font color="#D2691E"><code>themes/next/layout/_partials/head/head.swig</code></font>中的<font color="#D2691E"><code>main.css</code></font>的名字，如<font color="#D2691E"><code>main2.css</code>、<code>main3.css</code></font>……。</li><li>建议<font color="#D2691E"><code>hexo clean && hexo g && hexo d</code></font>之前，先备份一下<font color="#D2691E"><code>/public</code></font>文件夹，保留可以回退版本的可能。</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;非常折磨人，好在我暂时解决它了。😂&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="博客" scheme="https://kemo.xyz/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="Hexo" scheme="https://kemo.xyz/tags/Hexo/"/>
    
      <category term="css" scheme="https://kemo.xyz/tags/css/"/>
    
      <category term="博客" scheme="https://kemo.xyz/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="Next" scheme="https://kemo.xyz/tags/Next/"/>
    
      <category term="custom" scheme="https://kemo.xyz/tags/custom/"/>
    
  </entry>
  
  <entry>
    <title>天池二手车价格预测Task1-2—赛题理解与数据分析</title>
    <link href="https://kemo.xyz/%E5%A4%A9%E6%B1%A0-%E4%BA%8C%E6%89%8B%E8%BD%A6%E4%BB%B7%E6%A0%BC%E9%A2%84%E6%B5%8B-Task1-2-%E8%B5%9B%E9%A2%98%E7%90%86%E8%A7%A3%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90.html"/>
    <id>https://kemo.xyz/天池-二手车价格预测-Task1-2-赛题理解与数据分析.html</id>
    <published>2020-03-22T00:55:42.000Z</published>
    <updated>2020-05-12T18:44:51.125Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>惊闻4.13日江苏省高校将要启动开学模式，我自岿然不动。山中何事？松花酿酒，春水煎茶，如是而已。<br><a id="more"></a></p>    <div id="aplayer-PcZsDKZn" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="2922026033" data-server="netease" data-type="playlist" data-mode="circulation" data-autoplay="true" data-mutex="true" data-listmaxheight="250px" data-preload="auto" data-theme="#ad887a" data-loop="all" data-order="list"></div><h1 id="1️⃣-赛题理解✍️"><a href="#1️⃣-赛题理解✍️" class="headerlink" title="1️⃣ 赛题理解✍️"></a>1️⃣ 赛题理解✍️</h1><h2 id="1️⃣-1️⃣-赛题重述"><a href="#1️⃣-1️⃣-赛题重述" class="headerlink" title="1️⃣.1️⃣ 赛题重述"></a>1️⃣.1️⃣ 赛题重述</h2><p>  这是一道来自于天池的新手练习题目，用<code>数据分析</code>、<code>机器学习</code>等手段进行 <a href="https://tianchi.aliyun.com/competition/entrance/231784/information" target="_blank" rel="noopener">二手车售卖价格预测</a> 的回归问题。赛题本身的思路清晰明了，即对给定的数据集进行分析探讨，然后设计模型运用数据进行训练，测试模型，最终给出选手的预测结果。</p><h2 id="1️⃣-2️⃣-数据集概述"><a href="#1️⃣-2️⃣-数据集概述" class="headerlink" title="1️⃣.2️⃣ 数据集概述"></a>1️⃣.2️⃣ 数据集概述</h2><p>  赛题官方给出了来自Ebay Kleinanzeigen的二手车交易记录，总数据量超过<strong>40w</strong>，包含<strong>31列</strong>变量信息，其中<strong>15列</strong>为匿名变量，即<code>v0</code>至<code>v15</code>。并从中抽取<strong>15万条</strong>作为训练集，<strong>5万</strong>条作为测试集A，<strong>5万</strong>条作为测试集B，同时对<code>name</code>、<code>model</code>、<code>brand</code>和<code>regionCode</code>等信息进行脱敏。具体的数据表如下图：</p><div class="table-wrapper" style="center"><table style="center"><thead><tr style="center"><th><strong>Field</strong></th><th><strong>Description</strong></th></tr></thead><tbody style="center"><tr style="center"><td>SaleID</td><td>交易ID，唯一编码</td></tr><tr><td>name</td><td>汽车交易名称，已脱敏</td></tr><tr><td>regDate</td><td>汽车注册日期，例如20160101，2016年01月01日</td></tr><tr><td>model</td><td>车型编码，已脱敏</td></tr><tr><td>brand</td><td>汽车品牌，已脱敏</td></tr><tr><td>bodyType</td><td>车身类型：豪华轿车：0，微型车：1，厢型车：2，大巴车：3，敞篷车：4，双门汽车：5，商务车：6，搅拌车：7</td></tr><tr><td>fuelType</td><td>燃油类型：汽油：0，柴油：1，液化石油气：2，天然气：3，混合动力：4，其他：5，电动：6</td></tr><tr><td>gearbox</td><td>变速箱：手动：0，自动：1</td></tr><tr><td>power</td><td>发动机功率：范围 [ 0,  600 ]</td></tr><tr><td>kilometer</td><td>汽车已行驶公里，单位万km</td></tr><tr><td>notRepairedDamage</td><td>汽车有尚未修复的损坏：是：0，否：1</td></tr><tr><td>regionCode</td><td>地区编码，已脱敏</td></tr><tr><td>seller</td><td>销售方：个体：0，非个体：1</td></tr><tr><td>offerType</td><td>报价类型：提供：0，请求：1</td></tr><tr><td>creatDate</td><td>汽车上线时间，即开始售卖时间</td></tr><tr><td>price</td><td>二手车交易价格（预测目标）</td></tr><tr><td>v系列特征</td><td>匿名特征，包含v0-14在内15个匿名特征</td></tr></tbody></table></div><h3 id="思考💭💡"><a href="#思考💭💡" class="headerlink" title="思考💭💡"></a>思考💭💡</h3><ul><li>指标重要性<ul><li>数据集里面包含的很多维度的数据，对于人来说第一眼看上去就会产生直观的感觉，哪些指标对售价的影响大，哪些指标对售价的影响小，特别是对于一个长期从事二手车交易的人来说，更是如此。例如 <code>kilometer</code>(汽车已行驶公里)肯定是对于成交价格的影响是巨大的。但是如何让我设计的模型认知到这些先验知识是个棘手的问题，但我想这应该时一个很旧的问题，只是我还没有足够的知识去通晓它解决的肌理。确实，对于机器来说，这些数据只是一列列的向量，所以首要解决的就是向量的重要性。</li></ul></li><li><p>简单思维</p><ul><li><p>简单地假设（我相信所有人都会想到的easy思路🤪），所有的变量跟预测目标成交价格是simple的线性关系，列一个包含31个自变量的线性函数，用批量梯度下降法拟合出31个自变量系数，然后用正则化解决过拟合问题。</p><hr><p>  它的假设函数是这样的：</p><script type="math/tex; mode=display">  h_{\theta}(x)=\theta^{T} X=\theta_{0}+\theta_{1} x_{1}+\theta_{2} x_{2}+\ldots+\theta_{31} x_{31}</script><p>  它的带有正则化的代价函数是这样的：</p><script type="math/tex; mode=display">  J(\theta)=\frac{1}{62} \sum_{i=1}^{31}\left[\left(\left(h_{\theta}\left(x^{(i)}\right)-y^{(i)}\right)^{2}+\lambda \sum_{j=1}^{31} \theta_{j}^{2}\right)\right]</script><hr></li></ul></li></ul><h2 id="1️⃣-3️⃣-预测结果评价指标⚒️"><a href="#1️⃣-3️⃣-预测结果评价指标⚒️" class="headerlink" title="1️⃣.3️⃣ 预测结果评价指标⚒️"></a>1️⃣.3️⃣ 预测结果评价指标⚒️</h2><hr><p>  赛题的预测评估指标为$MAE(Mean Absolute Error)$</p><script type="math/tex; mode=display">MAE=\frac{\sum\limits_{i=1}^{n}\left|y_{i}-\hat{y}_{i}\right|}{n}</script><hr><p>  可以看出，指标就一个，没有很多维度的评价框架，不那么劝退。🤔</p><h1 id="2️⃣-数据分析EDA📊"><a href="#2️⃣-数据分析EDA📊" class="headerlink" title="2️⃣ 数据分析EDA📊"></a>2️⃣ 数据分析EDA📊</h1><blockquote><ul><li>EDA的价值主要在于熟悉数据集，了解数据集，对数据集进行验证来确定所获得数据集可以用于接下来的机器学习或者深度学习使用。</li><li>当了解了数据集之后我们下一步就是要去了解变量间的相互关系以及变量与预测值之间的存在关系。</li><li>引导数据科学从业者进行数据处理以及特征工程的步骤,使数据集的结构和特征集让接下来的预测问题更加可靠。</li><li>完成对于数据的探索性分析，并对于数据进行一些图表或者文字总结并打卡。</li></ul></blockquote><p>  当然这一步也要就解决我在 1️⃣.2️⃣ 中提出的第一个思考，能否通过探索性分析，发掘指标之间的关系，从而为模型内联性地定义出各指标的对成交价格的强弱相关性。但是EDA分析涉及的范围太大，可视化的东西很多，但是如果在后续的分析中不进行运用就是多余的工作，所以只需要挑选最重要的几个因素进行分析，具体如下：</p><ul><li>数据总览，即<code>describe()</code>统计量以及<code>info()</code>数据类型</li><li>缺失值以及异常值检测</li><li>分析待预测的真实值的分布</li><li>特征之间的相关性分析</li></ul><h2 id="2️⃣-1️⃣-数据总览"><a href="#2️⃣-1️⃣-数据总览" class="headerlink" title="2️⃣.1️⃣ 数据总览"></a>2️⃣.1️⃣ 数据总览</h2><h3 id="2️⃣-1️⃣-1️⃣-各种计算包的导入"><a href="#2️⃣-1️⃣-1️⃣-各种计算包的导入" class="headerlink" title="2️⃣.1️⃣.1️⃣ 各种计算包的导入"></a>2️⃣.1️⃣.1️⃣ 各种计算包的导入</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns <span class="comment"># seabon是一个做可视化非常nice的包，它的别名sns是约定俗成的的东西，还有一段很有意思的故事</span></span><br><span class="line"><span class="keyword">import</span> missingno <span class="keyword">as</span> msno <span class="comment"># 用来检测缺失值</span></span><br></pre></td></tr></tbody></table></figure><h3 id="2️⃣-1️⃣-1️⃣-数据载入"><a href="#2️⃣-1️⃣-1️⃣-数据载入" class="headerlink" title="2️⃣.1️⃣.1️⃣ 数据载入"></a>2️⃣.1️⃣.1️⃣ 数据载入</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Train_data = pd.read_csv(<span class="string">'used_car_train_20200313.csv'</span>, sep=<span class="string">' '</span>)</span><br><span class="line">Test_data = pd.read_csv(<span class="string">'used_car_testA_20200313.csv'</span>, sep=<span class="string">' '</span>)</span><br></pre></td></tr></tbody></table></figure><h3 id="2️⃣-1️⃣-2️⃣-数据的基本形态"><a href="#2️⃣-1️⃣-2️⃣-数据的基本形态" class="headerlink" title="2️⃣.1️⃣.2️⃣ 数据的基本形态"></a>2️⃣.1️⃣.2️⃣ 数据的基本形态</h3><ul><li>训练集的长相</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Train_data.head()</span><br><span class="line">Train_data.tail()</span><br></pre></td></tr></tbody></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>SaleID</th>      <th>name</th>      <th>regDate</th>      <th>model</th>      <th>brand</th>      <th>bodyType</th>      <th>fuelType</th>      <th>gearbox</th>      <th>power</th>      <th>kilometer</th>      <th>...</th>      <th>v_5</th>      <th>v_6</th>      <th>v_7</th>      <th>v_8</th>      <th>v_9</th>      <th>v_10</th>      <th>v_11</th>      <th>v_12</th>      <th>v_13</th>      <th>v_14</th>    </tr>  </thead>  <tbody>    <tr>      <td>149995</td>      <td>149995</td>      <td>163978</td>      <td>20000607</td>      <td>121.0</td>      <td>10</td>      <td>4.0</td>      <td>0.0</td>      <td>1.0</td>      <td>163</td>      <td>15.0</td>      <td>...</td>      <td>0.280264</td>      <td>0.000310</td>      <td>0.048441</td>      <td>0.071158</td>      <td>0.019174</td>      <td>1.988114</td>      <td>-2.983973</td>      <td>0.589167</td>      <td>-1.304370</td>      <td>-0.302592</td>    </tr>    <tr>      <td>149996</td>      <td>149996</td>      <td>184535</td>      <td>20091102</td>      <td>116.0</td>      <td>11</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>125</td>      <td>10.0</td>      <td>...</td>      <td>0.253217</td>      <td>0.000777</td>      <td>0.084079</td>      <td>0.099681</td>      <td>0.079371</td>      <td>1.839166</td>      <td>-2.774615</td>      <td>2.553994</td>      <td>0.924196</td>      <td>-0.272160</td>    </tr>    <tr>      <td>149997</td>      <td>149997</td>      <td>147587</td>      <td>20101003</td>      <td>60.0</td>      <td>11</td>      <td>1.0</td>      <td>1.0</td>      <td>0.0</td>      <td>90</td>      <td>6.0</td>      <td>...</td>      <td>0.233353</td>      <td>0.000705</td>      <td>0.118872</td>      <td>0.100118</td>      <td>0.097914</td>      <td>2.439812</td>      <td>-1.630677</td>      <td>2.290197</td>      <td>1.891922</td>      <td>0.414931</td>    </tr>    <tr>      <td>149998</td>      <td>149998</td>      <td>45907</td>      <td>20060312</td>      <td>34.0</td>      <td>10</td>      <td>3.0</td>      <td>1.0</td>      <td>0.0</td>      <td>156</td>      <td>15.0</td>      <td>...</td>      <td>0.256369</td>      <td>0.000252</td>      <td>0.081479</td>      <td>0.083558</td>      <td>0.081498</td>      <td>2.075380</td>      <td>-2.633719</td>      <td>1.414937</td>      <td>0.431981</td>      <td>-1.659014</td>    </tr>    <tr>      <td>149999</td>      <td>149999</td>      <td>177672</td>      <td>19990204</td>      <td>19.0</td>      <td>28</td>      <td>6.0</td>      <td>0.0</td>      <td>1.0</td>      <td>193</td>      <td>12.5</td>      <td>...</td>      <td>0.284475</td>      <td>0.000000</td>      <td>0.040072</td>      <td>0.062543</td>      <td>0.025819</td>      <td>1.978453</td>      <td>-3.179913</td>      <td>0.031724</td>      <td>-1.483350</td>      <td>-0.342674</td>    </tr>  </tbody></table><p>5 rows × 31 columns</p></div><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Train_data.shape</span><br></pre></td></tr></tbody></table></figure><pre><code>(150000, 31)</code></pre><ul><li>测试集的长相</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Test_data.head()</span><br><span class="line">Test_data.tail()</span><br></pre></td></tr></tbody></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>SaleID</th>      <th>name</th>      <th>regDate</th>      <th>model</th>      <th>brand</th>      <th>bodyType</th>      <th>fuelType</th>      <th>gearbox</th>      <th>power</th>      <th>kilometer</th>      <th>...</th>      <th>v_5</th>      <th>v_6</th>      <th>v_7</th>      <th>v_8</th>      <th>v_9</th>      <th>v_10</th>      <th>v_11</th>      <th>v_12</th>      <th>v_13</th>      <th>v_14</th>    </tr>  </thead>  <tbody>    <tr>      <td>49995</td>      <td>199995</td>      <td>20903</td>      <td>19960503</td>      <td>4.0</td>      <td>4</td>      <td>4.0</td>      <td>0.0</td>      <td>0.0</td>      <td>116</td>      <td>15.0</td>      <td>...</td>      <td>0.284664</td>      <td>0.130044</td>      <td>0.049833</td>      <td>0.028807</td>      <td>0.004616</td>      <td>-5.978511</td>      <td>1.303174</td>      <td>-1.207191</td>      <td>-1.981240</td>      <td>-0.357695</td>    </tr>    <tr>      <td>49996</td>      <td>199996</td>      <td>708</td>      <td>19991011</td>      <td>0.0</td>      <td>0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>75</td>      <td>15.0</td>      <td>...</td>      <td>0.268101</td>      <td>0.108095</td>      <td>0.066039</td>      <td>0.025468</td>      <td>0.025971</td>      <td>-3.913825</td>      <td>1.759524</td>      <td>-2.075658</td>      <td>-1.154847</td>      <td>0.169073</td>    </tr>    <tr>      <td>49997</td>      <td>199997</td>      <td>6693</td>      <td>20040412</td>      <td>49.0</td>      <td>1</td>      <td>0.0</td>      <td>1.0</td>      <td>1.0</td>      <td>224</td>      <td>15.0</td>      <td>...</td>      <td>0.269432</td>      <td>0.105724</td>      <td>0.117652</td>      <td>0.057479</td>      <td>0.015669</td>      <td>-4.639065</td>      <td>0.654713</td>      <td>1.137756</td>      <td>-1.390531</td>      <td>0.254420</td>    </tr>    <tr>      <td>49998</td>      <td>199998</td>      <td>96900</td>      <td>20020008</td>      <td>27.0</td>      <td>1</td>      <td>0.0</td>      <td>0.0</td>      <td>1.0</td>      <td>334</td>      <td>15.0</td>      <td>...</td>      <td>0.261152</td>      <td>0.000490</td>      <td>0.137366</td>      <td>0.086216</td>      <td>0.051383</td>      <td>1.833504</td>      <td>-2.828687</td>      <td>2.465630</td>      <td>-0.911682</td>      <td>-2.057353</td>    </tr>    <tr>      <td>49999</td>      <td>199999</td>      <td>193384</td>      <td>20041109</td>      <td>166.0</td>      <td>6</td>      <td>1.0</td>      <td>NaN</td>      <td>1.0</td>      <td>68</td>      <td>9.0</td>      <td>...</td>      <td>0.228730</td>      <td>0.000300</td>      <td>0.103534</td>      <td>0.080625</td>      <td>0.124264</td>      <td>2.914571</td>      <td>-1.135270</td>      <td>0.547628</td>      <td>2.094057</td>      <td>-1.552150</td>    </tr>  </tbody></table><p>5 rows × 30 columns</p></div><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Test_data.shape</span><br></pre></td></tr></tbody></table></figure><pre><code>(50000, 30)</code></pre><ol><li>可以看出，数据的分散程度很大，有整型，有浮点，有正数，有负数，还有日期，当然可以当成是字符串。另外如果数据都换算成数值的话，数据间差距特别大，有些成千上万，有些几分几厘，这样在预测时就难以避免地会忽视某些值的作用，所以需要对其进行归一化。</li><li><code>shape</code>的运用是也十分重要，对数据的大小要心中有数</li></ol><ul><li>用<code>describe()</code>来对数据进行基本统计量的分析，关于<code>describe()</code>的基本参数如下（且其默认只对数值型数据进行分析，如果有字符串，时间序列等的数据，会减少统计的项目）：<ul><li><code>count</code>：一列的元素个数；</li><li><code>mean</code>：一列数据的平均值；</li><li><code>std</code>：一列数据的均方差；（方差的算术平方根，反映一个数据集的离散程度：越大，数据间的差异越大，数据集中数据的离散程度越高；越小，数据间的大小差异越小，数据集中的数据离散程度越低）</li><li><code>min</code>：一列数据中的最小值；</li><li><code>max</code>：一列数中的最大值；</li><li><code>25%</code>：一列数据中，前 25% 的数据的平均值；</li><li><code>50%</code>：一列数据中，前 50% 的数据的平均值；</li><li><code>75%</code>：一列数据中，前 75% 的数据的平均值；</li></ul></li><li>用<code>info()</code>来查看数据类型，并主要查看是否有异常数据</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Train_data.describe()</span><br></pre></td></tr></tbody></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>SaleID</th>      <th>name</th>      <th>regDate</th>      <th>model</th>      <th>brand</th>      <th>bodyType</th>      <th>fuelType</th>      <th>gearbox</th>      <th>power</th>      <th>kilometer</th>      <th>...</th>      <th>v_5</th>      <th>v_6</th>      <th>v_7</th>      <th>v_8</th>      <th>v_9</th>      <th>v_10</th>      <th>v_11</th>      <th>v_12</th>      <th>v_13</th>      <th>v_14</th>    </tr>  </thead>  <tbody>    <tr>      <td>count</td>      <td>150000.000000</td>      <td>150000.000000</td>      <td>1.500000e+05</td>      <td>149999.000000</td>      <td>150000.000000</td>      <td>145494.000000</td>      <td>141320.000000</td>      <td>144019.000000</td>      <td>150000.000000</td>      <td>150000.000000</td>      <td>...</td>      <td>150000.000000</td>      <td>150000.000000</td>      <td>150000.000000</td>      <td>150000.000000</td>      <td>150000.000000</td>      <td>150000.000000</td>      <td>150000.000000</td>      <td>150000.000000</td>      <td>150000.000000</td>      <td>150000.000000</td>    </tr>    <tr>      <td>mean</td>      <td>74999.500000</td>      <td>68349.172873</td>      <td>2.003417e+07</td>      <td>47.129021</td>      <td>8.052733</td>      <td>1.792369</td>      <td>0.375842</td>      <td>0.224943</td>      <td>119.316547</td>      <td>12.597160</td>      <td>...</td>      <td>0.248204</td>      <td>0.044923</td>      <td>0.124692</td>      <td>0.058144</td>      <td>0.061996</td>      <td>-0.001000</td>      <td>0.009035</td>      <td>0.004813</td>      <td>0.000313</td>      <td>-0.000688</td>    </tr>    <tr>      <td>std</td>      <td>43301.414527</td>      <td>61103.875095</td>      <td>5.364988e+04</td>      <td>49.536040</td>      <td>7.864956</td>      <td>1.760640</td>      <td>0.548677</td>      <td>0.417546</td>      <td>177.168419</td>      <td>3.919576</td>      <td>...</td>      <td>0.045804</td>      <td>0.051743</td>      <td>0.201410</td>      <td>0.029186</td>      <td>0.035692</td>      <td>3.772386</td>      <td>3.286071</td>      <td>2.517478</td>      <td>1.288988</td>      <td>1.038685</td>    </tr>    <tr>      <td>min</td>      <td>0.000000</td>      <td>0.000000</td>      <td>1.991000e+07</td>      <td>0.000000</td>      <td>0.000000</td>      <td>0.000000</td>      <td>0.000000</td>      <td>0.000000</td>      <td>0.000000</td>      <td>0.500000</td>      <td>...</td>      <td>0.000000</td>      <td>0.000000</td>      <td>0.000000</td>      <td>0.000000</td>      <td>0.000000</td>      <td>-9.168192</td>      <td>-5.558207</td>      <td>-9.639552</td>      <td>-4.153899</td>      <td>-6.546556</td>    </tr>    <tr>      <td>25%</td>      <td>37499.750000</td>      <td>11156.000000</td>      <td>1.999091e+07</td>      <td>10.000000</td>      <td>1.000000</td>      <td>0.000000</td>      <td>0.000000</td>      <td>0.000000</td>      <td>75.000000</td>      <td>12.500000</td>      <td>...</td>      <td>0.243615</td>      <td>0.000038</td>      <td>0.062474</td>      <td>0.035334</td>      <td>0.033930</td>      <td>-3.722303</td>      <td>-1.951543</td>      <td>-1.871846</td>      <td>-1.057789</td>      <td>-0.437034</td>    </tr>    <tr>      <td>50%</td>      <td>74999.500000</td>      <td>51638.000000</td>      <td>2.003091e+07</td>      <td>30.000000</td>      <td>6.000000</td>      <td>1.000000</td>      <td>0.000000</td>      <td>0.000000</td>      <td>110.000000</td>      <td>15.000000</td>      <td>...</td>      <td>0.257798</td>      <td>0.000812</td>      <td>0.095866</td>      <td>0.057014</td>      <td>0.058484</td>      <td>1.624076</td>      <td>-0.358053</td>      <td>-0.130753</td>      <td>-0.036245</td>      <td>0.141246</td>    </tr>    <tr>      <td>75%</td>      <td>112499.250000</td>      <td>118841.250000</td>      <td>2.007111e+07</td>      <td>66.000000</td>      <td>13.000000</td>      <td>3.000000</td>      <td>1.000000</td>      <td>0.000000</td>      <td>150.000000</td>      <td>15.000000</td>      <td>...</td>      <td>0.265297</td>      <td>0.102009</td>      <td>0.125243</td>      <td>0.079382</td>      <td>0.087491</td>      <td>2.844357</td>      <td>1.255022</td>      <td>1.776933</td>      <td>0.942813</td>      <td>0.680378</td>    </tr>    <tr>      <td>max</td>      <td>149999.000000</td>      <td>196812.000000</td>      <td>2.015121e+07</td>      <td>247.000000</td>      <td>39.000000</td>      <td>7.000000</td>      <td>6.000000</td>      <td>1.000000</td>      <td>19312.000000</td>      <td>15.000000</td>      <td>...</td>      <td>0.291838</td>      <td>0.151420</td>      <td>1.404936</td>      <td>0.160791</td>      <td>0.222787</td>      <td>12.357011</td>      <td>18.819042</td>      <td>13.847792</td>      <td>11.147669</td>      <td>8.658418</td>    </tr>  </tbody></table><p>8 rows × 30 columns</p></div><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Test_data.describe()</span><br></pre></td></tr></tbody></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>SaleID</th>      <th>name</th>      <th>regDate</th>      <th>model</th>      <th>brand</th>      <th>bodyType</th>      <th>fuelType</th>      <th>gearbox</th>      <th>power</th>      <th>kilometer</th>      <th>...</th>      <th>v_5</th>      <th>v_6</th>      <th>v_7</th>      <th>v_8</th>      <th>v_9</th>      <th>v_10</th>      <th>v_11</th>      <th>v_12</th>      <th>v_13</th>      <th>v_14</th>    </tr>  </thead>  <tbody>    <tr>      <td>count</td>      <td>50000.000000</td>      <td>50000.000000</td>      <td>5.000000e+04</td>      <td>50000.000000</td>      <td>50000.000000</td>      <td>48587.000000</td>      <td>47107.000000</td>      <td>48090.000000</td>      <td>50000.000000</td>      <td>50000.000000</td>      <td>...</td>      <td>50000.000000</td>      <td>50000.000000</td>      <td>50000.000000</td>      <td>50000.000000</td>      <td>50000.000000</td>      <td>50000.000000</td>      <td>50000.000000</td>      <td>50000.000000</td>      <td>50000.000000</td>      <td>50000.000000</td>    </tr>    <tr>      <td>mean</td>      <td>174999.500000</td>      <td>68542.223280</td>      <td>2.003393e+07</td>      <td>46.844520</td>      <td>8.056240</td>      <td>1.782185</td>      <td>0.373405</td>      <td>0.224350</td>      <td>119.883620</td>      <td>12.595580</td>      <td>...</td>      <td>0.248669</td>      <td>0.045021</td>      <td>0.122744</td>      <td>0.057997</td>      <td>0.062000</td>      <td>-0.017855</td>      <td>-0.013742</td>      <td>-0.013554</td>      <td>-0.003147</td>      <td>0.001516</td>    </tr>    <tr>      <td>std</td>      <td>14433.901067</td>      <td>61052.808133</td>      <td>5.368870e+04</td>      <td>49.469548</td>      <td>7.819477</td>      <td>1.760736</td>      <td>0.546442</td>      <td>0.417158</td>      <td>185.097387</td>      <td>3.908979</td>      <td>...</td>      <td>0.044601</td>      <td>0.051766</td>      <td>0.195972</td>      <td>0.029211</td>      <td>0.035653</td>      <td>3.747985</td>      <td>3.231258</td>      <td>2.515962</td>      <td>1.286597</td>      <td>1.027360</td>    </tr>    <tr>      <td>min</td>      <td>150000.000000</td>      <td>0.000000</td>      <td>1.991000e+07</td>      <td>0.000000</td>      <td>0.000000</td>      <td>0.000000</td>      <td>0.000000</td>      <td>0.000000</td>      <td>0.000000</td>      <td>0.500000</td>      <td>...</td>      <td>0.000000</td>      <td>0.000000</td>      <td>0.000000</td>      <td>0.000000</td>      <td>0.000000</td>      <td>-9.160049</td>      <td>-5.411964</td>      <td>-8.916949</td>      <td>-4.123333</td>      <td>-6.112667</td>    </tr>    <tr>      <td>25%</td>      <td>162499.750000</td>      <td>11203.500000</td>      <td>1.999091e+07</td>      <td>10.000000</td>      <td>1.000000</td>      <td>0.000000</td>      <td>0.000000</td>      <td>0.000000</td>      <td>75.000000</td>      <td>12.500000</td>      <td>...</td>      <td>0.243762</td>      <td>0.000044</td>      <td>0.062644</td>      <td>0.035084</td>      <td>0.033714</td>      <td>-3.700121</td>      <td>-1.971325</td>      <td>-1.876703</td>      <td>-1.060428</td>      <td>-0.437920</td>    </tr>    <tr>      <td>50%</td>      <td>174999.500000</td>      <td>52248.500000</td>      <td>2.003091e+07</td>      <td>29.000000</td>      <td>6.000000</td>      <td>1.000000</td>      <td>0.000000</td>      <td>0.000000</td>      <td>109.000000</td>      <td>15.000000</td>      <td>...</td>      <td>0.257877</td>      <td>0.000815</td>      <td>0.095828</td>      <td>0.057084</td>      <td>0.058764</td>      <td>1.613212</td>      <td>-0.355843</td>      <td>-0.142779</td>      <td>-0.035956</td>      <td>0.138799</td>    </tr>    <tr>      <td>75%</td>      <td>187499.250000</td>      <td>118856.500000</td>      <td>2.007110e+07</td>      <td>65.000000</td>      <td>13.000000</td>      <td>3.000000</td>      <td>1.000000</td>      <td>0.000000</td>      <td>150.000000</td>      <td>15.000000</td>      <td>...</td>      <td>0.265328</td>      <td>0.102025</td>      <td>0.125438</td>      <td>0.079077</td>      <td>0.087489</td>      <td>2.832708</td>      <td>1.262914</td>      <td>1.764335</td>      <td>0.941469</td>      <td>0.681163</td>    </tr>    <tr>      <td>max</td>      <td>199999.000000</td>      <td>196805.000000</td>      <td>2.015121e+07</td>      <td>246.000000</td>      <td>39.000000</td>      <td>7.000000</td>      <td>6.000000</td>      <td>1.000000</td>      <td>20000.000000</td>      <td>15.000000</td>      <td>...</td>      <td>0.291618</td>      <td>0.153265</td>      <td>1.358813</td>      <td>0.156355</td>      <td>0.214775</td>      <td>12.338872</td>      <td>18.856218</td>      <td>12.950498</td>      <td>5.913273</td>      <td>2.624622</td>    </tr>  </tbody></table><p>8 rows × 29 columns</p></div><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Train_data.info()</span><br></pre></td></tr></tbody></table></figure><pre><code><class 'pandas.core.frame.DataFrame'>RangeIndex: 150000 entries, 0 to 149999Data columns (total 31 columns):SaleID               150000 non-null int64name                 150000 non-null int64regDate              150000 non-null int64model                149999 non-null float64brand                150000 non-null int64bodyType             145494 non-null float64fuelType             141320 non-null float64gearbox              144019 non-null float64power                150000 non-null int64kilometer            150000 non-null float64notRepairedDamage    150000 non-null objectregionCode           150000 non-null int64seller               150000 non-null int64offerType            150000 non-null int64creatDate            150000 non-null int64price                150000 non-null int64v_0                  150000 non-null float64v_1                  150000 non-null float64v_2                  150000 non-null float64v_3                  150000 non-null float64v_4                  150000 non-null float64v_5                  150000 non-null float64v_6                  150000 non-null float64v_7                  150000 non-null float64v_8                  150000 non-null float64v_9                  150000 non-null float64v_10                 150000 non-null float64v_11                 150000 non-null float64v_12                 150000 non-null float64v_13                 150000 non-null float64v_14                 150000 non-null float64dtypes: float64(20), int64(10), object(1)memory usage: 35.5+ MB</code></pre><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Test_data.info()</span><br></pre></td></tr></tbody></table></figure><pre><code><class 'pandas.core.frame.DataFrame'>RangeIndex: 50000 entries, 0 to 49999Data columns (total 30 columns):SaleID               50000 non-null int64name                 50000 non-null int64regDate              50000 non-null int64model                50000 non-null float64brand                50000 non-null int64bodyType             48587 non-null float64fuelType             47107 non-null float64gearbox              48090 non-null float64power                50000 non-null int64kilometer            50000 non-null float64notRepairedDamage    50000 non-null objectregionCode           50000 non-null int64seller               50000 non-null int64offerType            50000 non-null int64creatDate            50000 non-null int64v_0                  50000 non-null float64v_1                  50000 non-null float64v_2                  50000 non-null float64v_3                  50000 non-null float64v_4                  50000 non-null float64v_5                  50000 non-null float64v_6                  50000 non-null float64v_7                  50000 non-null float64v_8                  50000 non-null float64v_9                  50000 non-null float64v_10                 50000 non-null float64v_11                 50000 non-null float64v_12                 50000 non-null float64v_13                 50000 non-null float64v_14                 50000 non-null float64dtypes: float64(20), int64(9), object(1)memory usage: 11.4+ MB</code></pre><p>从上面的统计量与信息来看，没有什么特别之处，就数据类型来说<code>notRepairedDamage</code>的类型是<code>object</code>是个另类，后续要进行特殊处理。</p><h2 id="2️⃣-2️⃣-数据的缺失情况📌"><a href="#2️⃣-2️⃣-数据的缺失情况📌" class="headerlink" title="2️⃣.2️⃣ 数据的缺失情况📌"></a>2️⃣.2️⃣ 数据的缺失情况📌</h2><p>  <code>pandas</code>内置了<code>isnull()</code>可以用来判断是否有缺失值，它会对空值和NA进行判断然后返回<code>True</code>或<code>False</code>。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Train_data.isnull().sum()</span><br></pre></td></tr></tbody></table></figure><pre><code>SaleID                  0name                    0regDate                 0model                   1brand                   0bodyType             4506fuelType             8680gearbox              5981power                   0kilometer               0notRepairedDamage       0regionCode              0seller                  0offerType               0creatDate               0price                   0v_0                     0v_1                     0v_2                     0v_3                     0v_4                     0v_5                     0v_6                     0v_7                     0v_8                     0v_9                     0v_10                    0v_11                    0v_12                    0v_13                    0v_14                    0dtype: int64</code></pre><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Test_data.isnull().sum()</span><br></pre></td></tr></tbody></table></figure><pre><code>SaleID                  0name                    0regDate                 0model                   0brand                   0bodyType             1413fuelType             2893gearbox              1910power                   0kilometer               0notRepairedDamage       0regionCode              0seller                  0offerType               0creatDate               0v_0                     0v_1                     0v_2                     0v_3                     0v_4                     0v_5                     0v_6                     0v_7                     0v_8                     0v_9                     0v_10                    0v_11                    0v_12                    0v_13                    0v_14                    0dtype: int64</code></pre><ul><li>可以看出缺失的数据值主要集中在<code>bodyType</code>，<code>fuelType</code>，<code>gearbox</code>，这三个特征中。训练集中<code>model</code>缺失了一个值，但是无伤大雅。至于如何填充，亦或是删除这些数据，需要后期在选用模型时再做考虑。</li><li>同时我们也可以通过<code>missingno</code>库查看缺省值的其他属性。<ul><li>矩阵图<code>matrix</code></li><li>柱状图<code>bar</code></li><li>热力图<code>heatmap</code></li><li>树状图<code>dendrogram</code></li></ul></li></ul><p><strong>缺省热力图</strong></p><p>  热力图表示两个特征之间的缺失相关性，即一个变量的存在或不存在如何强烈影响的另一个的存在。如果<code>x</code>和<code>y</code>的热度值是1，则代表当<code>x</code>缺失时，<code>y</code>也百分之百缺失。如果<code>x</code>和<code>y</code>的热度相关性为-1，说明<code>x</code>缺失的值，那么<code>y</code>没有缺失；而<code>x</code>没有缺失时，<code>y</code>为缺失。至于 矩阵图，与柱状图没有查看的必要，我们可以用缺省热力图观察一下情况：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msno.heatmap(Train_data.sample(<span class="number">10000</span>))</span><br></pre></td></tr></tbody></table></figure><pre><code><matplotlib.axes._subplots.AxesSubplot at 0x1c62d5c07f0></code></pre><p><img src="https://img-blog.csdnimg.cn/2020032202134617.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0V4Y2FsaWJ1clVsaW1pdGVk,size_16,color_FFFFFF,t_70#pic_center" alt="训练集相关性热力图"></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msno.heatmap(Test_data.sample(<span class="number">10000</span>))</span><br></pre></td></tr></tbody></table></figure><pre><code><matplotlib.axes._subplots.AxesSubplot at 0x1c62de62d30></code></pre><p><img src="https://img-blog.csdnimg.cn/202003220214118.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0V4Y2FsaWJ1clVsaW1pdGVk,size_16,color_FFFFFF,t_70#pic_center" alt="测试集相关性热力图"></p><p><strong>树状图</strong></p><p>  树形图使用层次聚类算法通过它们的无效性相关性（根据二进制距离测量）将变量彼此相加。在树的每个步骤，基于哪个组合最小化剩余簇的距离来分割变量。变量集越单调，它们的总距离越接近零，并且它们的平均距离（y轴）越接近零。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msno.dendrogram(Train_data.sample(<span class="number">10000</span>))</span><br></pre></td></tr></tbody></table></figure><pre><code><matplotlib.axes._subplots.AxesSubplot at 0x1c62de92390></code></pre><p><img src="https://img-blog.csdnimg.cn/2020032202142868.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0V4Y2FsaWJ1clVsaW1pdGVk,size_16,color_FFFFFF,t_70#pic_center" alt="训练集聚类图"></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msno.dendrogram(Test_data.sample(<span class="number">10000</span>))</span><br></pre></td></tr></tbody></table></figure><pre><code><matplotlib.axes._subplots.AxesSubplot at 0x1c62d7df400></code></pre><p><img src="https://img-blog.csdnimg.cn/20200322021441792.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0V4Y2FsaWJ1clVsaW1pdGVk,size_16,color_FFFFFF,t_70#pic_center" alt="测试集聚类图"></p><p>由上面的热力图以及聚类图可以看出，各个缺失值之间的相关性并不明显。</p><h2 id="2️⃣-3️⃣-数据的异常情况☢️"><a href="#2️⃣-3️⃣-数据的异常情况☢️" class="headerlink" title="2️⃣.3️⃣ 数据的异常情况☢️"></a>2️⃣.3️⃣ 数据的异常情况☢️</h2><p>  因为之前发现<code>notRepairedDamage</code>的类型是<code>object</code>是个另类，所以看一下它的具体情况。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Train_data[<span class="string">'notRepairedDamage'</span>].value_counts()</span><br></pre></td></tr></tbody></table></figure><pre><code>0.0    111361-       243241.0     14315Name: notRepairedDamage, dtype: int64</code></pre><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Test_data[<span class="string">'notRepairedDamage'</span>].value_counts()</span><br></pre></td></tr></tbody></table></figure><pre><code>0.0    37249-       80311.0     4720Name: notRepairedDamage, dtype: int64</code></pre><p>发现有’-‘的存在，这可以算是<code>NaN</code>的一种，所以可以将其替换为<code>NaN</code></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Train_data[<span class="string">'notRepairedDamage'</span>].replace(<span class="string">'-'</span>, np.nan, inplace=<span class="literal">True</span>)</span><br><span class="line">Test_data[<span class="string">'notRepairedDamage'</span>].replace(<span class="string">'-'</span>, np.nan, inplace=<span class="literal">True</span>)</span><br></pre></td></tr></tbody></table></figure><h2 id="2️⃣-4️⃣-待预测的真实值的分布情况📈"><a href="#2️⃣-4️⃣-待预测的真实值的分布情况📈" class="headerlink" title="2️⃣.4️⃣ 待预测的真实值的分布情况📈"></a>2️⃣.4️⃣ 待预测的真实值的分布情况📈</h2><p>  我们先来看看价格预测值的分布情况</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Train_data[<span class="string">'price'</span>]</span><br></pre></td></tr></tbody></table></figure><pre><code>0         18501         36002         62223         24004         5200          ... 149995    5900149996    9500149997    7500149998    4999149999    4700Name: price, Length: 150000, dtype: int64</code></pre><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Train_data[<span class="string">'price'</span>].value_counts()</span><br></pre></td></tr></tbody></table></figure><pre><code>500      23371500     21581200     19221000     18502500     1821         ... 25321       18886        18801        137920       18188        1Name: price, Length: 3763, dtype: int64</code></pre><p>嗯哼，平淡无奇，接下来最重要的是要看一下历史成交价格的<strong>偏度（Skewness）</strong>与<strong>峰度（Kurtosis）</strong>，此外自然界最优美的分布式正态分布，所以也要看一下待预测的价格分布是否满足正态分布。<br>再解释一下<strong>偏度</strong>与<strong>峰度</strong>，一般会拿偏度和峰度来看数据的分布形态，而且一般会跟正态分布做比较，我们把正态分布的偏度和峰度都看做零。如果算到偏度峰度不为0，即表明变量存在左偏右偏，或者是高顶平顶。</p><ul><li><p><strong>偏度（Skewness）</strong><br>是描述数据分布形态的统计量，其描述的是某总体取值分布的对称性，简单来说就是数据的不对称程度。</p><ul><li>Skewness = 0 ，分布形态与正态分布偏度相同。</li><li>Skewness > 0 ，正偏差数值较大，为正偏或右偏。长尾巴拖在右边，数据右端有较多的极端值。</li><li>Skewness < 0 ，负偏差数值较大，为负偏或左偏。长尾巴拖在左边，数据左端有较多的极端值。</li><li>数值的绝对值越大，表明数据分布越不对称，偏斜程度大。</li><li>计算公式<script type="math/tex; mode=display">\gamma_{1}=\mathrm{E}\left[\left(\frac{X-\mu}{\sigma}\right)^{3}\right]=\frac{\mu_{3}}{\sigma^{3}}=\frac{\mathrm{E}\left[(X-\mu)^{3}\right]}{\left(\mathrm{E}\left[(X-\mu)^{2}\right]\right)^{3 / 2}}=\frac{\kappa_{3}}{\kappa_{2}^{3 / 2}}</script></li></ul></li><li><p><strong>峰度（Kurtosis）</strong><br>偏度是描述某变量所有取值分布形态陡缓程度的统计量，简单来说就是数据分布顶的尖锐程度。</p><ul><li>Kurtosis = 0 与正态分布的陡缓程度相同。</li><li>Kurtosis > 0 比正态分布的高峰更加陡峭——尖顶峰。</li><li>urtosis<0 比正态分布的高峰来得平台——平顶峰。</li><li>计算公式：<script type="math/tex; mode=display">b_{1}=\frac{m_{3}}{s^{3}}=\frac{\frac{1}{n} \sum_{i=1}^{n}\left(x_{i}-\bar{x}\right)^{3}}{\sqrt{\frac{1}{n-1} \sum_{i=1}^{n}\left(x_{i}-\bar{x}\right)^{2}}^{3}}=\frac{\frac{1}{n} \sum_{i=1}^{n}\left(x_{i}-\bar{x}\right)^{3}}{\left[\frac{1}{n-1} \sum_{i=1}^{n}\left(x_{i}-\bar{x}\right)^{2}\right]^{3 / 2}}</script></li></ul></li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sns.distplot(Train_data[<span class="string">'price'</span>]);</span><br><span class="line">print(<span class="string">"Skewness: %f"</span> % Train_data[<span class="string">'price'</span>].skew())</span><br><span class="line">print(<span class="string">"Kurtosis: %f"</span> % Train_data[<span class="string">'price'</span>].kurt())</span><br></pre></td></tr></tbody></table></figure><pre><code>Skewness: 3.346487Kurtosis: 18.995183</code></pre><p><img src="https://img-blog.csdnimg.cn/20200322021455210.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0V4Y2FsaWJ1clVsaW1pdGVk,size_16,color_FFFFFF,t_70#pic_center" alt="价格分布"></p><p>很明显，预测值的数据分布不服从正态分布，偏度与峰度的值都很大，也很符合他们的定义，从图中可以看出，长尾巴拖在右边印证了峰度值很大，峰顶很尖对应了偏度值很大。以我模糊的概率统计知识，这更加像是接近于卡方或者是F分布。所以要对数据本身进行变换。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">plt.hist(Train_data[<span class="string">'price'</span>], orientation = <span class="string">'vertical'</span>,histtype = <span class="string">'bar'</span>, color =<span class="string">'red'</span>)</span><br><span class="line">plt.show()</span><br><span class="line">plt.hist(np.log(Train_data[<span class="string">'price'</span>]), orientation = <span class="string">'vertical'</span>,histtype = <span class="string">'bar'</span>, color =<span class="string">'red'</span>) </span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="https://img-blog.csdnimg.cn/20200322021509345.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0V4Y2FsaWJ1clVsaW1pdGVk,size_16,color_FFFFFF,t_70#pic_center" alt="价格直方分布图"></p><p><img src="https://img-blog.csdnimg.cn/20200322021522612.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0V4Y2FsaWJ1clVsaW1pdGVk,size_16,color_FFFFFF,t_70#pic_center" alt="log运算后的价格直方图"></p><p>由于数据较为集中，这就给预测模型的预测带来比较大的困难，所以可以进行一次<code>log</code>运算改善一下分布，有利于后续的预测。</p><h2 id="2️⃣-5️⃣-数据特征相关性的分析🎎"><a href="#2️⃣-5️⃣-数据特征相关性的分析🎎" class="headerlink" title="2️⃣.5️⃣ 数据特征相关性的分析🎎"></a>2️⃣.5️⃣ 数据特征相关性的分析🎎</h2><h3 id="2️⃣-5️⃣-1️⃣-numric特征的相关性分析"><a href="#2️⃣-5️⃣-1️⃣-numric特征的相关性分析" class="headerlink" title="2️⃣.5️⃣.1️⃣ numric特征的相关性分析"></a>2️⃣.5️⃣.1️⃣ <code>numric</code>特征的相关性分析</h3><p>  这里主要是为了解决我之前提出的疑问，「如何确定每个指标的重要性」，所以研究每个特征之间的相关性就显得尤为重要。在分析之前需要确定哪些特征是<code>numeric</code>型数据，哪些特征是<code>object</code>型数据。自动化的方法是<br>这样的：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># num_feas = Train_data.select_dtypes(include=[np.number])</span></span><br><span class="line"><span class="comment"># obj_feas = Train_data.select_dtypes(include=[np.object])</span></span><br></pre></td></tr></tbody></table></figure><p>但本题的数据集的label已经标好名称了，而且label是有限的，每个种类是可以理解的，所以还是需要人为标注，例如车型<code>bodyType</code>虽然是数值型数据，但其实我们知道它应该是<code>object</code>型数据。所以可以这样：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">num_feas = [<span class="string">'power'</span>, <span class="string">'kilometer'</span>, <span class="string">'v_0'</span>, <span class="string">'v_1'</span>, <span class="string">'v_2'</span>, <span class="string">'v_3'</span>, <span class="string">'v_4'</span>, <span class="string">'v_5'</span>, <span class="string">'v_6'</span>, <span class="string">'v_7'</span>, <span class="string">'v_8'</span>, <span class="string">'v_9'</span>, <span class="string">'v_10'</span>, <span class="string">'v_11'</span>, <span class="string">'v_12'</span>, <span class="string">'v_13'</span>,<span class="string">'v_14'</span> ]</span><br><span class="line"></span><br><span class="line">obj_feas = [<span class="string">'name'</span>, <span class="string">'model'</span>, <span class="string">'brand'</span>, <span class="string">'bodyType'</span>, <span class="string">'fuelType'</span>, <span class="string">'gearbox'</span>, <span class="string">'notRepairedDamage'</span>, <span class="string">'regionCode'</span>,]</span><br></pre></td></tr></tbody></table></figure><p>下面我们将<code>price</code>加入<code>num_feas</code>，并用<code>pandas</code>笼统地分析一下特征之间的相关性，并进行可视化。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">num_feas.append(<span class="string">'price'</span>)</span><br><span class="line">price_numeric = Train_data[num_feas]</span><br><span class="line">correlation = price_numeric.corr()</span><br><span class="line">print(correlation[<span class="string">'price'</span>].sort_values(ascending = <span class="literal">False</span>),<span class="string">'\n'</span>)</span><br></pre></td></tr></tbody></table></figure><pre><code>price        1.000000v_12         0.692823v_8          0.685798v_0          0.628397power        0.219834v_5          0.164317v_2          0.085322v_6          0.068970v_1          0.060914v_14         0.035911v_13        -0.013993v_7         -0.053024v_4         -0.147085v_9         -0.206205v_10        -0.246175v_11        -0.275320kilometer   -0.440519v_3         -0.730946Name: price, dtype: float64 </code></pre><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f , ax = plt.subplots(figsize = (<span class="number">8</span>, <span class="number">8</span>))</span><br><span class="line">plt.title(<span class="string">'Correlation of Numeric Features with Price'</span>, y = <span class="number">1</span>, size = <span class="number">16</span>)</span><br><span class="line">sns.heatmap(correlation, square = <span class="literal">True</span>, annot=<span class="literal">True</span>, cmap=<span class="string">'RdPu'</span>, vmax = <span class="number">0.8</span>) <span class="comment"># 参数annot为True时，为每个单元格写入数据值。如果数组具有与数据相同的形状，则使用它来注释热力图而不是原始数据。</span></span><br></pre></td></tr></tbody></table></figure><pre><code><matplotlib.axes._subplots.AxesSubplot at 0x1c63234b400></code></pre><p><img src="https://img-blog.csdnimg.cn/20200322021535689.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0V4Y2FsaWJ1clVsaW1pdGVk,size_16,color_FFFFFF,t_70#pic_center" alt="相关度热力图"></p><p>作为一个色彩控，<code>cmap</code>的可选参数有Accent, Accent_r, Blues, Blues_r, BrBG, BrBG_r, BuGn, BuGn_r, BuPu, BuPu_r, CMRmap, CMRmap_r, Dark2, Dark2_r, GnBu, GnBu_r, Greens, Greens_r, Greys, Greys_r, OrRd, OrRd_r, Oranges, Oranges_r, PRGn, PRGn_r, Paired, Paired_r, Pastel1, Pastel1_r, Pastel2, Pastel2_r, PiYG, PiYG_r, PuBu, PuBuGn, PuBuGn_r, PuBu_r, PuOr, PuOr_r, PuRd, PuRd_r, Purples, Purples_r, RdBu, RdBu_r, RdGy, RdGy_r, RdPu, RdPu_r, RdYlBu, RdYlBu_r, RdYlGn, RdYlGn_r, Reds, Reds_r, Set1, Set1_r, Set2, Set2_r, Set3, Set3_r, Spectral, Spectral_r, Wistia, Wistia_r, YlGn, YlGnBu, YlGnBu_r, YlGn_r, YlOrBr, YlOrBr_r, YlOrRd, YlOrRd_r…其中末尾加r是颜色取反。</p><p>关于<code>seaborn</code>的<code>heatmap</code>可以看这里<a href="https://www.jianshu.com/p/e195a09a8ca9" target="_blank" rel="noopener">seaborn.heatmap的初步学习</a></p><p>言归正传，从热度图中可以看出跟<code>price</code>相关性高的几个特征主要包括：<code>kilometer</code>,<code>v3</code>。与我们的现实经验还是比较吻合的，那个<code>v3</code>可能是发动机等汽车重要部件相关的某个参数。</p><ul><li><strong>峰度与偏度</strong></li></ul><p>  查看各个特征的偏度与峰度，以及数据的分布状况</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">del</span> price_numeric[<span class="string">'price'</span>]</span><br><span class="line"><span class="comment">#  输出数据的峰度与偏度，这里pandas可以直接调用</span></span><br><span class="line"><span class="keyword">for</span> col <span class="keyword">in</span> num_feas:</span><br><span class="line">    print(<span class="string">'{:15}'</span>.format(col), </span><br><span class="line">          <span class="string">'Skewness: {:05.2f}'</span>.format(Train_data[col].skew()) , </span><br><span class="line">          <span class="string">'   '</span> ,</span><br><span class="line">          <span class="string">'Kurtosis: {:06.2f}'</span>.format(Train_data[col].kurt())  </span><br><span class="line">         )</span><br><span class="line"></span><br><span class="line">f = pd.melt(Train_data, value_vars = num_feas) <span class="comment"># 利用pandas的melt函数将测试集中的num_feas所对应的数据取出来</span></span><br><span class="line"><span class="comment"># FacetGrid是sns库中用来画网格图的函数，其中col_wrap用来控制一行显示图的个数，sharex或者sharey是否共享x,y轴，意味着每个子图是否有自己的横纵坐标。</span></span><br><span class="line">g = sns.FacetGrid(f, col = <span class="string">"variable"</span>,  col_wrap = <span class="number">6</span>, sharex = <span class="literal">False</span>, sharey = <span class="literal">False</span>, hue = <span class="string">'variable'</span>, palette = <span class="string">"GnBu_d"</span>) <span class="comment"># palette的可选参数与上文的cmap类似</span></span><br><span class="line">g = g.map(sns.distplot, <span class="string">"value"</span>)</span><br></pre></td></tr></tbody></table></figure><pre><code>power           Skewness: 65.86     Kurtosis: 5733.45kilometer       Skewness: -1.53     Kurtosis: 001.14v_0             Skewness: -1.32     Kurtosis: 003.99v_1             Skewness: 00.36     Kurtosis: -01.75v_2             Skewness: 04.84     Kurtosis: 023.86v_3             Skewness: 00.11     Kurtosis: -00.42v_4             Skewness: 00.37     Kurtosis: -00.20v_5             Skewness: -4.74     Kurtosis: 022.93v_6             Skewness: 00.37     Kurtosis: -01.74v_7             Skewness: 05.13     Kurtosis: 025.85v_8             Skewness: 00.20     Kurtosis: -00.64v_9             Skewness: 00.42     Kurtosis: -00.32v_10            Skewness: 00.03     Kurtosis: -00.58v_11            Skewness: 03.03     Kurtosis: 012.57v_12            Skewness: 00.37     Kurtosis: 000.27v_13            Skewness: 00.27     Kurtosis: -00.44v_14            Skewness: -1.19     Kurtosis: 002.39price           Skewness: 03.35     Kurtosis: 019.00</code></pre><p><img src="https://img-blog.csdnimg.cn/20200322021549954.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0V4Y2FsaWJ1clVsaW1pdGVk,size_16,color_FFFFFF,t_70#pic_center" alt="各特征之间的相关度图"></p><p><strong>各个数值特征之间的相关性</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sns.set()</span><br><span class="line">columns = num_feas</span><br><span class="line">sns.pairplot(Train_data[columns], size = <span class="number">2</span> , kind = <span class="string">'scatter'</span>, diag_kind =<span class="string">'kde'</span>, palette = <span class="string">"PuBu"</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><pre><code>D:\Software\Anaconda\lib\site-packages\seaborn\axisgrid.py:2065: UserWarning: The `size` parameter has been renamed to `height`; pleaes update your code.  warnings.warn(msg, UserWarning)</code></pre><p><img src="https://img-blog.csdnimg.cn/20200322021608718.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0V4Y2FsaWJ1clVsaW1pdGVk,size_16,color_FFFFFF,t_70#pic_center" alt="价格与各特征之间的相关度图"></p><p>可以看出成闭团状的相关图还是很多的，说明相应特征的相关度比较大。</p><ul><li><strong><code>price</code>与其他变量相关性可视化</strong></li></ul><p>  这里用匿名变量<code>v0</code>~<code>v13</code>进行分析，使用<code>seaborn</code>的<code>regplot</code>函数进行相关度回归分析。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Y_train = Train_data[<span class="string">'price'</span>]</span><br><span class="line">fig, ((ax1, ax2), (ax3, ax4), (ax5, ax6), (ax7, ax8), (ax9, ax10),(ax11, ax12),(ax13,ax14)) = plt.subplots(nrows = <span class="number">7</span>, ncols=<span class="number">2</span>, figsize=(<span class="number">24</span>, <span class="number">20</span>))</span><br><span class="line">ax = [ax1, ax2, ax3, ax4, ax5, ax6, ax7, ax8, ax9, ax10, ax11, ax12, ax13, ax14]</span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">14</span>):</span><br><span class="line">    sns.regplot(x = <span class="string">'v_'</span> + str(num), y = <span class="string">'price'</span>, data = pd.concat([Y_train, Train_data[<span class="string">'v_'</span> + str(num)]],axis = <span class="number">1</span>), scatter = <span class="literal">True</span>, fit_reg = <span class="literal">True</span>, ax = ax[num])</span><br></pre></td></tr></tbody></table></figure><p><img src="https://img-blog.csdnimg.cn/2020032202162299.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0V4Y2FsaWJ1clVsaW1pdGVk,size_16,color_FFFFFF,t_70#pic_center" alt="价格与其他特征之间的回归分析"></p><p>可以看出大部分匿名变量的分布还是比较集中的，当然线性回归的性能确实太弱了。</p><p>至于类别特征的回归分析，本身可以参考的意义不大，就暂时省略了。</p><h3 id="2️⃣-5️⃣-2️⃣-pandas-profiling生成数据报告📕"><a href="#2️⃣-5️⃣-2️⃣-pandas-profiling生成数据报告📕" class="headerlink" title="2️⃣.5️⃣.2️⃣ pandas_profiling生成数据报告📕"></a>2️⃣.5️⃣.2️⃣ <code>pandas_profiling</code>生成数据报告📕</h3><p>  用<code>pandas_profiling</code>生成一个较为全面的可视化和数据报告(较为简单、方便)最终打开html文件即可</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas_profiling</span><br><span class="line">file = pandas_profiling.ProfileReport(Train_data)</span><br><span class="line">pfr.to_file(<span class="string">"pandas_analysis.html"</span>)</span><br></pre></td></tr></tbody></table></figure><p><strong>长这个样子：</strong><br><img src="https://img-blog.csdnimg.cn/20200322022858409.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0V4Y2FsaWJ1clVsaW1pdGVk,size_16,color_FFFFFF,t_70#pic_center" alt="profuling1"></p><p><img src="https://img-blog.csdnimg.cn/2020032202291526.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0V4Y2FsaWJ1clVsaW1pdGVk,size_16,color_FFFFFF,t_70#pic_center" alt="profuling2"></p><p><img src="https://img-blog.csdnimg.cn/20200322022922975.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0V4Y2FsaWJ1clVsaW1pdGVk,size_16,color_FFFFFF,t_70#pic_center" alt="profuling3"><br>具体文件在这里<a href="https://tianchi.aliyun.com/mas-notebook/proxy/filemanager/files/example.html" target="_blank" rel="noopener">我的天池</a></p><h1 id="3️⃣-结语✏️"><a href="#3️⃣-结语✏️" class="headerlink" title="3️⃣ 结语✏️"></a>3️⃣ 结语✏️</h1><p>  至此赛题的赛题理解以及数据分析工作告一段落，总结一下：</p><ul><li>运用<code>describe()</code>和<code>info()</code>进行数据基本统计量的描述</li><li>运用<code>missingno</code>库和<code>pandas.isnull()</code>来对异常值和缺失值进行可视化察觉以及处理 </li><li>熟悉偏度（Skewness）与峰度（Kurtosis）的概念，可以用<code>skeu()</code>和<code>kurt()</code>计算其值</li><li>在确定预测值的范围与分布后，可以做一些取对数或者开根号的方式缓解数据集中的问题</li><li>相关性分析时<ul><li>用<code>corr()</code>计算各特征的相关系数</li><li>用<code>seaborn</code>的<code>heatmap</code>画出相关系数的热力图</li><li>用<code>seaborn</code>的<code>FacetGrid</code>和<code>pairplot</code>可以分别画出各特征内部之间以及预测值与其他特征之间的数据分布图</li><li>也可以用<code>seaborn</code>的<code>regplot</code>来对预测值与各特征的关系进行回归分析</li></ul></li></ul><p>开始下一步特征工程。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;惊闻4.13日江苏省高校将要启动开学模式，我自岿然不动。山中何事？松花酿酒，春水煎茶，如是而已。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="https://kemo.xyz/categories/Algorithm/"/>
    
    
      <category term="python" scheme="https://kemo.xyz/tags/python/"/>
    
      <category term="pandas" scheme="https://kemo.xyz/tags/pandas/"/>
    
      <category term="Editor" scheme="https://kemo.xyz/tags/Editor/"/>
    
      <category term="DataMining" scheme="https://kemo.xyz/tags/DataMining/"/>
    
      <category term="Tianchi" scheme="https://kemo.xyz/tags/Tianchi/"/>
    
      <category term="Study" scheme="https://kemo.xyz/tags/Study/"/>
    
      <category term="Jupyter" scheme="https://kemo.xyz/tags/Jupyter/"/>
    
      <category term="seaborn" scheme="https://kemo.xyz/tags/seaborn/"/>
    
      <category term="正态分布" scheme="https://kemo.xyz/tags/%E6%AD%A3%E6%80%81%E5%88%86%E5%B8%83/"/>
    
  </entry>
  
  <entry>
    <title>相识</title>
    <link href="https://kemo.xyz/%E7%9B%B8%E8%AF%86.html"/>
    <id>https://kemo.xyz/相识.html</id>
    <published>2019-11-22T15:03:16.000Z</published>
    <updated>2020-07-09T10:34:14.952Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>相识，只是有缘，仅此而已。<br><a id="more"></a></p>    <div id="aplayer-DzhjHvaD" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="955587085" data-server="netease" data-type="playlist" data-mode="circulation" data-autoplay="true" data-mutex="true" data-listmaxheight="250px" data-preload="auto" data-theme="#ad887a" data-loop="all" data-order="list"></div><p><br></p><p>  此前的文章，已经过去了很久。这段很长的时光经历了很多，认识了很多人，看了很多书，也想通了很多，家里如今也非常和谐，早已抛弃了那些不太合适的想法。只是既然曾经某一瞬，某个深夜有过这样自我拷问的想法，我也无需否定它，仅是记录，也是警醒以后的自己：<strong>要思考，但不要自我陷入</strong>。</p><p>  同时，我也想记录下这些。</p><h2 id="19-10-30"><a href="#19-10-30" class="headerlink" title="19.10.30"></a>19.10.30</h2><div class="note success no-icon">            <p><strong>研会换届，认识了很多人。小万哥哥很逗，刘小伙子很厚道，徐学姐很照顾人，最后偷偷在我耳边说赶紧走，不然留你下来干活。<br><br>陈学姐总是很高冷，遇见了xsn，她的笑容真的很治愈。我顺便偷偷告诉她赶紧走，本来想一起走，但是，有其他人，唉。。。</strong></p>          </div><h2 id="19-10-31"><a href="#19-10-31" class="headerlink" title="19.10.31"></a>19.10.31</h2><div class="note success no-icon">            <p><strong>累得一塌糊涂的一天，也算是得到了一些收入。</strong></p>          </div><h2 id="19-11-1"><a href="#19-11-1" class="headerlink" title="19.11.1"></a>19.11.1</h2><div class="note success no-icon">            <p><strong>疯狂的一天，计划晚上实验室集体看《天气之子》，下午直接唱了一下午，不过真是几年没唱了，挺爽，好多老歌很触动。晚上的日料气氛很好，两杯生啤太爽了。<br><br>《天气之子》故事上确实较前作不是那么令人满意，有些强行加上的意思。画面方面当然是无可挑剔，但却没有《君名》那种让人沉浸迷离在那个世界的感觉，《君名》一个小小的日记元素就令人神往，更没有让人重看很多遍的欲望，时至今日我都有点沉浸在《君名》的世界那种美好的爱情的情愫里面。<br><br>这个无处不在的下雨真是搞得心情很糟，正是因为画的很真实。最后为了拯救她，居然让整个日本淹了。。。</strong></p>          </div><p><img src="https://blog-1259799643.cos.ap-shanghai.myqcloud.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20191102205949.jpg" alt="佐贺家"><br><img src="https://blog-1259799643.cos.ap-shanghai.myqcloud.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20191102210025.jpg" alt="触摸"></p><h2 id="19-11-2"><a href="#19-11-2" class="headerlink" title="19.11.2"></a>19.11.2</h2><div class="note success no-icon">            <p><strong>校园马拉松日，9KM很累很爽。遇见了圣楠，好开心。一起吃了烤鸭泡饭，幸福！还能送她回宿舍，太棒了！</strong></p>          </div><p><img src="https://blog-1259799643.cos.ap-shanghai.myqcloud.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20191102210054.jpg"></p><h2 id="19-11-3"><a href="#19-11-3" class="headerlink" title="19.11.3"></a>19.11.3</h2><div class="note success no-icon">            <p><strong>累得迷迷糊糊。。。中午我尝试着推给她我刚听到的一首《careless whisper》的粤语版，她很开心。晚上她推给我《初秋和你》，《多想在平庸的生活拥抱你》，这似乎表明了什么。😃</strong></p>          </div><h2 id="19-11-4"><a href="#19-11-4" class="headerlink" title="19.11.4"></a>19.11.4</h2><div class="note success no-icon">            <p><strong>白天我们聊了村上，圭吾，《白夜行》。晚上她又推给我《你笑起来真好看》，这是不是似乎又表明了什么。😄不同的是今天聊到了很晚，真是太幸福了。几度我开心地想要敲桌子，但一想大家都睡着了。明天也许又会是同一时刻呢！</strong></p>          </div><h2 id="19-11-5"><a href="#19-11-5" class="headerlink" title="19.11.5"></a>19.11.5</h2><div class="note success no-icon">            <p><strong>今天晚上好期待啊！仑还在说要真挚真诚，朱说我适合文科生，理科姑娘听不懂我说的那些书中的名句。<br><br>后记，那天晚上聊得太干涩，所以有点崩。。</strong></p>          </div><h2 id="19-11-6"><a href="#19-11-6" class="headerlink" title="19.11.6"></a>19.11.6</h2><div class="note success no-icon">            <p><strong>今日，忧心忡忡，感觉有些冷淡了。按照她有每日给我推歌的特点，开始了解，虽然我真的不会那么脸红心跳的聊天，不过我也很开心，她也很开心，感觉又进了一大步！</strong></p>          </div><h2 id="19-11-7"><a href="#19-11-7" class="headerlink" title="19.11.7"></a>19.11.7</h2><div class="note success no-icon">            <p><strong>今日送她去车站，去之前我们一起吃了顿饭，尴尬，见到她没话题说。转弯刹车猛了，她贴到了我背上，害羞。去到了门口，我原以为这么近了，她可以自己走过去了，但好像没有让我走的意思，真的是一直送到地铁站的门口，难道是给我机会吗？😕<br><br>后记，晚上我说她做我的梅拉德女士，我做她的维勒探长，做她的灵光一闪的电灯泡!</strong></p>          </div><h2 id="19-11-8"><a href="#19-11-8" class="headerlink" title="19.11.8"></a>19.11.8</h2><div class="note success no-icon">            <p><strong>中午她吐槽说坐了一个小时的车去打针，医生说今天给小朋友打针，让明天再去……(太惨了)。我说脑袋里都是在想她。</strong></p>          </div><h2 id="19-11-9"><a href="#19-11-9" class="headerlink" title="19.11.9"></a>19.11.9</h2><div class="note success no-icon">            <p><strong>今天去了图书馆，借了阿加莎的书以及之前没看完的约翰克里斯多夫，她说为什么突然去图书馆，我说因为看不到你，只能看书了。晚上他们买衣服，又逛平江观前，告诉我说以后她可能要给我搭配新外表，现在这身装束太IT化。。。</strong></p>          </div><h2 id="19-11-10"><a href="#19-11-10" class="headerlink" title="19.11.10"></a>19.11.10</h2><div class="note success no-icon">            <p><strong>上午听虎哥吹水，下午听老于讲勇士拯救小云公主的算法，最后总结小云公主获救，勇士被BOSS包围，舔狗不得好死。</strong></p>          </div><h2 id="19-11-11"><a href="#19-11-11" class="headerlink" title="19.11.11"></a>19.11.11</h2><div class="note success no-icon">            <p><strong>双十一，想送她一个礼物。很明显大家都极力阻止我这么做，实验室坐下来聊了很久，不能胆怯。这种感觉有点不真实。总之经过那些岁月的双十一。</strong></p>          </div><h2 id="19-11-12"><a href="#19-11-12" class="headerlink" title="19.11.12"></a>19.11.12</h2><div class="note success no-icon">            <p><strong>早上，政治课，她说对老师尴尬地微笑，想起来那笑容，是那么的令人沉醉。夜晚，在敬贤堂听讲座，讲了很多近代的名家还是很有收获，跟她聊了为什么不玩手游，她问了我的星座，她又夸我文学好，其实只是星际穿越的桥段。</strong></p>          </div><h2 id="19-11-13"><a href="#19-11-13" class="headerlink" title="19.11.13"></a>19.11.13</h2><div class="note success no-icon">            <p><strong>跌宕起伏的一天。中午跟她聊了老歌。下午我们三个人又坐下开始扯，他们说我是没事找话聊，总是保持热情以后一旦淡了反而会出现猜疑，我觉得刚认识这段时间就是应该保持高度的热情与联系的热度。<br><br>开组会时，最后一个报告，大家都已经很累了。但是这时候她正好说研会大会上有个男生准备做俯卧撑壁咚她，本来找另外一个女孩没同意，就挑了她，然后另外一个男生帮她顶替了，我认识他，她很感激，想请他吃夜宵，最后请他喝了奶茶，她说也请我喝一杯。我那个激动啊，她可能是觉得对我过意不去。她站在操场上，期盼我的归来，一连给我发了好几个表情，以前没有过，主要是我没回复，她挺着急吧，我说我在公司还要一会儿，我也想飞回来，等我紧赶慢赶到了操场，心情很激动，但是见到她又不知道说什么了，她比我还害羞，说话总是侧身站着，她说完今晚的故事，我太紧张也没话接，就边说边往宿舍走。然后就这样分开了，我呆呆地望着，那叫个尴尬啊。来的时候想象了一大堆，然后啥也没干，太逊了。。。曾一度以为是她对我没感觉了，我也悔恨今晚的表现。但我们后来又聊起来了，还好。我说明年我们就要被消灭了，她还问我为什么，太可爱了。</strong></p>          </div><h2 id="19-11-14"><a href="#19-11-14" class="headerlink" title="19.11.14"></a>19.11.14</h2><div class="note success no-icon">            <p><strong>早上，她说展示被老师劈头盖脸一顿痛骂，我安慰她说别人是讲的太差，然后被追问又答不出来被骂，你是讲的太好，老师不甘心一定要出个问题刁难你。期待明天晚上。</strong></p>          </div><h2 id="19-11-15"><a href="#19-11-15" class="headerlink" title="19.11.15"></a>19.11.15</h2><div class="note success no-icon">            <p><strong>按捺不住的心情。<br><br>第一次正式的约会，日料的包厢氛围很好，只是拘谨，聊了好多小时候的事，很有趣开心，乖乖的童年，可爱的阿姨。<br><br>遗憾没赶上的音乐喷泉。<br><br>终于一起来到在脑海中幻想复现无数遍的金鸡湖畔，永远没有真实的体验来的这般幸福。<br><br>牵手这件事有点欠妥。<br><br>还是不会聊天，聊了很多，但自己没说到点子上，还是她老是照顾我引出话题，无论我说什么都会认真倾听，回应。<br><br>初恋，感情观，电视剧，吸引的原因。<br><br>遗憾的是那么美且意义重大的景色，没有拍什么照片。<br><br>我问：如果那天我没有加你微信，是不是我们就错过了<br>她答：你还没告诉我为什么喜欢我<br><br>我其实也有同样的疑问，我却也不想简单回答“喜欢是没有理由的”，但我确实在第一眼见到她时就有那种特别感觉，诚然外表是一个维度，但是那个笑容是我将永远铭记的，在人群中太过耀眼，仅是在多年前的梦里见到过，并且在2017.2.13夜里我还记录了那个梦境中的人儿，现在的她就是真切的梦境的具象化存在，梦已不重要，因为梦走进了现实，连通着梦想。<br><br>傍晚的阳光金黄而辽远，四季交替却如此温情，你没有迟到，而我的等待也是刚刚好。</strong></p>          </div><blockquote class="blockquote-center"><p>这个世界上的任何人都有没见过的东西<br>它很温柔，非常甜美<br>大概，如果可以看见的话<br>谁都会想要的吧<br>正因为如此<br>世界才把它藏了起来<br>为了让人无法那么轻易地得到<br>但是总有一天会有人找到<br>应该得到的那个唯一的人，一定能把它找出来<br>就像这样，产生了羁绊。</p><p>世间的爱情故事，其结果无非是两种“在一起”与“不在一起”。</p><p>任何美好的情感或想法，在这片星空下都会黯然失色，在这片土地上都会被挤压，在这片时空中都会被撕裂，只因为现实的引力太大。</p><p>他们的故事已经结束了，而你的还在继续，只是你已不在乎结果，因为你已经见过那个“东西”了。</p></blockquote><h2 id="19-11-16"><a href="#19-11-16" class="headerlink" title="19.11.16"></a>19.11.16</h2><div class="note warning no-icon">            <p><strong>我也不知道发生了什么，她约我见面，我大概已经感觉到了。在操场走了很久，她怀疑对我的感觉到底是喜欢还是只是一时冲动，她觉得自己对我并没有足够的了解，自己不会处理男女之间的关系，谈恋爱后会暴露自己的很多缺点。她也许不想说的太直白，其实就是对我没有那种感觉。坐在地上，她聊到了自己的家世，一时伤心哭了出来，我抱着她，却也不知道怎么安慰。回去之前，她还是告诉我给她一段时间冷静一下，我说尊重她的选择。<br><br>我把很久以前写的文章给她看，其实那些想法早就模糊不清，自己也早已摆脱了那些情绪，只是想告诉她：「我也曾在某个深夜辗转反侧，顾影自怜，但如今我依然热爱生活。」想通过这种方式安慰她，她看完之后，也很有共鸣，很郑重地安慰我，我有些不好意思，本来是想让她不要难过，到头来却是她来安慰我，但我也不能多解释，她能倾述的多一点也是好事。我感觉到我好像正在失去她。</strong></p>          </div><h2 id="19-11-17"><a href="#19-11-17" class="headerlink" title="19.11.17"></a>19.11.17</h2><div class="note warning no-icon">            <p><strong>惴惴不安的一天。夜晚，她为失联道歉，我其实完全没在意。只是她好像觉得对我有所亏欠，我并不希望这样。她也强调我有话就要说出来，可是我也并没有隐瞒什么。</strong></p>          </div><h2 id="19-11-18"><a href="#19-11-18" class="headerlink" title="19.11.18"></a>19.11.18</h2><div class="note warning no-icon">            <p><strong>想送她点零食，最后变成了她送我，并且约我打羽毛球。只是我没想到这么快，打完球，她就说我们还是做朋友的更好，我一时间有些恍惚。<br><br>虽然她说，我们目前不适合做情侣，她还没做好谈恋爱的准备；虽然她说，我的性格是体贴，细心但是敏感，她喜欢大大咧咧的；虽然她说我们家庭环境的相似造就了我们可以互相理解，就像认识多年的朋友，不适合成为男女朋友；虽然她说自己很任性，我不一定会喜欢并接受，就像现在就跟我提出分开，有时候情绪低落也会一连失联好几天，有时候睡不着吃褪黑素甚至安眠药；虽然她说，我一定会找到更好的，她不适合我……<br><br>我知道此时的她应该是很理智的，清楚地知道对我没有感觉。所以她说可以做很好的朋友，我万分愿意。我一路没什么言语，只能淡然地送她回宿舍。<br><br>我说我们可以一如既往。我们可以时光倒流，回到我们刚认识的时候，愉快地自我介绍。<br><br>接下来反思自己的缺点，继续提升，做朋友也挺好的~</strong></p>          </div><h2 id="19-11-22"><a href="#19-11-22" class="headerlink" title="19.11.22"></a>19.11.22</h2><div class="note warning no-icon">            <p><strong>那一天没有看到音乐喷泉，也知道她今晚上课，今夜谎称偶然路过，想着满足她之前的小小心愿，但又一想只是又一次让她看了喷泉视频。。。。。。<br><br>然，夜色迷朦，水线苍劲又柔敛，霓颜扑面，虹色璨奇～<br><br>不过她晚上课上的也很惊心动魄<span class="github-emoji" style="display:inline;vertical-align:middle;color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8">😄</span></strong></p>          </div><h2 id="19-11-23"><a href="#19-11-23" class="headerlink" title="19.11.23"></a>19.11.23</h2><div class="note warning no-icon">            <p><strong>我又“偶然”路过了她之前提过的南门包子，告诉她我也吃了那里的包子，像她说的一样那么地美味。然后歌手大赛复赛开始，我边摄影边跟她聊目前谁在唱，然后互相听后的感觉，因为她的宿舍正好在旁边。然而就是那么一瞬间，我好像感受到她就在我的身边。</strong></p>          </div><h2 id="19-11-26"><a href="#19-11-26" class="headerlink" title="19.11.26"></a>19.11.26</h2><div class="note warning no-icon">            <p><strong>她找我了，虽然是找我帮忙解决问题，但还是很开心，多么希望那一句“爱死你了”是我想的那种意思。</strong></p>          </div><h2 id="19-11-27"><a href="#19-11-27" class="headerlink" title="19.11.27"></a>19.11.27</h2><div class="note warning no-icon">            <p><strong>又是组会的一天。跟大师兄说了声抱歉。老板请吃汉堡王，等啊等，饿到虚脱，还是拿大师兄的手机下的单。等了两个小时的外卖，虽是与之立下绝食契约的汉堡王，但此刻已经不容犹豫了，真香。跟她分享了组会的日常与汉堡王的真香。</strong></p>          </div><h2 id="19-11-28"><a href="#19-11-28" class="headerlink" title="19.11.28"></a>19.11.28</h2><div class="note warning no-icon">            <p><strong>连日来的阴雨连绵，今天终于放晴了。日推里很巧就有一首《太阳》，分享给她，她也分享了一首《老街》给我。</strong></p>          </div><h2 id="19-11-29"><a href="#19-11-29" class="headerlink" title="19.11.29"></a>19.11.29</h2><div class="note warning no-icon">            <p><strong>创了一个公众号，想了半天的名字最后决定用“可爱的柯摩”，她太爱夸我可爱了，简介用了藏头诗。</strong></p>          </div><h2 id="19-12-1"><a href="#19-12-1" class="headerlink" title="19.12.1"></a>19.12.1</h2><div class="note warning no-icon">            <p><strong>组合数学完课了，下午回家跟母亲聊了一会儿天，告诉我慢慢去感受人生吧。晚上偷偷帮她抢了研究生歌唱大赛的票，正好她没抢到，然后我假装我去不了，这样她就没有怕见到我的负担了。</strong></p>          </div><h2 id="19-12-3"><a href="#19-12-3" class="headerlink" title="19.12.3"></a>19.12.3</h2><div class="note warning no-icon">            <p><strong>南京江苏省人工智能大会两日游，五星级酒店体验卡，跟着老王一起兜风，带老王体验宾馆浴池。正跟老王吹牛皮，她正好发信息过来，老王握住Cadillac方向盘说不要慌，拍段视频说在南京街头瞎逛，她直接猜出我在哪里，在干嘛，，，说是我的视频里面大楼标志很明显。原来是问作业的问题，还是挺开心的。之后晚宴也玩得很快乐，虽然没跟大佬合影，但喝了志华大佬敬的酒。之后上台替领奖，南京南站的狂奔。花开两朵，全都不表。</strong></p>          </div><h2 id="19-12-4"><a href="#19-12-4" class="headerlink" title="19.12.4"></a>19.12.4</h2><div class="note warning no-icon">            <p><strong>始终放心不下她那个问题，问她要了程序，居然是秒回，看了一下午，还是感觉抓不住要害，或许当面交流更加清晰，不过今天应该是这么多天来聊得感觉最好的一天了。</strong></p>          </div><p>  <strong>也许已经结束了，也许还未开始。我只知道，曾经很幸运，很开心，就已足够。</strong></p><h2 id="19-12-6"><a href="#19-12-6" class="headerlink" title="19.12.6"></a>19.12.6</h2><div class="note warning no-icon">            <p><strong>晚上回去后，我知道她应该没睡，很晚了，补作业会无聊吧，我第一次深夜找她，想着白天拍了一些风景分享给她，可能她不知道该回什么吧，就发了一连串，说要继续写作业了，道了晚安。</strong></p>          </div><h2 id="19-12-11"><a href="#19-12-11" class="headerlink" title="19.12.11"></a>19.12.11</h2><div class="note warning no-icon">            <p><strong>看了好久寒山寺跨年的活动，盘算着也许可以尝试，想象着那个场景，不过也许她根本不会接受。她的歌单更新了《想你想你》，我就偷偷对她可见的分享在了pyq。</strong></p>          </div><h2 id="19-12-12"><a href="#19-12-12" class="headerlink" title="19.12.12"></a>19.12.12</h2><div class="note warning no-icon">            <p><strong>公众号发了之前做好的关于几个写作工具的分享，又是周四，照例去操场跑步，不知道是不是错觉，背后那个快步走出操场的背影就是她的。</strong></p>          </div><h2 id="19-12-13"><a href="#19-12-13" class="headerlink" title="19.12.13"></a>19.12.13</h2><div class="note warning no-icon">            <p><strong>研究了一天的算法，没什么收获。昨天发了那首歌，她居然点赞了，这是第三次分享。还有前天晚上的晚安微博，那个藏头昵称，她肯定看到了。虽然已经三天没有联系了，可是我一直在她周边留下影子。</strong></p>          </div><h2 id="19-12-14"><a href="#19-12-14" class="headerlink" title="19.12.14"></a>19.12.14</h2><div class="note warning no-icon">            <p><strong>四六级监考，世界真小，遇见了她。</strong></p>          </div><h2 id="19-12-15"><a href="#19-12-15" class="headerlink" title="19.12.15"></a>19.12.15</h2><div class="note warning no-icon">            <p><strong>分享了一首《To the moon》给她顺便跟她分享了背后的感人故事。</strong></p>          </div><h2 id="19-12-16"><a href="#19-12-16" class="headerlink" title="19.12.16"></a>19.12.16</h2><div class="note warning no-icon">            <p><strong>早上，手贱点开了那个文档云，看见了她的PPT，又看见了最后有两页广告，没忍住提醒了她，虽然已经暴露了自己，但也没办法了。虽然被人说有点变态的意思了。她倒是不是特别惊讶的感觉，但是表示没办法了，调侃的感觉，就只能那样了。</strong></p>          </div><h2 id="19-12-20"><a href="#19-12-20" class="headerlink" title="19.12.20"></a>19.12.20</h2><div class="note warning no-icon">            <p><strong>突然发现是今夜的冬至活动，跟着他们商量去不去，大腿一拍，走！冒着冷雨，我们叁就这么出发去了独墅湖，路上一直在疑问为什么要去，虽然是她的部门组织的活动，但是她大概率是不在的，就算她在我又该怎么跟她说话？但是我说你永远不知道下次出行将给你带来什么。事实证明，此行收获颇丰。雨夜，校区很冷清，出奇的活动人还不少，我们又是猜灯谜，又是印年画，又是挑对联，又是蹭合影，玩得不甚快哉！还是对联好玩，虽然在那里从开始站到结束，也没猜出来几个。</strong></p>          </div><h2 id="19-12-21"><a href="#19-12-21" class="headerlink" title="19.12.21"></a>19.12.21</h2><div class="note warning no-icon">            <p><strong>赶项目的一天，区块信息改造，广播之类。深夜给她发了句冬至快乐，第二天不到10点收到了回复。</strong></p>          </div><h2 id="19-12-22"><a href="#19-12-22" class="headerlink" title="19.12.22"></a>19.12.22</h2><div class="note warning no-icon">            <p><strong>总算把算法讲完了，没人听，内心也一团烦躁。回家跟爸妈过了趟冬至，热腾腾的火锅，三人围坐，母亲没有说的过多，只是叫我慢慢经历，慢慢感受，一杯，一杯冬酿酒下肚，不知是热气还是什么，眼前渐渐模糊。回到学校，一个人静下来脑子里她又来了，只能掺和到他们中间，抓娃娃也好，打游戏也好，做什么都好。在群里即使发照片，她和舍友也依然没有回复。</strong><br></br><br>回来，深夜，继续工作，等广播模块终于加载成功了，闭着眼开回去，吓得别人不敢跟我一辆车。</p>          </div><h2 id="19-12-23"><a href="#19-12-23" class="headerlink" title="19.12.23"></a>19.12.23</h2><div class="note warning no-icon">            <p><strong>雨还在下。上午参加区块链会议，秦发来R语言考试的问题，我也不是特别懂，有电脑在身旁还好一点。我在想也许她下午也会考这些吧，要不要告诉她呢，也许她也会来问我呢，最后，还是算了吧，那样会让她觉得可怕吧，生活像被窥视了般。</strong></p>          </div><h2 id="19-12-24"><a href="#19-12-24" class="headerlink" title="19.12.24"></a>19.12.24</h2><div class="note warning no-icon">            <p><strong>雨还在下。平安夜，嗯，怎么过的呢，没跟大家去看晚会也没去看电影吃火锅，当然也没收到苹果。她也告诉我她在复习，我也就结束了今天。</strong></p>          </div><h2 id="19-12-25"><a href="#19-12-25" class="headerlink" title="19.12.25"></a>19.12.25</h2><div class="note warning no-icon">            <p><strong>雨还在下。偷偷送完贺卡给他们假装不知道。将给她的贺卡放在操场只有我们知道的位置，晚上发pyq只对她可见告诉她位置，当然她没有去拿，那就等待着它某天会被人发现吧。晚上，一个女孩坐在雨中聆听我的琴声，直到我离开，我才明白那种感动的滋味。</strong></p>          </div><h2 id="19-12-26"><a href="#19-12-26" class="headerlink" title="19.12.26"></a>19.12.26</h2><div class="note primary no-icon">            <p><strong>终于放晴了。她也离开了这座城市，把雨一起带走了，追随她而去了，或许是我开始放下她了吧，虽然有很多种理由可以解释她没有接受贺卡，没看懂我的意思，下雨所以没去拿，不过确认贺卡还在时，我有种释然的感觉。</strong></br></br><br><strong>晚上，又从西门出去，沿着曲径幽巷走了一遭，在星巴克畅谈了很久，心渐渐放开了。</strong></p>          </div><h2 id="19-12-28-20-1-5"><a href="#19-12-28-20-1-5" class="headerlink" title="19.12.28~20.1.5"></a>19.12.28~20.1.5</h2><div class="note primary no-icon">            <p><strong>31号下午跟行健在一起很开心，体验了用4DX体验了一下叶师傅。在金鸡从裤衩走到李公堤再走回来，聊了很多，我也是第一次听到行健那段痛苦孤独的时光。晚上的时候跟姿颖和他一起到寒山听钟声，在人群中穿梭，感受着千年古刹的神秘与此时张灯结彩欢庆，心中各自怀揣着心事，与对未来的憧憬与希冀以及来年压力的压迫感，但也挤出了笑容，毕竟有她突然出现，大家要开心一点。融在人群中，她不时回头确认我没离开，最后终于挤到了绝佳的位置，停住的刹那，现场众人一片寂静，钟声随之响起，沉重悠扬，浸入心灵，与刚刚的人声鼎沸仿若两个世界。站在他们的背后，当最后一声敲响的瞬间，他们应该都各自许了愿吧，那回头的两声“新年快乐”，是今年开头听到的发自心底的最令我快乐的话语。在那一瞬间我也发出了我的祝贺，不知那回复是应福而回还是本已经准备好发。</strong></p>          </div><h2 id="20-1-17"><a href="#20-1-17" class="headerlink" title="20.1.17"></a>20.1.17</h2><div class="note primary no-icon">            <p><strong>家里的雪菜豆干饼(这么多年家里只叫“饼”，暂且叫这个名字吧~)依旧美味，真希望与她一起品尝。好久没联系了，想着关心她今晚都吃些什么，相信她也喜欢这饼的味道拒绝外卖，只是还是在抱怨工作的辛苦，真的很累吧。</strong></p>          </div><h2 id="20-1-24"><a href="#20-1-24" class="headerlink" title="20.1.24"></a>20.1.24</h2><div class="note primary no-icon">            <p><strong>过年，她主动的祝福，始料未及的席卷，漫长的假期。</strong></p>          </div><h2 id="20-3-14-15"><a href="#20-3-14-15" class="headerlink" title="20.3.14~15"></a>20.3.14~15</h2><div class="note primary no-icon">            <p><strong>昨天看了泛式的直播，一开始关注他只是因为他解说动漫的角度确实挺有趣，对于新番的介绍也很全面。后来发现偶尔也会炫富什么的，其实也只是真实分享自己的生活。直播说的几点，值得记录一下，虽然他不是一个做直播的人，也不是精心准备的话，也正因为如此，才会引起我的注意。其一，一个人如果不在乎别人的看法是绝对不会再网络上输出视频，文字亦或是音乐，分享的本质是希望得到认同，所以很多人为什么会因为99个人夸赞，1个人的侮辱，而对其恨之入骨，揪着这个人满大街甩，别人即使劝说「不要理会那‘个别人’的感受」也于事无补，因为人的社交思维无法承受这么大量的虚拟互动的点触，因为需要认同所以在意，确实是这样简单的道理。其二，关于怀旧的问题，同样我们都是怀旧的人，所以这点让我倍感亲切，因为身边会怀旧的人太少了：会时长点进QQ空间的相册一看就是半天，看每张照片的笑脸，回想当初拍这张照片的时候，是怎样一番景象(因为知道自己会怀旧，所以拍很多身边人的照片，会把这些毫无遗漏的放在QQ空间的相册里，也不在乎看的人是网友还是现实的朋友，所以有人会说我QQ空间没照片，这大概就是有这样的情况在里面吧，因为不会怀旧，所以没照片，很畅通)；也不会去记日记；也不会去记录身边那些最容易忽略的细节。可以与时代人物一起谈笑风生，也可以和市井小民聊鸡毛蒜皮，可以品味鲍鱼燕窝，也可以咽下粗茶淡饭，可以惊叹喜马拉雅山脉的雪被，也可以为身边的一花一草驻足赋诗。</strong></br></br><br><strong>好像渐渐偏离了主题，但是那些感受确实都很真实，也提到了身边的女性朋友都是属于会跟男生谈天说地，没有微尴的，没有传统意义上的女性朋友，其实也正常，因为她们中大部分人只会跟同性交流，所以他的感受其实是当代大部分男性的感受吧，毕竟无论男女我们的爱好都一样：异性。</strong></br></br><br><strong>当然还有一点，以前也会这样想，就是当你周围的人所追求的娱乐品味与你不在个层次的时候，就像你阅读着各个时代大师的杰作，脑海中交叠着各个时空的思想与精神时，耳边却听到室友的韩剧亦或是抖音声时，表面上什么也不会表露，内心却有一种隐隐的自豪与轻蔑。有一个回答是这样的，无论是什么样的获取，本质上都是消费的一环，没错，再怎么高雅与脱世，再怎么荡涤灵魂与精神，你并没有给这个世界生产什么高价值高营养的东西。所以这种感觉其实一文不值，只有将其体系化，逻辑化地，并稳定地输出他们，你所拥有的自豪与关怀才有意义。</strong></p>          </div><h2 id="20-3-16-18"><a href="#20-3-16-18" class="headerlink" title="20.3.16~18"></a>20.3.16~18</h2><div class="note primary no-icon">            <p><strong>日子过得匆匆，这几天思考渐渐怠慢，思想渐渐枯竭，思维渐渐崩塌。记得什么时候看到的句子吧，那是法国工业革命时，有人说的话：“人们开始不再熟悉自己的工作以及日常，纯粹的简单变得奢侈，因为事物发展的过快；年轻人被时代所裹挟，过早地参与到社会进程中，从而被逐渐抛弃；人们强烈地追逐各种轮船，邮递等快捷的信息通讯工具，因为信息过载，平庸文化变得普遍化合理化”。记忆模糊不清，这不是原句，但大概能传达我此时的焦虑与自责。200年前的人所描述当时的状态其实与今天这个时代相差无几，甚至可以说是一模一样。今日的世界何尝不是如此呢，我们已经快得停不下来仔细思索了。在面对热闹与喧嚣时，我们已经做不到波澜不惊了；在面对网络谣言与非议时，我们已经做不到独立思考与判断了；在面对艰难的处境时，我们已经无法做到理智地决策与思考了。</strong></p>          </div><h2 id="20-5-1-12"><a href="#20-5-1-12" class="headerlink" title="20.5.1~12"></a>20.5.1~12</h2><div class="note primary no-icon">            <p><strong>少年不识愁滋味，爱上层楼。爱上层楼。为赋新词强说愁。</strong><br><strong>而今识尽愁滋味，欲说还休。欲说还休。却道天凉好个秋。</strong></br></br><br><strong>这半个月过的是真的辛酸，一忽疹疾缠身，一忽又骑车飞摔，蹭的皮开肉绽。身体动弹不得，疹疾又致全身不得按宁。着实不知如何是好，现如今母上也奔赴都市生活，不知不觉，这段儿时至现在都未曾体验过的与母上一起生活这么久的时光已然结束了。激动的三月，慵懒的四月，以前未曾想到会有这样的一段怀念终身的生活，原以为这样的生活只有很多年后的年老之时才可体验。如今只因其过于美好，但终究是要结束的，即使我迷恋这样的生活，但内心的忧虑却也不断地在增加，再美好的时光，但总也要面对现实的压迫的。它的日复一日，每天的日常又是如此的重复，母亲终日看着小说，而我终日地在楼上看着电脑，虽然不舍，但这样的生活终究是不平衡的，我们都不应该被束缚在这里，虽然我们幸福地平平淡淡地陪伴在彼此左右，但此时的它应该是短暂的，我们彼此都有应该去做的事情，于当前，它只是看上去那么平静罢了，可我们还未实现的东西太多了，这样的生活提前来到了，幸福了但也徒增了很多不安。</strong></p>          </div><h2 id="20-6-16-6-18"><a href="#20-6-16-6-18" class="headerlink" title="20.6.16~6.18"></a>20.6.16~6.18</h2><blockquote><p>就是今天了，不知道会发生什么。还有几小时就出发了，该怎么办。</br></br></p></blockquote><h2 id="20-6-19-6-20"><a href="#20-6-19-6-20" class="headerlink" title="20.6.19~6.20"></a>20.6.19~6.20</h2><blockquote><p><strong>就这么结束了吗？无论那时的我怎么预测，也无法想到事情发展的结果会是这样。即使是现在我依然心很乱。我以为我已经放下了，可是一见到她，当初那些种种心情又会涌上心头，只是与之前不同的是，我已经不敢再踏出那一步了。</br></br>现在的我只是想完整地记录下，过去的48小时所发生的故事。</br></br>高铁上，我画下之前我告诉她想准备的晴天娃娃，因为找不到制作材料，我只能将它画下来了，我用浮夸的画技画了很多，也暗暗地在其中抽象地画了那晚牵手的一瞬间。老天很给面子，那之后没过多久就晴天了。</br></br>时隔7个多月，我们再见于南京南下的地铁站，她穿着黑色的短袖礼装，天蓝色的休闲牛仔以及平底鞋，隔着口罩我也能想象到她向我打招呼时笑容的模样，那是我见过一次就永远无法忘记的感觉。</br></br>走上地铁，我们走到车门边，我搭在扶手上，她靠在扶手上，几乎同时靠在了我的臂弯上。她始终不抓着任何栏杆，以后的几次坐车也是，我每次会在她重心不稳时，用臂膀轻轻地挽住她。我们聊到学校，聊到学习，聊到制造学术垃圾，聊到毕业答辩，聊到我们。她终于注意到我的发型是不是变了，我说懒得剪了，是不是很难看，她说，没有啊，很好看，我说，我还以为你会说很难看呐，哈哈，我知道虽然她可能只是想夸赞我而已。我们会因为地铁吵，听不见对方说话，而互相贴的很近地在耳旁说话。</br></br>下了车，来到之前说好的，集市，跟想象中差距甚远，我们边走边聊。聊天天气时，她说曾经有天早晨也是很闷热的天气，自己一起床就什么也不想干，谁跟她说话她就要骂谁，很愤怒的那种。看到路边有人卖宠物时，我问你家养宠物嘛？她说，我妈说养你个小祖宗我已经够累啦！哈哈。。</br></br>我提到了我的qq名的话题，想让她猜出来她是哪两个人物组合词，她果然猜出来了，我一个劲地夸她。我们很默契地随便走了一圈就离开了那个地方，在那一瞬，我好像懂了她应该知道：我并不是为了来这个集市吃东西，而只是用这个当借口为了见她。</br></br>我们回到地铁上，我们头贴着头，在她的大众上寻找附近有什么好吃的，这真是个难题啊，她真的南京苏州什么小吃都知道。</br></br>我们一出地铁就看到那个小象的雕塑，我们走过德基，走过那些奢侈品，听到了路很远的地方有着很大很持久的笑声时，我说，什么事情那么开心，她笑道我跟闺蜜们在一起时，就是这样笑的，我说，哈哈，人生就是要随性！</br></br>走进了太二，她没给我点餐的机会，我们面对而坐，她明明可以把手机递给我来点想吃的菜，却让我坐过去，一起凑得很近地去点餐，我只觉心跳加速，发香夹杂着香水，我一时不知道我该干嘛。画面上有金针菇，我说点个明天见，她说啥是明天见，我指给她看，她说，呀怎么是这个啊，为什么叫明天见呢，我（汗），不解释了，回头慢慢意会，她说，好，今晚回去意会。席间，她又点了奶茶，我说这不行啊，都是你请客，她说没事，明天你来就好啦~我们从QQ的衰败聊到微信的崛起，从三体聊到文学，连我的研究方向她都愿意听（我居然把机器学习，分布式存储讲了一遍，并且黑了一波现在ai的现状就是宣传与在线教育，一般套路就是去大厂背书，然后开始搞培训捞钱），还有娱乐热点，肖战的惨痛教训，兴风作浪的姑奶奶，青你（她只看过开头结尾，我有点小惊讶），B站的后浪（连母上大人都知道了，很好玩地问她：B站是个啥，怎么起这么奇怪的名字，好好玩。。），聊到了28岁退休的字节跳动员工，然后她说她以后可能要失业，我结结巴巴地说了句很有问题的话（好后悔）：有些事注定做不成，只是以前你没发现，现在发现了痛苦罢了。。。我到底在说什么啊！！！有好几次没啥话题了，她拼命找了好多话题。</br></br>我们出来，我想实在不行，想想最近发生了什么事情，把之前大黄失忆的事情说了，他回去想要复合，她说，一般人肯定不信，这种分手理由太扯了，我要是她女友肯定要揍她（哈哈，喜欢她的性格！）。我把口罩落在了太二，她跟我一起去寻找药店买口罩，逛了屈臣氏没有一次性的，又去了其他地方，我去上洗手间，她自己一个人找到了，然后掏钱帮我买了一袋口罩，我来的时候她正好付完钱，一转身一脸兴奋地告诉我，“这里有啊，我买到啦！”我既开心又感动也痛苦，她这么关心我，掏自己的钱，我说不行，不能这样，她说没事，这没关系啦~可是这怎么可能没关系呢。</br></br>我们走到新街口的大转盘，她说这里是南京美女最多的地方，每过5秒，你就能看到一个美女，我转过头去，不敢看着她说：“是嘛？可是我环顾四周，只看了你啊！”，她笑道，你好会啊。……</br></br>我们游移于各种品牌之间，我读一个名字，她就会解释一番这家店的特点或者名字或者产品，我记得origin，和她的蓝铃花以及大吉岭茶。我们站在一家店前，一个一个闻着那些香水小样儿，我们分开闻着两边，她转头看着我正在一起闻，莞尔一笑，笑道走吧。我告诉她，很喜欢那个小豆蔻的味道。</br></br>我突然兴起想去她以前的家，老门东附近逛逛，我们走了没多久，我看她老捂着肚子，我就开始有点担心了，然后她就说肚子很痛，我很担心但不知道该怎么办，就说我们回去吧，她说想找了个地方坐下来休息一下，坐下来后，我想说帮她找杯开水，但一想开水是个禁忌词语，所以想问她要不要拍一下背缓解一下，这也是我仅能做的了。她查了一会儿地图，我们定下了明天逛博物院的时间，她说稍微好一点了，我也不置可否，不知道她是不是为了让我减轻担心这样说的。但还是先回家吧，毕竟这样也不能再去其他地方了。到地铁时，我问还是担心，问了下，是不是以前也会这样，吃了热的然后喝冷奶茶会肚子疼，她说很少会这样，我就有点自责，怪我没有考虑到这些、、她老是说要送我，我说不用，我知道怎么坐车，然后她的那个方向的列车先到了，她就上车了，走的时候她回了两次头，跟我道别，带着笑意也带着歉意。我在想为什么我不主动一点送她回家呢，明明我应该这样做的，我那一瞬间想的是，她应该是不愿意的吧，也许不愿意我知道她家在哪，可我那时连问的勇气都没有，就这样让她走了。她上车之后，还发信息跟我说“抱歉”，我实在不知道怎么表达自己的歉意，她太好了。总之今天就这样结束了。</br></br>第二天。</br></br>改了一晚上简历，忠太把我带到上班的地方，正巧她坐地铁去博物院会经过我们附近的站台，我就让她在那个站等我，我到的时候，我没想到，她已经下了地铁，走上楼梯，在检票口的地方等我，我受宠若惊。</br></br>简短地聊了他的事情后，我们一起上着她的网课，我们一起靠在地铁的扶手上，她把一边耳机给了我，我们一人一个耳机，我端着手机，看着腾讯会议的画面，她听着课，看着窗外。我偶尔会说听课的感想，她会赶快偏过头来听我说，然后给我回应。</br></br>到了博物院后，她自嘲自己太笨了，居然还要我带路去。她预约时，问我要了身份证号，听我报完之后，她沉默了很久，我不知道她在知道我是94年的后，心里面做过什么思考，我真的很想知道。还有一点，她还是跟以前一样，打错了我的名字，她也跟以前一样，超级自责，反复跟我说对不起。</br></br>进了博物院感觉时间过的飞快，我们逛了几乎所有的馆，我们头贴着头，一起讨论错金是什么，我们一起盯着战国到秦时我国版图的变化，我们惊叹那些兵马俑的形态各异与精雕细节，我们一起欣赏古代的书卷经典，徜徉于玛瑙与璞玉之间，她说叔叔曾说过，那些现在玛瑙的形成是人工营造的那些自然环境，期间她还要兼顾课程与父母的聊天。我们一起走进镇馆之宝，驻足了很久，我记得，汉武釉里红岁寒三友梅纹瓶。走过书画馆时，我惊叹与那幅龙吸水，她也注意到了我的眼神，说快进去看看，美妙，只有我们二人漫步于整个大书画馆。</br></br>进入民国馆，我们研究了为行动不便的人提供的楼梯轨道（我当时说了残疾人，唉）。我们一起走进小巷，一起路过邮局，一起看着大戏院的海报，路过火车站，走进南京历史馆。很多人在那里拍照，她却从来没有拍过一张，我问，你好像并不是喜欢拍照，她说，确实，我很多时候不想拍照，因为感觉很傻，发pyq之前会想很多事情，想着想着就不想发了，我说，所以90后正在慢慢地从pyq消失。</br></br>即将离开时，我还是忍不住，提出我们一起在院前合个影吧，她同意了，但是我又不好意思说能不能一起正脸合个影，所以她就带着口罩拍了。</br></br>一开始我们想去KFC吃中饭，跟着导航一路上了城墙，我知道她很累，穿着高跟鞋，说她是这么多年第一次在南京爬上城墙，我有点小激动，我们一起又爬下城墙，放弃了吃KFC的念头，顺便把高德骂了一顿，最后她说要不吃小马牛肉面，我没意见，但是我觉得不对等，这太便宜了。席间，我提出了这个想法，她说没关系，来日方长，我说，对，来日方长。</br></br>她又很好奇导师和师母，我说老板是通过舞会认识的妻子，然后很诧异我们现在没有舞会是怎么社交的，她说对啊，但我们现在有KTV什么的呢，我说师母很凶的什么的，老板从来都是依着她，性格很软，有点像我。我想说陪她一起去面试，她说不用了，我去她更紧张。</br></br>我们一起上了地铁，已经没什么话题了，她一直在跟叔叔阿姨聊天，可能是觉得我们这样太尴尬了，她说了她闺蜜的事情，我也懂，就跟着聊，但我觉得自己很差劲，找不到话题。之后她一直跟叔叔阿姨聊着天，我也很快到站，我准备离去，她打着那种抓猫的手势跟我说再见，我迅速下车，但魂也丢了。</br></br>过了几个小时，她把合影发给我。便跟以往一样不再跟我聊天了，可我却再也放不下，我不知道我是不是丢了什么机会，还是本来就没什么机会，如果我跟以前一样，再勇敢一点会不会有什么发展呢，是关系更僵，从此再无交集，还是我们的关系会升华呢？我知道我表现得很差劲，即使她曾经对我有好感，现在也没好感了吧。而且我总是觉得她只是把我当兄弟愿意跟我出来一起玩，但真的是这样吗？可是她不愿意让我帮她拎包，当然我也知道她的包应该很贵重。可她微信上也不主动找我聊天，所以我们也许真的不能前进了吧，我真的不知道该怎么办……一切都源于我的懦弱，扭捏，想挑明却又怕失去，因为我没有把握，可正是因为我这样的性格，她才对我有些好感？</strong></p></blockquote><h2 id="20-6-21-6-22"><a href="#20-6-21-6-22" class="headerlink" title="20.6.21~6.22"></a>20.6.21~6.22</h2><blockquote><p><strong>21号开了组会，晚上正好聚齐，又跟老板后面蹭饭，酒有点多，没忍住给她发完两字，还是怂了，秒撤回，我不知道她的“你成功引起我的注意”代表着什么。</strong></br></br></p></blockquote><p>我的四周一片漆黑<br>置身于孤船之上<br>头顶是一片漆黑无星的夜空<br>浪波从四处拍来<br>我勉强保持着平稳<br>却力不从心<br>周遭除了水声之外<br>还有着窸窸窣窣的私语声<br>我感到无边的恐惧——<br>它们会来攻击我</br></br></p><p>也许她会来到我身边<br>也许她会为我照亮四周<br>也许她会带我驶出黑暗<br>也许她会为我点亮繁星<br>也许她会为我停留于此</br></br></p><p>也许她只是静静地看着我<br>黑暗便只是梦乡<br>孤船便只是摇篮<br>浪波便只是微风<br>私语便只是歌声</br></br></p><p>可是<br>她看不见我</p><h2 id="20-6-23-6-25"><a href="#20-6-23-6-25" class="headerlink" title="20.6.23~6.25"></a>20.6.23~6.25</h2><blockquote><p><strong>她好似太聪明，一下却能看穿我所有的想法，却还在配合我演出？还是她只是不知道我的心思，一直在等待我的行动？抑或是完全不在意我做什么，随便我做什么事情，只是保持的最基础的礼貌？但有一点可以肯定、</strong></p></blockquote><p>我从去年开始做梦，后来梦醒了<br>即使梦醒了，但我依然怀念那个梦<br>我不知道怎样解脱自己<br>你也许会说，既然是梦，那终究会有醒的一天</br></br></p><p>但事实是，这个世界的成功者<br>往往是，那些会做梦的人<br>他们在自己的梦中，用超乎常人的梦想力，做出了梦幻般的举世卓绝成就</br></br></p><p>我醒来，是因为它太痛苦了<br>两个人都在梦中，只是你醒了<br>没有你的梦中世界，是虚无的<br>于是，我也醒了</br></br></p><p>我原本以为，不再进入梦中<br>我的苦闷就会消失<br>但，病情时常反复</br></br></p><p>可我依然怀念那个梦<br>时隔多日的再一次相见<br>忐忑，彷徨<br>可是，原来，我又坠入了梦中<br>当预示着离去的那辆地铁即将到来时<br>我多么希望，它永远不会来<br>我说：它怎么来的这么快<br>你说：是啊，我也觉得<br>也许，你以为我说的是他来的太慢了吧<br>毕竟，谁会怪车来的太快呢</br></br></p><p>现在，我已经不想再回来梦中<br>梦是什么<br>梦即现实<br>现实是什么<br>现实连接着遥远的未来</br></p><h2 id="20-6-26-6-29"><a href="#20-6-26-6-29" class="headerlink" title="20.6.26~6.29"></a>20.6.26~6.29</h2><div class="note primary no-icon">            <p><strong>今天晚上的月亮好美，想要跟你分享，但一想我们好久没聊天了，想到这，突然觉得月亮也不漂亮了。</strong></br><br><strong>你的目光总是看着我看不见的远方，看着窗外，看着天空，我总想赶上，却总也追不上。</strong></br><br><strong>目光交汇时，你的眼神满含惆怅，却故作轻松，我看得清，却又仿佛看不清。</strong></br><br><strong>你应该有很多话要告诉我，却好像什么也没说，我只是静静倾听，别无他求。</strong></p>          </div><h2 id="20-6-30"><a href="#20-6-30" class="headerlink" title="20.6.30"></a><font face="Times New Roman">20.6.30</font></h2><div class="note primary no-icon">            <p>今日真的难得的晴天，弄了一天的各种markdown以及overleaf的写作模板，大概算是一劳永逸吧。晚上大家一起厨房炒粉，圆桌谈，亭台聊人生，三国无限杀，乐趣实在无穷。不禁怀疑，这生活是不是太美滋滋了、</p>          </div><ul><li><p><strong>一些句子</strong></p><ul><li>是“Wow”!</br>霍金对这个世界发出的词，是惊叹。即使他一生受尽病痛折磨，全身失去控制能力，他对于这个世界，依然像一个孩童般热爱。</br>言犹在耳，霍金却已离我们而去。在迈克尔·怀特与约翰·葛瑞本所著的《霍金传》中，霍金首先是一个天赋异禀、敢于直言、敢于想象的科学家，其次才是一个身残志坚，可敬的人。</br>这位从年轻时起就坐在轮椅上的科学家，从没放弃对宇宙的探索，也从未丢失对生活的信心。正如霍金自己说过：“如果生活没有了乐趣，那将是一场悲剧。”</br>3月14日是爱因斯坦的生日，霍金于同一天去世，有人说，他大概是去给爱因斯坦过生日了。那么，祝福两位伟人在某个星球安好</li><li>老一辈人，先苦后甜，我们这一代，先甜后苦。先苦后甜易，先甜后苦难。</br>正如钱钟书的《围城》里写道：天下只有两种人。譬如一串葡萄到手，一种人挑最好的先吃，另一种人把最好的留在最后吃。照例第一种人应该乐观，因为他每吃一颗都是吃剩的葡萄里最好的；第二种人应该悲观，因为他每吃一颗都是吃剩的葡萄里最坏的。</br>不过事实上适得其反，缘故是第二种人还有希望，第一种人只有回忆。</li><li>最难熬的状态就是，眼里操心着不再年轻的父母，脑子里想着乱七八糟的事业，心里还藏着一个不可能的姑娘，胸膛里还撑起着一个遥远的远方！</li><li>有一个夜晚我烧毁了所有的记忆，从此我的梦就透明了。有一个早晨我扔掉了所有的昨天，从此我的脚步就轻盈了。</li><li>每个人都会有缺陷，就像被上帝咬过的苹果，有的人缺陷比较大，正是因为上帝特别喜欢他的芬芳。</li><li>语言和文字真的是不可执取的东西，当一句话说出来或者写下来，它就不是你的了，你必须允许别人任意解读，甚至误读。所以我最想说的话，其实在我开口的一刹那就已经说完。</li></ul></li><li><p>昨夜的月亮</p></li></ul><p><img src="https://photos-1259799643.cos.ap-shanghai.myqcloud.com/%E5%B2%81%E6%9C%88%E5%A6%82%E6%AD%8C/6.29%E7%9A%84%E6%9C%88%E5%85%89.jpg" alt="6.29的月亮"></p><h2 id="20-7-1-7-3"><a href="#20-7-1-7-3" class="headerlink" title="20.7.1~7.3"></a><font face="Times New Roman">20.7.1~7.3</font></h2><div class="note primary no-icon">            <p>  近来时晴时雨，一号的晴天朗日，傍晚出门取外卖的温晴草香，令人陶醉。二号的又诉诸了衷肠，可是又如何，不过是徒增烦恼，我的内心早就知道那些现实的原因，可是我又能怎样呢，也没什么遗憾的。做不出来的事情，说出来也没有任何意义，我不会对她太过于直白，我也不会就此放弃，我恐怕永远也不敢说出我的心意，就算我向她展现了某些代表价值的东西，那又如何，又能表达什么呢，这样是告诉她我很有钱还是在乞求她的认可还是怜悯？</br></br>除了把实验室的Latex模板弄出来，记得1号弄了一天简历的模板，然后用了一份跟白天弄的没关做的自己的简历，最后苏州微软没有任何回信。</br></br>当然那个下午还是充实又开心的一段时光，一起创造新的具有纪念意义的事物，共同创造的乐趣，这恐怕就是古往今来人人乐于称道的事情吧。今天计划了7号的之后的事情，希望能实施顺利吧。</p>          </div><h2 id="20-7-4-7-5"><a href="#20-7-4-7-5" class="headerlink" title="20.7.4~7.5"></a><font face="Times New Roman">20.7.4~7.5</font></h2><div class="note primary no-icon">            <p>  半年了，久违地回了一趟学校。那条林荫大道，此次此刻走起来，却有一种以往从未感受过的轻松感。推着车，从本部到东区，身体快要失去知觉。翻墙出去，烧烤很好吃，主要是我烧的，嗯。歌唱到声嘶力竭，回来墙翻得也是刺激，往来的人群，无不驻足观看我们四人的精彩树林翻墙秀。</br></br>今天终于实施了计划，几个小时之前，成功了计划的第一步，彼时的我还是很开心的，但此时此刻，敲下这些文字的时的我，却被无边的绝望包围。我们很成功地合作完成了这次华丽的“壮举”，在我看来一切都很完美。可是，所有人都抓着那个“朋友”的字眼不放，我们坐下来，一直聊到深夜，我淡淡地描绘那个计划，我不知道结果，我知道我只是该这么做，也许结果终将令我失去自我。我只想说友人之后，还能更进一步嘛？我不会耍脾气，更无法完全忘记她，更做不到让她关注我，与我分享，更别提让她对我产生嫉妒，亦或使计让她认为我在拒绝谁。可是一切会怎么发展，我不敢想象……</p>          </div><h2 id="20-7-6"><a href="#20-7-6" class="headerlink" title="20.7.6"></a><font face="Times New Roman">20.7.6</font></h2><div class="note primary no-icon">            <p>  你要问我为什么总喜欢感动自我，或许是吧，但歌曲，文章如果连自己都感动不了，如何深入他人的心灵呢？与人交流，与世界对话，与灵魂私语，不常怀感动之心又何以与自己达成和解呢。有的时候，我无法想象富有的，掌权的，成功的我是什么样子，有时候我又觉得那样有时挺悲哀的，那时的我应该再也回不到现在这种总是会有一些思路在脑海中打转的状态了吧，那样的我不再是我，也挺令我厌恶的。我从来都是做最真诚的我，所以我也经常受伤害，这些伤害最多地来自于我自身的敏感体质。“真实自有万钧之力”，我知道有时你就算把所有的你自己掏出来给人看，也会被完全遗弃在一旁，所以你更多需要做的是找到那个想倾听你所有事情的人，在她面前你所有的内心都可以奔涌而出，而不用担心，这股洪流会将她带到永远看不见的远方。</br></br>说到这，我知道，我们也许已经不可能了，我有预感，她永远愿意做我的倾听者，只是她一如既往地履行诺言与对我的愧疚。我的心不算平静，却也不失波澜的撞击。</p>          </div><h2 id="20-7-7"><a href="#20-7-7" class="headerlink" title="20.7.7"></a><font face="Times New Roman">20.7.7</font></h2><div class="note primary no-icon">            <p>  又到了这一熟悉的一刻，又是这番场景。接下来几个小时会发生什么呢，是什么都不会发生，还是以后她不再敢见我，还是会向我预料的方向发展呢。我不敢想象，无论是哪一种结果我都不敢想象。可时光毕竟是走到了现在，我们已经不算是陌生人了，却总还是原地打转，我只能去打破这层阻隔，至于结果如何，已经不是我能奢望得了的了。</br></br>计划好的流程，准备好要说的话，我知道我就算排练一万遍，也还是会出错，无法改变，因为我恐惧的是因为某一个举措或者某一句话让她离我远去。我该不该说出那些准备好的话，还是只是顺其自然，到头来与上次一样，简单的一次相见。她是在等待我，还是完全不在意我做什么……接下来会发生什么呢。</p>          </div><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;相识，只是有缘，仅此而已。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Thinking" scheme="https://kemo.xyz/categories/Thinking/"/>
    
    
      <category term="Editor" scheme="https://kemo.xyz/tags/Editor/"/>
    
      <category term="Diary" scheme="https://kemo.xyz/tags/Diary/"/>
    
      <category term="感情" scheme="https://kemo.xyz/tags/%E6%84%9F%E6%83%85/"/>
    
      <category term="温馨" scheme="https://kemo.xyz/tags/%E6%B8%A9%E9%A6%A8/"/>
    
      <category term="回忆" scheme="https://kemo.xyz/tags/%E5%9B%9E%E5%BF%86/"/>
    
      <category term="真挚" scheme="https://kemo.xyz/tags/%E7%9C%9F%E6%8C%9A/"/>
    
  </entry>
  
  <entry>
    <title> [LeetCode] 1.Two Sum</title>
    <link href="https://kemo.xyz/LeetCode-1-Two-Sum.html"/>
    <id>https://kemo.xyz/LeetCode-1-Two-Sum.html</id>
    <published>2019-09-26T12:43:14.000Z</published>
    <updated>2020-03-25T06:16:32.581Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>第一次写，不是很懂。<br><a id="more"></a></p><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>给定一个整数数组 <code>nums</code> 和一个目标值 <code>target</code>，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。</p><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><blockquote><p>给定 nums = [2, 7, 11, 15], target = 9<br>因为 nums[0] + nums[1] = 2 + 7 = 9<br>所以返回 [0, 1]</p></blockquote><h1 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h1><p>一次循环，先将目标值减去第一个数，然后将这个数加入到字典中，如果字典中能找到另外一个数与当前的数加和满足目标，就输出。<br></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">twoSum</span><span class="params">(self, nums: List[int], target: int)</span> -> List[int]:</span></span><br><span class="line">        dic = {}</span><br><span class="line">        <span class="keyword">for</span> index, num <span class="keyword">in</span> enumerate(nums):</span><br><span class="line">            another_num = target - num</span><br><span class="line">            <span class="keyword">if</span> another_num <span class="keyword">in</span> dic:</span><br><span class="line">                <span class="keyword">return</span> [dic[another_num], index]</span><br><span class="line">            dic[num] = index</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></tbody></table></figure><p></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第一次写，不是很懂。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="https://kemo.xyz/categories/Algorithm/"/>
    
    
      <category term="python" scheme="https://kemo.xyz/tags/python/"/>
    
      <category term="OJ" scheme="https://kemo.xyz/tags/OJ/"/>
    
      <category term="Algorithm" scheme="https://kemo.xyz/tags/Algorithm/"/>
    
      <category term="Job" scheme="https://kemo.xyz/tags/Job/"/>
    
  </entry>
  
  <entry>
    <title>无声低语</title>
    <link href="https://kemo.xyz/%E6%97%A0%E5%A3%B0%E4%BD%8E%E8%AF%AD.html"/>
    <id>https://kemo.xyz/无声低语.html</id>
    <published>2018-04-02T13:21:09.000Z</published>
    <updated>2019-10-03T16:49:53.470Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p>本文写于2018年4月2日，雨转晴，23℃。<br><a id="more"></a><br>　　实在没时间去看闲书了，真是一天比一天觉得自己“面目可憎”，没有时间去顾暇自己内心在日益复杂的心理疾病。没有办法治疗自己，还要在看到某些人某些行为就厌烦的状态，总是在因为别人的碌碌无为，浑浑噩噩惩罚自己，因为没有可以掏心的女性知己而终日抑郁。永远也无法原谅自己，<strong>“一切都始于那年夏天”</strong>，这一直是我认为的心中的痛的根源，但也许真正的根源来自很遥远的过去，无限地放逐自我，不得不说与那帮人脱不了干系。<br><br>　　不过我这个人失败是事实，连自己的表妹对自己都从来都没有过好眼色，关系不仅不亲密，一年又一年越形同陌路。<strong>追本溯源，我痛苦不是某一个巨大压力，而是这些的过往滴滴点点。</strong>可是悲哀的是，即使彼时我再怎么成功，内心再怎么丰富，我都想象不出，我已然摆脱这些痛苦的状态。<font color="#B22222"><strong>每当深夜降临，我总会想起那些久久无法平息之事。</strong></font>我恐怕永远是那个走不出自我的<em>真嗣</em>。<br><br>　　永远幻想会有谁来帮助自己，<em>渴望美里，渴望丽，渴望明日香，</em>享受这种暧昧的感觉却又深深厌恶这种被人戏弄的感觉。丽或许是他内心最潜在的希望，可我不知道这种希望对我而言意味着设么？我永远害怕被人嘲笑、拒绝我献出的真心，是啊，<font color="red"><strong>这个世界不就是谁主动谁就输的可笑游戏吗？不是总在我付出真心的时候背叛我吗？不是总是我每次眼神交汇时就会收到最冷漠的回应吗？</strong></font>(虽然我知道大嘴的想法是错误的，可那仅仅是错误，其他与现实完全吻合，这种错误又有什么意义。)<br><br>　　是我封闭了自己的内心吗？不是吧？如果所有人都拒绝你，你去向谁敞开？为什么它们活得那么快活？那么无忧无虑，那么闲然自适？那么碌碌无为？那么终日无所事事？我却总是忧心忡忡，痛苦不堪，我跟谁都比不上。<strong>我————比不了任何人。</strong>我恐怕是最失败的那个人，<em>没有能力，没有才华，没有外表，</em>已经到了如今，何时才能让母亲······受苦了一辈子的母亲真正享受一次家子带给她的幸福，让她觉得在人生最困难的时刻毅然决然地只身一人带着尚在襁褓中的我四处求人，拼命生存，所有这一切努力不是白费的。<strong>母亲没有活的非常失败，她培养出了我。</strong>即使我的人生是失败的，内心是残缺的。可是，我无论如何也要证明，不，我终将证明母亲做出了这世上最伟大的壮举。母亲还在一个人坚强地与这世界做抗争，一个人孤单地生活着，受苦了一辈子也没有享受过物质生活，更没有精神生活，可是她那么地相信我，那么低积极向上，我没有资格总是放弃自己。至少，在今后不久远的日子直到世界终结，要让母亲，父亲真正地脱离期盼，真正地体会到这世界每个人都应该享有的幸福。</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文写于2018年4月2日，雨转晴，23℃。&lt;br&gt;&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Life" scheme="https://kemo.xyz/categories/Life/"/>
    
    
      <category term="Diary" scheme="https://kemo.xyz/tags/Diary/"/>
    
      <category term="Thinking" scheme="https://kemo.xyz/tags/Thinking/"/>
    
      <category term="随笔" scheme="https://kemo.xyz/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>我于你，止于唇齿，掩于岁月</title>
    <link href="https://kemo.xyz/%E6%88%91%E4%BA%8E%E4%BD%A0%EF%BC%8C%E6%AD%A2%E4%BA%8E%E5%94%87%E9%BD%BF%EF%BC%8C%E6%8E%A9%E4%BA%8E%E5%B2%81%E6%9C%88.html"/>
    <id>https://kemo.xyz/我于你，止于唇齿，掩于岁月.html</id>
    <published>2017-12-10T05:21:09.000Z</published>
    <updated>2019-10-04T16:13:58.375Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>痛苦的根源，无能的愤怒。</p><a id="more"></a>    <div id="aplayer-FiaHHlvY" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="74041197" data-server="netease" data-type="playlist" data-mode="circulation" data-autoplay="true" data-mutex="true" data-listmaxheight="250px" data-preload="auto" data-theme="#ad887a" data-loop="all" data-order="list"></div><p><a href="https://github.com/ExcaliburEX/excaliburex.github.com" class="LinkCard" target="_blank" rel="noopener">ExcaliburEX博客</a></p><ul><li>2017.12.5 晴天</li></ul><p>  近来真的是很忙，心里想的事情太多了，不写出来真的会越来越郁闷，终于得个空好好静下心来写点东西。</p><p>  思来想去，从哪里开始写是个问题。总结起来也就是感情与学习的事情，引申一下恐怕就是决定我人生走向的问题。</p><p>  那就从感情开始说起吧。我从一开学便想快点遇见另一半，或许由于我的这种动机吧，我从一开始这种动机就是错误的，为了找到她而去找她，却没有想感情对于现在的我来说到底意味着什么。不过也没有什么契机去寻找，我唯一的目标也就是等着社团招新这个时刻的到来，如果运气好我会在当天就会遇到我心仪的对象，抑或是我将在社团长此以往的交流中找到她。就在那一天，我来来回回在各个社团铺子前搜寻，也许是冥冥之中自有定数（我承认这种表述非常地土，但用来形容我当时的心情完全不为过）我在动漫社遇见了她，我的眼神从几个Coser中准确定位到了她，我不知道她Cos的是什么人物（当然我后来问她是什么，她很狐疑地告诉我就是普通的JK），但是那样的装扮确实是我喜欢的类型，但是重点恐怕不在于这里，我在她那里重新寻找到了八年前第一次遇见“她”的感觉，那是很遥远并且我以为可能永远也体会不到的感觉。我在人群中壮着胆走上前去，毕竟虽然她们是为动漫社做宣传，但是并没有男生跟她们聊天。她背对着我，我小心翼翼地点了点她，她很惊讶地转过头来看着我，在人群的喧闹中，这样近距离地面对面，仿佛这一刻一切都静止了，或许这种场面都是影视剧里的东西，<u>但是人生体验真的到了一种情境下这种感觉其实是非常自然并且你无法避免的，虽然很短暂，这看似转瞬间却又像永恒静止的时间里，我在她温和的笑颜中完全确定了我所找寻的恐怕就是这样的存在抑或是其所内含的心流。</u>我努力表现我非常想为她拍一张照片，当然这时她虽不知所措但还是同意了。我掩饰紧张故作沉稳地举起从来只拍风景的手机终于第一次为一位女生摄影，一位我将来会为其付出一定心血的女性。我也很感激，她虽然很尴尬，笑容也有一丝地僵硬，但对于互为陌生人来说，她已经很尊重我们彼此的信任了。之后我道了谢之后害羞地走了。但是我久久地徘徊始终不肯离去，我总有一种预感，即使我加入了社团加入了群，也终究很难找到她，我相信自己的判断，事实上也确实如此。我最终还是在徘徊了八九圈之后又折回去厚着脸皮要了她的联系方式，当然她的态度从头至尾都是一脸狐疑的态度。我想主要原因还是我的外表或者是表现吧，我并没有太多对于处理陌生人生关系的技巧。</p><p>  我开始了我人生的恐怕算是第一次的主动与一个陌生女孩的长期交流。我不知道促使我这样的理由是什么，也许是因为喜欢吧，或许我只能这么解释。但是我时常又不是非常的确定，<strong>因为我的感情是非常木讷的</strong>，甚至说我有时候连自己都不是非常爱，这样的人又怎么可能一直保持着爱着别人呢，我时常生活在对自己的一次又一次的自责中，从小到大一直如此。<u>我总是在责备自己为什么在别人最需要帮助的时候，因为自己的害怕被拒绝而选择放弃事后却总是追悔莫及。</u>小学上学走在路上，迎面走来一个初中女生，也许是因为低血糖直接朝我身上压过来，她自身已经没有支撑能力了，我没有防备被压倒在地，<strong>我的第一反应居然是吓得爬起来要逃走，事实上我确实这么做了。</strong>我一辈子也不能原谅自己，因为在我的记忆中，那时刚下过雨，地上都是积水，<strong>那个女生俯身趴在雨水中，孤独无助，失去了意识。</strong><u>而我却头也不回地跑了。</u>我始终拒绝承认那是我，那是苍白无力的，完全是自欺欺人。还有一次是在高一的时候，我很关心的女生，在教室里独自一人哭泣着，教室里人很少，我本可以上前安慰她，明明我那么在乎她，不是因为喜欢，只是因为她的柔弱。但是至始至终我却什么都没有做。<strong>她一个人承受着一切。我可以解释小时候那是因为不懂事，弱小的人心灵总是不安定的，但是高中的我已经有了自己成熟的世界观与价值观了，却还是与七年前没有任何区别。</strong>那一刻我知道了我这些年<strong>没有丝毫成长，我总是在逃避，总是在得过且过，但谁又不是这样呢？</strong>只是我一直在寻求自身的问题的解决办法，我知道办法是不存在的，停滞不前永远没有收获，我只能向前。总之说了这么多，我是很难完整坚持我的感情的。但我却保持这样三天两头主动找人聊天的态势，维持了大概有一个半月。但是我是不会聊天的，况且人家也并不愿意与你聊下去。我想方设法要为她出点力，诸如帮她录视频，帮她剪辑舞蹈视频，我一遍又一遍地修改，改了一个版本后又改了一个版本。费了很多时间做出来的作品，我自己不满意，我试探性地说我不是很满意，你还要嘛？她只是一句那算了吧。我想做几次三番表示我想替她做后勤，多次表达想请她看电影，多次表达想购买她的手工作品。然后没有一个得到答复。我知道其实这都不算什么，对于她来说我只是一个陌生人，恐怕至始至终一直如此。我其实也并不觉得这些有什么，不过是一个好心人的多次善意的帮助罢了。只是一次又一次的徒劳，我没有累意是不可能的。恐怕《烟火》是个契机点吧，经过我个人邀请无果后，社团组织一次组团看电影，那我当然还是很兴奋的，终于又能见面了。我赶到电影院，<u>他们已经在了，然后一堆人在看手机，背对着我，我走上前瞄了一眼，看到没人注意到我，我也就不好意思打招呼，便在旁边乱晃。</u>她不久便注意到我，并且问：<u>你也是我们后期部的小伙伴吗？我说是的。</u>很温暖，她能注意到我。她让我自我介绍，我说我是…，她说：<u>哦，原来是你啊（我能听出一丝失望）</u>，旁边的大家异口同声地说出我的网名，然后<strong>就在此时我举起手向大家打招呼的时候，所有人都不知是怎么都低下头看手机。</strong>我说不出来的感觉，从这一刻我就知道我<strong>不可能会融进这个圈子。</strong>而她带来的那个男生让我对她再也不会有任何兴趣了。不知为何，因为带男生来与自己一个人来完全就表示了她的心态。我专门挑了他们旁边买的票，想想真实煎熬啊。后面一排人全程的声音让我感觉我在菜市场，事实上这些我都能承受，最不能让我忍受的是，他们两个在一边看手机一边聊天。我喜欢的女生不会是在看电影时会表现出那样的表现。即使最让我有感触的地方，她好像也是无动于衷，并且一散场她便一溜烟地跑了。我不能接受，我实在不能接受。我独自坐了好久，一直到片尾曲放完，整场电影我连姿势都没变过，<u>即使后面吵翻天，我连头都没歪过。</u>我说不出来我到底是哪里难受，但我就是很痛苦，我飞也似地从影院出来，赶回宿舍，我什么都不想。但我知道，我不会再联系她了。他们都被网上连篇的差评左右了大脑。<strong>这部电影就是我的年少的幻影。</strong>典道一次又一次地想着如果那时那样就好了，只是为了跟她说一句：今天我想跟你在一起。仅仅是如此简单的话语，却因为胆小而如此大费周折。<strong>而我们呢？我呢？因为年少时的懦弱，害怕去爱人与被爱，对责任的恐惧，畏惧进入他人的内心世界，我犯了多少错误，但我永远也无法挽回，那个烟火是扁的世界永远是梦境中的一瞥。</strong>烟火绚烂却短暂，即使再美丽，却也转瞬即逝。一次又一次地轮回只为了这不过几秒的幸福，真的值得吗？这个问题恐怕是没有答案的。在这一小时里我看到了很多，我很好奇他们的从头笑到尾的看到了什么？她看到了什么？<strong>我内心只是有些痛楚，我不想再去多想。</strong></p><p>  <strong>我于你，止于唇齿，掩于岁月。</strong></p><p>  值得一提的是，这中间也因为发现了自己所爱而导致沉浸在自己打造的理想世界中，未免过于偏激而导致了令人失望的事情。大概是某天看到一篇关于谈<strong>“泡面爱情”</strong>的文章，以这样一个例子展开，具体是说到<u>很多人在学生团体中，聚会时，男女一见面开口便是有没有另一半，没有要不要在一起试试之类的，抨击这种不加了解出于为了找而找，出于炫耀或者其他与爱情本质无关的理由而在一起的感情观。</u>朋友曾经劝我为了更加了解她，便支招说约出来吃个饭，看个电影，行不行就在此时，不行就算。我极力反对这种做法，我只是一开始没明说，<strong>一是这样太过于直白</strong>，才认识几天就能做这些亲密的事，明显是出于恋爱而去的，可我的感情不是这么直白的；二是，我不希望以这种方式去博得见面的机会，进而两个人得以互相了解，我希望的是两个人在学习中，工作中，互帮互助中，点点滴滴中，能互相了解，<strong>让她感受到岁月中累积的善意，其中包含的深刻意味，从而我们开始能开始面对面的了解</strong>；三是靠这种方式建立的感情是不会<strong>长久</strong>的，因为在遭遇巨大挫折时，没有感情天秤的有力支撑点，换句话说就是只有一起经历过全身心的共同参与某件任务，或者共同承受某种苦难，或者共同享受某种快乐，在感情最为困难的时候会想起：那是我们在一起的理由，绝对不能动摇，那是最原初的寄托。四是<u>我觉得这种娱乐会阻碍两个人更深入地了解，吃饭或者看电影只是在充实在一起的时间，这之间的交流是虚无没有内容的。</u>虽然是共同参与但是我不会选择这种方式，只有两个人的心“共振”的时候，或许这种活动会非常幸福。便因此，我让友人去读这篇文章，答复是太长懒得读，让我解释，我还是抛出那句话：读书太少，想法太多。我们在感情观是起了巨大分歧，他认为自己没有持有这种“泡面爱情”的想法，但是这种建议本身就很欠缺考虑，我当然很感谢他的建议，但是在深入考虑后确实与我的想法大相径庭。他执着于文章本身过于矫情，怪我强加于这种帽子给他。我觉得我们确实该互相安静地待一会，<u>遂一月有余没有任何交流。</u></p><p>  时光匆匆，写到这里已经过去了几个日夜。该谈谈学习方向的事情了，我对计算机这个方向恐怕是无疑了，开学到现在学完了java，开始了C++和数据结构的课程。但是有一段时间迷茫的是，参与到实际项目中还是闭门造车好好自学基础知识。参与实际项目可以快速学习到很多网站的知识，并且能锻炼实际开发的能力，培养与人交流的能力，获奖了还能有助于考研的面试，然而我的储备知识基本很少，但是学起来也很快php这种东西门槛很低，所以我又觉得这么低门槛的东西真的有必要去学吗？对于不是科班毕业的人，培训几个月也能上手开发实际项目了，而我的目标并不止于此。仅仅是为了项目也没有深造的意义了，等我学完了数据结构、组原、操作系统再来学语言和现在去慢慢啃的速度完全是两个亮级。所以我虽然现在确定了我的想法是一心准备专业课的学习，但是刚开始那几个月真实焦头烂额，我到处实验室跑，一开始想搞一搞单片机，发现硬件不是我的目标。后来辗转往返创新实验室想参与网站开发，发现他们实现的功能确实很高大上，但却是拿现成的东西来“拼装”组成自己想要的东西罢了。即使花了很多精力去学会了，于我来说可能会有满足感，但是没有实际价值，项目这种东西对算法来说就显得低级了一点了。从陈老师那里终于得到了中肯的建议，对我这种情况不用考虑太多比赛的事情，最重要的还是好好深入地理解底层知识，比赛终究是浮云。</p><p>  这段时间最让我窝一肚子火的恐怕是参加数学建模这个事情了。不是这个比赛本身的问题，而是队友的问题。一开始找不到人，在数学建模群里问，有人主动要求组队，看名字以为是男生，我觉得这么主动肯定是有责任心并且是有准备的啊，而且每句话都带着句号，合作肯定会很愉快，所以就欣然答应了。然后她又帮我找了一个队友，就这样队伍就组建成功了。从组建成功到比赛结束，我们总共就见过一次。比赛开始的第一天，基本对问题没怎么看。第二天我仔细看了一下，然后简单开了个小会，分配了一下任务，我对她们要求不高给我好好看看竞赛论文规范，然后搜集一下资料，敲一敲类似问题重述之类的文字就够了。最后一天，我花了整整一天建了四个模型，深夜收到她们给我的文稿，差点没气吐血，这么长时间敲点文字也能搞成这个样子。多次强调的格式一个都没做，好像在告诉我不会用Word改文字字体。我整合模型与文字到深夜最后发现有一个承诺书要手写签名，然后拍照上传，但是第二天一早就要交，我没办法，情急之下，只能用电子版充数，第二天早上起来打印签好名却上传不了了。早上怎么跟社团交流得到的回复都是规定就是规定，改变不了。<strong>说实话，几年来恐怕都没这么火大过，只是让她们好好看看仅仅只有两页纸的竞赛规定，都完成不了，里面明明有承诺书的要求，却没有一个人告诉我。</strong>我最后才知道这个事情，到底是什么样的原因，这么没有责任心的人会选择参加比赛？不过以她们这种行为，也告诉我依赖是一种多么可怕的事情。往后我对比赛这种事，兴趣没有那么大了。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;痛苦的根源，无能的愤怒。&lt;/p&gt;
    
    </summary>
    
      <category term="Life" scheme="https://kemo.xyz/categories/Life/"/>
    
    
      <category term="Diary" scheme="https://kemo.xyz/tags/Diary/"/>
    
  </entry>
  
  <entry>
    <title>java_castle</title>
    <link href="https://kemo.xyz/java-castle.html"/>
    <id>https://kemo.xyz/java-castle.html</id>
    <published>2017-11-07T13:52:09.000Z</published>
    <updated>2019-08-07T04:38:30.596Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>java类与对象的实例以及可扩展性<br><a id="more"></a></p><ul><li>game.java</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> castle;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Game</span> </span>{</span><br><span class="line"><span class="keyword">private</span> Room currentRoom;</span><br><span class="line"><span class="keyword">private</span> HashMap<String, Handler>handlers =<span class="keyword">new</span> HashMap<String,Handler>();  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Game</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="comment">//handlers.put("go", new HandlerGo());</span></span><br><span class="line">handlers.put(<span class="string">"bye"</span>, <span class="keyword">new</span> HandlerBye(<span class="keyword">this</span>));</span><br><span class="line">handlers.put(<span class="string">"help"</span>, <span class="keyword">new</span> HandlerHelp(<span class="keyword">this</span>));</span><br><span class="line">handlers.put(<span class="string">"go"</span>, <span class="keyword">new</span> HandlerGo(<span class="keyword">this</span>));</span><br><span class="line">createRooms();</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">createRooms</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    Room outside, lobby, pub, study, bedroom;    </span><br><span class="line">    <span class="comment">//制造房间</span></span><br><span class="line">    outside = <span class="keyword">new</span> Room(<span class="string">"城堡外"</span>);</span><br><span class="line">      lobby = <span class="keyword">new</span> Room(<span class="string">"大堂"</span>);</span><br><span class="line">      pub = <span class="keyword">new</span> Room(<span class="string">"小酒吧"</span>);</span><br><span class="line">      study = <span class="keyword">new</span> Room(<span class="string">"书房"</span>);</span><br><span class="line">    bedroom = <span class="keyword">new</span> Room(<span class="string">"卧室"</span>);      </span><br><span class="line">    <span class="comment">//初始化房间的出口</span></span><br><span class="line">    outside.setExit(<span class="string">"east"</span>, lobby);</span><br><span class="line">    outside.setExit(<span class="string">"south"</span>, study);</span><br><span class="line">    outside.setExit(<span class="string">"north"</span>, pub);</span><br><span class="line">      lobby.setExit(<span class="string">"west"</span>, outside);</span><br><span class="line">        pub.setExit(<span class="string">"east"</span>, outside);</span><br><span class="line">      study.setExit(<span class="string">"north"</span>, outside);</span><br><span class="line">      study.setExit(<span class="string">"east"</span>, bedroom);</span><br><span class="line">    bedroom.setExit(<span class="string">"west"</span>,study);</span><br><span class="line">      lobby.setExit(<span class="string">"up"</span>, pub);</span><br><span class="line">        pub.setExit(<span class="string">"down"</span>, lobby);</span><br><span class="line">    currentRoom = outside;  <span class="comment">//从城堡门外开始</span></span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">printWelcome</span><span class="params">()</span> </span>{</span><br><span class="line">    System.out.println();</span><br><span class="line">    System.out.println(<span class="string">"欢迎来到城堡！"</span>);</span><br><span class="line">    System.out.println(<span class="string">"这是一个超级无聊的游戏。"</span>);</span><br><span class="line">    System.out.println(<span class="string">"如果需要帮助，请输入 'help' 。"</span>);</span><br><span class="line">    System.out.println();</span><br><span class="line">    showPrompt();       </span><br><span class="line">}</span><br><span class="line"><span class="comment">// 以下为用户命令</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">goRoom</span><span class="params">(String direction)</span> </span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    Room nextRoom = currentRoom.getExit(direction);   </span><br><span class="line">    <span class="keyword">if</span> (nextRoom == <span class="keyword">null</span>) {</span><br><span class="line">        System.out.println(<span class="string">"那里没有门！"</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span> {</span><br><span class="line">        currentRoom = nextRoom;</span><br><span class="line">        showPrompt();</span><br><span class="line">    }</span><br><span class="line">}    </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showPrompt</span><span class="params">()</span> </span>{</span><br><span class="line"> System.out.println(<span class="string">"现在你在"</span> + currentRoom);</span><br><span class="line">     System.out.print(<span class="string">"出口有："</span>);</span><br><span class="line">     System.out.print(currentRoom.getExitDesc());</span><br><span class="line">     System.out.println();</span><br><span class="line">}  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span> </span>{</span><br><span class="line">Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">while</span> ( <span class="keyword">true</span> ) {</span><br><span class="line">String line = in.nextLine();</span><br><span class="line">String[] words = line.split(<span class="string">" "</span>);</span><br><span class="line">Handler handler=handlers.get(words[<span class="number">0</span>]);<span class="comment">//handler的子类赋给了父类</span></span><br><span class="line">String value=<span class="string">""</span>;</span><br><span class="line"><span class="keyword">if</span>(words.length><span class="number">1</span>)</span><br><span class="line">value=words[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span>(handler !=<span class="keyword">null</span>) {</span><br><span class="line">handler.doCmd(value);</span><br><span class="line"><span class="keyword">if</span>(handler.isBye())</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//    if ( words[0].equals("help") ) {</span></span><br><span class="line"><span class="comment">//    printHelp();</span></span><br><span class="line"><span class="comment">//    } else if (words[0].equals("go") ) {</span></span><br><span class="line"><span class="comment">//    goRoom(words[1]);</span></span><br><span class="line"><span class="comment">//    } else if ( words[0].equals("bye") ) {</span></span><br><span class="line"><span class="comment">//    break;</span></span><br><span class="line"><span class="comment">//    }</span></span><br><span class="line"><span class="comment">//    } </span></span><br><span class="line">}</span><br><span class="line">in.close();</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">Game game = <span class="keyword">new</span> Game(); </span><br><span class="line">game.printWelcome();</span><br><span class="line">game.play();</span><br><span class="line">    System.out.println(<span class="string">"感谢您的光临。再见！"</span>);       </span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>Handler.java</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> castle;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Handler</span> </span>{</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> Game game;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Handler</span><span class="params">(Game game)</span> </span>{</span><br><span class="line"><span class="keyword">this</span>.game=game;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doCmd</span><span class="params">(String word)</span> </span>{}</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isBye</span><span class="params">()</span> </span>{<span class="keyword">return</span> <span class="keyword">false</span>;}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>HandlerBye.java</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> castle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HandlerBye</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HandlerBye</span><span class="params">(Game game)</span> </span>{</span><br><span class="line"><span class="keyword">super</span>(game);</span><br><span class="line">}</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isBye</span><span class="params">()</span> </span>{</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>HandlerGo.java</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> castle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HandlerGo</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HandlerGo</span><span class="params">(Game game)</span> </span>{</span><br><span class="line"><span class="keyword">super</span>(game);</span><br><span class="line">}</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doCmd</span><span class="params">(String word)</span> </span>{</span><br><span class="line">game.goRoom(word);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li><p>HandlerHelp.java</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> castle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HandlerHelp</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HandlerHelp</span><span class="params">(Game game)</span> </span>{</span><br><span class="line"><span class="keyword">super</span>(game);</span><br><span class="line">}</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doCmd</span><span class="params">(String word)</span> </span>{</span><br><span class="line">System.out.println(<span class="string">"迷路了吗？你可以做的命令有：go bye help"</span>);</span><br><span class="line">      System.out.println(<span class="string">"如：\tgo east"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>Room.java</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> castle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Room</span> </span>{</span><br><span class="line">   <span class="keyword">private</span> String description;</span><br><span class="line">   <span class="keyword">private</span> HashMap<String,Room> exits=<span class="keyword">new</span> HashMap<String,Room>();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Room</span><span class="params">(String description)</span> </span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="keyword">this</span>.description = description;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setExit</span><span class="params">(String dir,Room room)</span> </span>{</span><br><span class="line">    exits.put(dir, room);</span><br><span class="line">    </span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="keyword">return</span> description;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getExitDesc</span><span class="params">()</span> </span>{</span><br><span class="line">    StringBuffer sb=<span class="keyword">new</span> StringBuffer();</span><br><span class="line">    <span class="keyword">for</span>(String dir:exits.keySet()) {</span><br><span class="line">    sb.append(dir);</span><br><span class="line">    sb.append(<span class="string">' '</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> sb.toString();</span><br><span class="line">    </span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Room <span class="title">getExit</span><span class="params">(String direction)</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> exits.get(direction);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;java类与对象的实例以及可扩展性&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Technology" scheme="https://kemo.xyz/categories/Technology/"/>
    
    
      <category term="Learning" scheme="https://kemo.xyz/tags/Learning/"/>
    
  </entry>
  
</feed>
